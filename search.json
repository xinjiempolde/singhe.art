[{"title":"B-Tree","url":"/2022/06/02/data_structure/B-Tree/","content":"<blockquote>\n<p>本文内容参考自<a\nhref=\"https://www.youtube.com/watch?v=aZjYr87r1b8&amp;list=LL&amp;index=4&amp;t=1s\">YouTube\nAbdul\nBari</a>，若有错误还请指正。十分推荐观看原视频，讲得非常清晰易懂。</p>\n</blockquote>\n<h1 id=\"前言\">前言</h1>\n<p>本文将从硬盘的物理结构说起，介绍关系表中的数据如何在磁盘上进行存储和表示。并通过查询的例子，说明为什么要使用索引来加快查询。本文将从索引结构的设计角度，从m路查找树过渡到B树和B+树。</p>\n<span id=\"more\"></span>\n<h1 id=\"磁盘结构\">磁盘结构</h1>\n<p>一块硬盘由多个磁盘片组成，每个磁盘片像一张CD光盘一样。和CD光盘不同的是，每个磁盘片都有两面，且每一面都能够存储数据，每一面均有一个读写头去读写数据。下图为由4个磁盘片和8个读写头组成的硬盘。</p>\n<figure>\n<img src=\"http://img.singhe.art/04fig01.gif\"\nalt=\"graphics/04fig01.gif\" />\n<figcaption aria-hidden=\"true\">graphics/04fig01.gif</figcaption>\n</figure>\n<p>对于磁盘片的每一面，都会被划分成若干个同心圆，他们被称为磁道。而每一个磁道，又会被划分成多个扇区，每个扇区的大小通常为512B。下图为盘面的示意图，由图可知，一个盘面由4个磁道组成，而每一个磁道由7个扇区构成，每个扇区大小通常为512B。</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/%E7%A3%81%E7%9B%98%E7%BB%93%E6%9E%84.png\"\nalt=\"磁盘结构\" />\n<figcaption aria-hidden=\"true\">磁盘结构</figcaption>\n</figure>\n<p>因此，如果我们知道了数据的盘面号、磁道号、扇区号，我们就能够准确定位数据所在扇区，并且能将该扇区512B的数据从磁盘读取到内存中。这种通过盘面号、磁道号、扇区号定位数据的方式称为CHS寻址。磁盘除了CHS寻址外，还有另一种寻址方式：LBA寻址。也就是说，你只需要告诉我你需要的扇区号，磁盘适配器便能从磁盘中读取所需的扇区。这种方式比CHS寻址更简洁更直观，因此本文采用扇区号的方式来代指磁盘块号。</p>\n<h1 id=\"表数据如何存储在磁盘上\">表数据如何存储在磁盘上</h1>\n<p>假设我们要存储关系表<code>Employee</code>的数据，其结构如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Empoyee(</span><br><span class=\"line\">\tid <span class=\"type\">char</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">\tname <span class=\"type\">char</span>(<span class=\"number\">50</span>),</span><br><span class=\"line\">\tdepartment <span class=\"type\">char</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">\tphone <span class=\"type\">char</span>(<span class=\"number\">8</span>),</span><br><span class=\"line\">\tinfo <span class=\"type\">char</span>(<span class=\"number\">50</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>由此可知，id占用10字节，name占用50字节，department占用8字节，info占用50字节。则每插入一行数据会占用128字节的空间</p>\n<p>下面是要进行存储的表数据，一共有100行数据要进行存储：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>id</th>\n<th>name</th>\n<th>department</th>\n<th>phone</th>\n<th>info</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>1</td>\n<td>John</td>\n<td>Facebook</td>\n<td>12345678</td>\n<td>this guy is so nice</td>\n</tr>\n<tr class=\"even\">\n<td>2</td>\n<td>Tom</td>\n<td>Google</td>\n<td>12352135</td>\n<td>good</td>\n</tr>\n<tr class=\"odd\">\n<td>3</td>\n<td>Anid</td>\n<td>...</td>\n<td>...</td>\n<td>...</td>\n</tr>\n<tr class=\"even\">\n<td>4</td>\n<td>Khan</td>\n<td>...</td>\n<td>...</td>\n<td>...</td>\n</tr>\n<tr class=\"odd\">\n<td>...</td>\n<td>...</td>\n<td>...</td>\n<td>...</td>\n<td>...</td>\n</tr>\n</tbody>\n</table>\n<p>由前文我们知道，一个磁盘块（即一个扇区）的大小为512字节，一行表数据会占用128字节，那么一个磁盘块能够存放4行表数据。那么对于100行表数据，我们需要25个磁盘块进行存储。</p>\n<p><img\nsrc=\"http://img.singhe.art/QQ%E5%9B%BE%E7%89%8720220602195617.png\" /></p>\n<p>如果我们要进行<code>SELECT * FROM Employee WHERE id = 99</code>查询，由于没有索引信息，因此需要将磁盘块依次读入内存中，查找该磁盘块中是否含有该数据行，在最坏的情况下需要读取25个磁盘块。如果给id加上索引信息又会如何呢？</p>\n<p><img src=\"http://img.singhe.art/multiple-level-index.png\" /></p>\n<p>我们现在给id加上索引信息，通过id就能够知道该行表数据在哪一个磁盘块上。假设id占10字节，磁盘块号占6字节，则一行索引信息占用16字节，一个512字节大小磁盘块能够容纳32行索引信息。那么100行表数据，100/32则至少需要4个额外的磁盘块来存储索引信息。当对id加上索引信息后，我们只需要将4个索引磁盘块读入内存中然后将id与99进行比对，就能够找到对应的磁盘块号，再将数据磁盘块后读入内存就完成了数据的查找。因此，id含有索引信息后共需要读入4+1=5个磁盘块。</p>\n<p>现在，如果我们要存储的数据行有1000行，那么需要250个数据块存储表数据，需要40个磁盘块存储索引信息。这就意味着我们又需要读取40个索引磁盘块进行查找了。那么该如何进行优化呢？与页表类似，我们可以对索引表再创建一个索引表。下图展示了该的过程。</p>\n<p><img src=\"http://img.singhe.art/high-level.png\" /></p>\n<p>​</p>\n<p>对于40个索引磁盘块，我们只需要40/32=2个二级索引磁盘块来存储二级索引信息。当对1000行数据进行<code>SELECT * FROM Employee WHERE id = 18;</code>时，首要必须先读取二级索引磁盘块，它记载了某个id区间的行数据在哪个磁盘块。由于18大于1小于33，因此它的索引数据应该在1002号磁盘块。接着我们读取1002号磁盘块进入内存，通过比对id找到id=18数据行所指向的磁盘块，假设其磁盘块号为1220，那么我们只需要将1220号磁盘块读入内存就完成了数据的查找。我们一个读取了二级索引磁盘块1块、一级索引磁盘块一块、数据磁盘块一块，一共只读取了三块磁盘块。</p>\n<p>若将该多级索引结构向右旋转，便得到了一颗树的结构，我们希望在插入数据的时候，树的结构能够自动地合并、分裂维持索引信息的正确性，这便是B树和B+树的由来。</p>\n<h1 id=\"m路查找树\">m路查找树</h1>\n<p>在介绍B树和B+树之前，我们先来了解二分查找树和m路查找树。</p>\n<figure>\n<img src=\"http://img.singhe.art/%E4%BA%8C%E5%8F%89%E6%A0%91.png\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>上述图片描述了一棵二分查找树(Binary Search Tree,\nBST)。加入我们要查找14，那么先和根节点进行比较，如果小于根节点向左子树查找，大于根节点向右子树查找。14&gt;13，因此向右查找。接着14&lt;15，向左子树查找。最终我们找到了需要的值14。</p>\n<p>而m路查找树就是每个节点可以有m个孩子节点，下图是一棵三路查找树。</p>\n<p><img\nsrc=\"http://img.singhe.art/3%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91.png\" /></p>\n<p>通过查找树，我们通常能在O(logn)的时间复杂度下找到我们需要的值。那么，这些查找树是如何与数据库中的索引对于起来的呢？一般来说，树的每个节点便对应一个磁盘块。每个节点中除了存储Key值外，也会存储Value的信息，也就是磁盘块号。当我们通过m路查询树找到了id的时候，我们也就找到了对应的磁盘块号。下图是示意图。</p>\n<p><img\nsrc=\"http://img.singhe.art/3%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91%E7%A3%81%E7%9B%98%E5%BA%94%E7%94%A8.png\" /></p>\n<p>但是m路查找树存在着问题。假如我们要插入Key：10、20、30.如果不加任何限制和约束，它会变成下图所示的结构。</p>\n<p><img\nsrc=\"http://img.singhe.art/3%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91%E5%BC%8A%E7%AB%AF.png\" /></p>\n<p>可以看出，没有限制和约束，m路查找树退化成了线性查找，时间复杂度为O(log(n))。为了解决这一问题，人们便提出B树，可以说，B树就是m路查找树加上相应的规则。</p>\n<h1 id=\"b树\">B树</h1>\n<p>要使m路查找树成为m阶B树，需要满足以下条件：</p>\n<ul>\n<li>非根节点必须至少有<span class=\"math inline\">\\(\\lceil\n\\frac{m}{2}\\rceil\\)</span>个孩子节点</li>\n<li>根节点可以只有2个孩子节点</li>\n<li>叶子节点在同一层</li>\n<li>自底向上构建树</li>\n</ul>\n<p>这里通过例子来说明这些规则。假如我们要插入的Key序列为10，20，40，50，60，70，80，30，35那么我们构建的4阶B树过程如下图所示。</p>\n<p><img\nsrc=\"http://img.singhe.art/4%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%9E%84%E9%80%A0%E4%B8%BE%E4%BE%8B.png\" /></p>\n<h1 id=\"b树-1\">B+树</h1>\n<p>B+树和B树区别不大，最主要的区别有如下两点：</p>\n<ol type=\"1\">\n<li>B+树非叶子节点并不存储Value，而只存Key。要找到磁盘块信息必须找到叶子节点位置。这样做可以增加每个磁盘块容纳Key的数量，也能降低树的高度，减少IO的次数。</li>\n<li>叶子节点含有所有的Key，非叶子节点的Key也会复制一份到叶子结点中。并且通过链表的形式将叶子节点组织在一起。</li>\n</ol>\n<p><img src=\"http://img.singhe.art/B+%E6%A0%91.png\" /></p>\n","categories":["data_structure"],"tags":["B-Tree","database"]},{"title":"IEEE754","url":"/2023/06/15/data_structure/IEEE754/","content":"<blockquote>\n<p>转载自<a href=\"https://blog.csdn.net/gao_zhennan/article/details/120717424#t8\">https://blog.csdn.net/gao_zhennan/article/details/120717424#t8</a></p>\n</blockquote>\n<h1 id=\"x01-浮点数在内存中的存储方式\">0x01 浮点数在内存中的存储方式</h1>\n<h2 id=\"什么是ieee754标准\">1、什么是IEEE754标准</h2>\n<p>我们知道, 计算机内部实际上只能存储或识别二进制.</p>\n<p>在计算机中, 我们日常所使用的文档, 图片, 数字等, 在储存时,\n实际上都要以二进制的形式存放在内存或硬盘中,\n内存或硬盘就好像是一个被划分为许多小格子的容器,\n其中每个小格子都只能盛放0或1...</p>\n<figure>\n<img src=\"https://pic3.zhimg.com/v2-01aebebb171185b9d1eb1de7bca6d3ca_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<span id=\"more\"></span>\n<p>我们日常使用的 <strong>浮点数</strong> 也不例外,\n最终也要被存储到这样的二进制小格子中.</p>\n<p>这就涉及到了 <strong>应该怎么存</strong> 的问题, 比如, 对于浮点数\n<strong>20.5</strong>, 是应该存储为 <strong>0100011</strong> 呢,\n还是应该存储为 <strong>1100110</strong> 呢?</p>\n<p>事实上直到20世纪80年代, 还是计算机厂商各自为战,\n每家都在设计自己的浮点数存储规则, 彼此之间并不兼容. <strong>直到1985年,\nIEEE754标准问世, 浮点数的存储问题才有了一个通用的工业标准.</strong></p>\n<p>IEEE754标准提供了如何在计算机内存中,<strong>以二进制的方式存储十进制浮点数</strong>的具体标准,</p>\n<p>IEEE754标准发布于1985年. 包括 javascript, Java,\nC在内的许多编程语言在实现浮点数时, 都遵循IEEE754标准.</p>\n<p>IEEE754的最新标准是IEEE754-2008, 但本篇文章主要参考的是IEEE754-1985,\n好在两者相差并不大,\n而参照1985的标准可以让我们对一些基础概念有更好的理解</p>\n<p>IEEE754提供了四种精度规范, 其中最常用的是\n<strong>单精度浮点型</strong> 和 <strong>双精度浮点型</strong> ,\n但IEEE754并没有规定32位浮点数类型需要叫做 <strong>float</strong>,\n或64位浮点数需要叫做 <strong>double</strong>.\n它只是提供了一些关于如何存储不同精度浮点数的规范和标准. 不过一般情况下,\n如果我们提到 float, 其实指的就是IEEE754标准中的32位单精度浮点数.\n如果我们提到 double, 其实指的就是IEEE754标准中的64位双精度浮点数</p>\n<p>下面是单精度浮点数和双精度浮点数的一些信息, 可以先简单看一下,\n看不懂也没关系, 下文会对这里的信息做详细的解释...</p>\n<p><img src=\"http://img.singhe.art/v2-441507575baadbf6fec51d35612778f4_b.jpg\" alt=\"img\"> 好啦, 铺垫完了, 开始正文吧~</p>\n<h2 id=\"位单精度浮点数在内存中的存储方式\">2、32位单精度浮点数在内存中的存储方式</h2>\n<p>上文说到: IEEE754标准提供了如何在计算机内存中,\n<strong>以二进制的方式存储十进制浮点数</strong>的具体标准,\n并制定了四种精度规范.</p>\n<p>这里我们主要研究 32位浮点数 (或者说单精度浮点数, 或者说float类型)\n在计算机中是怎么存储的. 其他精度, 比如64位浮点数, 则大同小异.</p>\n<p>想要存储一个32位浮点数, 比如20.5,\n在内存或硬盘中要占用<strong>32个</strong>二进制位 (或者说32个小格子,\n32个比特位)</p>\n<p>这32个二进制位被划分为<strong>3</strong>部分, 用途各不相同:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-32e425cdb908c47586267e59228fcd22_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>32位浮点数内存占用示意图, 共使用了32个小格子</p>\n<p>这32个二进制位的内存编号从高到低 (从31到0), 共包含如下几个部分:</p>\n<p><strong>sign: 符号位, 即图中蓝色的方块</strong></p>\n<p><strong>biased exponent: 偏移后的指数位,\n即图中绿色的方块</strong></p>\n<p><strong>fraction: 尾数位, 即图中红色的方块</strong></p>\n<p>下面会依次介绍这三个部分的概念, 用途.</p>\n<h2 id=\"符号位-sign\">1. 符号位: sign</h2>\n<figure>\n<img src=\"http://img.singhe.art/v2-f9544cd727b7318a5a934b68481b343e_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>以32位单精度浮点数为例, 以下不再赘述:</p>\n<p>符号位: 占据最高位(第31位)这一位, 用于表示这个浮点数是正数还是负数,\n为0表示正数, 为1表示负数.</p>\n<p>举例: 对于十进制数20.5, 存储在内存中时, 符号位应为<strong>0</strong>,\n因为这是个<strong>正数</strong></p>\n<h2 id=\"偏移后的指数位-biased-exponent\"><strong>2. 偏移后的指数位:\nbiased exponent</strong></h2>\n<figure>\n<img src=\"http://img.singhe.art/v2-b3ac4ab64b2666cf3111151a6b135cc8_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>指数位占据第30位到第23位这8位. 也就是上图的绿色部分.</p>\n<p>用于表示以2位底的指数. 至于这个指数的作用, 后文会详细讲解,\n这里只需要知道: 8位二进制可以表示256种状态, <strong>IEEE754规定,\n指数位用于表示[-127, 128]范围内的指数</strong>.</p>\n<p>不过为了表示起来更方便,\n浮点型的指数位都有一个固定的<strong>偏移量(bias)</strong>, 用于使\n<strong>指数 + 这个偏移量 = 一个非负整数</strong>.\n这样指数位部分就不用为如何表示负数而担心了.</p>\n<p><strong>规定: 在32位单精度类型中, 这个偏移量是127.\n在64位双精度类型中, 偏移量是1023.</strong> 所以, 这里的偏移量是127</p>\n<p>⭐ 即, 如果你运算后得到的指数是 <strong>-127</strong>, 那么偏移后,\n在指数位中就需要表示为: -127 + 127(偏移量) = <strong>0</strong></p>\n<p>如果你运算后得到的指数是 -10, 那么偏移后, 在指数位中需要表示为: -10 +\n127(偏移量) = <strong>117</strong></p>\n<p>看, 有了偏移量, 指数位中始终都是一个<strong>非负整数</strong>.</p>\n<p>看到这里, 可能会觉得还不是很清楚指数的作用到的是什么. 没关系,\n让我们先继续往下看吧...</p>\n<h2 id=\"尾数位fraction\"><strong>3. 尾数位:fraction</strong></h2>\n<figure>\n<img src=\"http://img.singhe.art/v2-16e9205b1880938b8ca301eac496be40_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>尾数位: 占据剩余的22位到0位这23位. 用于存储尾数.</p>\n<p>在以二进制格式存储十进制浮点数时,\n首先需要把十进制浮点数表示为二进制格式, 还拿十进制数20.5举例:</p>\n<p>十进制浮点数20.5 = 二进制10100.1</p>\n<p>然后, 需要把这个二进制数转换为以2为底的指数形式:</p>\n<p>二进制<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.105ex\" height=\"2.09ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 9770.6 923.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(1000,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(2000,0)\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(2500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(2778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3555.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4611.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(1278,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1778,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(2278,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(2778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8111.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8834,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></g></svg></mjx-container></span></p>\n<p>注意转换时, 对于乘号左边, 加粗的那个二进制数<strong>1.01001</strong>,\n需要把小数点放在左起第一位和第二位之间. 且第一位需要是个非0数.\n这样表示好之后,\n其中的<strong>1.01001</strong>就是<strong>尾数.</strong></p>\n<blockquote>\n<p>用 二进制数 表示 十进制浮点数 时, 表示为\n<strong>尾数*指数</strong>的形式,\n并把尾数的小数点放在第一位和第二位之间, 然后保证第一位数非0,\n这个处理过程叫做 <strong>规范化(normalized)</strong></p>\n</blockquote>\n<p>我们再来看看规范化之后的这个数: <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.672ex\" height=\"1.954ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 5159 863.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(1278,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1778,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(2278,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(2778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></g></svg></mjx-container></span></p>\n<p>其中1.01001是<strong>尾数</strong>,\n而4就是<strong>偏移前的指数(unbiased exponent)</strong>, 上文讲过,\n32位单精度浮点数的偏移量(bias)为127, 所以这里加上偏移量之后,\n得到的<strong>偏移后指数(biased exponent)</strong>就是 <strong>4 + 127 =\n131</strong>, 131转换为二进制就是<strong>1000 0011</strong></p>\n<p>现在还需要对<strong>尾数</strong>做一些特殊处理</p>\n<p><strong>1. 隐藏高位1.</strong></p>\n<p>你会发现, 尾数部分的最高位始终为<strong>1.</strong> 比如这里的\n<strong>1.</strong>01001, 这是因为前面说过, 规范化之后,\n尾数中的小数点会位于左起第一位和第二位之间. 且第一位是个非0数.\n而二进制中, 每一位可取值只有0或1, 如果第一位非0, 则第一位只能为1.\n所以在存储尾数时, 可以省略前面的 1和小数点.\n只记录尾数中小数点之后的部分, 这样就节约了一位内存.\n所以这里只需记录剩余的尾数部分: <strong>01001</strong></p>\n<p>所以, 以后再提到尾数, 如无特殊说明,\n指的其实是隐藏了整数部分<strong>1.</strong> 之后, 剩下的小数部分</p>\n<ol start=\"2\" type=\"1\">\n<li>低位补0</li>\n</ol>\n<p>有时候尾数会不够填满尾数位(即图中的红色格子). 比如这里的,\n尾数01001不够23位</p>\n<p>此时, 需要在<strong>低位补零</strong>, 补齐23位.</p>\n<p>之所以在低位补0, 是因为尾数中存储的本质上是二进制的小数部分,\n所以如果想要在不影响原数值的情况下, 填满23位, 就需要在低位补零.</p>\n<p>比如, 要把二进制数1.01在不改变原值的情况下填满八位内存,\n写出来就应该是: 1.010 0000, 即需要在低位补0</p>\n<p>同理, 本例中因为尾数部分存储的实际上是省略了整数部分\n<strong>1.</strong> 之后, 剩余的小数部分,\n所以这里补0时也需要在低位补0:</p>\n<p>原尾数是: 01001(不到23位)</p>\n<p>补零之后是: 0100 1000 0000 0000 000 (补至23位)</p>\n<h2 id=\"实例-表示十进制浮点数20.5\">4、实例: 表示十进制浮点数20.5</h2>\n<p>在上面的讨论中, 我们已经得出, 十进制浮点数 20.5 的:</p>\n<p>符号位是: 0</p>\n<p>偏移后指数位是: 1000 0011</p>\n<p>补零后尾数位是: 0100 1000 0000 0000 000</p>\n<p>现在, 把这三部分按顺序放在32位浮点数容器中, 就是 0 1000 0011 0100\n1000 0000 0000 000</p>\n<p>这就在32位浮点数容器中, 以二进制表示了一个十进制数20.5的方式</p>\n<p>这里有一个<a href=\"https://www.h-schmidt.net/FloatConverter/IEEE754.html\">可以验证的IEEE754浮点数内存状态的网站</a>,\n我们来验证一下:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-aeeaa853bb58dbfbfe2c7cc3a86aac11_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>可见验证是通过的. 不过为了加深理解, 我们再反向推导一遍:</p>\n<p><strong>假设现在我们有一个用二进制表示的32位浮点数: 0 1000 0011 0100\n1000 0000 0000 000, 求它所代表的十进制浮点数是多少?</strong></p>\n<p>观察可知:</p>\n<p>符号位是<strong>0</strong>: 所以这是个<strong>正数</strong>.</p>\n<p>尾数是: 0100 1000 0000 0000 000</p>\n<p>去掉后面的补零, 再加上隐藏的整数部分<strong>1.</strong>\n得到完整的尾数(含隐藏的整数部分)为: <strong>1.01001</strong></p>\n<p>偏移后的指数位为: 1000 0011, 转换为十进制为131, 减去偏移量127,\n得到真正的指数是 <strong>4</strong></p>\n<p>所以, 最后得到的浮点数 = 尾数(含隐藏的整数部分) *\n以2为底的指数次幂</p>\n<p>= 二进制的: <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.672ex\" height=\"1.954ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 5159 863.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(1278,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1778,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(2278,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(2778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(533,363) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></g></svg></mjx-container></span></p>\n<p>= 把小数点向右移动4位</p>\n<p>= 二进制的10100.1</p>\n<p>= 十进制位20.5</p>\n<p>注意, 直到最后一步才把二进制转换为十进制.</p>\n<p>附带的, 这里还有一个<a href=\"https://tool.oschina.net/hexconvert\">进制转换网站</a>,\n可以看到二进制的10100.1, 确实等于十进制的20.5</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-c423d052aea472eb3577c3e12ca2c8dc_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>到这里就讲解的差不多了，随后是一张大体的计算方法示意图</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-e319c25ffdd4b40f34096dde45ced77b_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>还有双精度类型的内存状态示意图:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-8479dec5d2bdeaedb098b08dd34d5ea9_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>存储双精度浮点数需要64个比特位. 其中最高位仍是符号位,\n而指数位提升到了11位, 尾数位提升到了52位</p>\n<p>下一节会讲述为什么32位单精度浮点数的取值范围是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"31.497ex\" height=\"2.005ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 13921.7 886\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"B1\" d=\"M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2778.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3500.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mstyle\" transform=\"translate(5840.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(6840.7,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7201.7,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(7686.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mo\" transform=\"translate(8908.9,0)\"><path data-c=\"B1\" d=\"M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(9909.1,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11409.3,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(12131.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container></span></p>\n<h1 id=\"x02-32位浮点数的取值范围\">0x02 32位浮点数的取值范围</h1>\n<p>这是\"IEEE754标准系列\"的第二段文章. 主要讨论32位浮点数\n(或者说float类型) 的取值范围到底是如何计算出来的.</p>\n<p>本章主要参考自<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/IEEE_754-1985\">IEEE754\nwikien.wikipedia.org/wiki/IEEE_754-1985</a></p>\n<h2 id=\"wiki中-32位浮点数的取值范围\">1、wiki中,\n32位浮点数的取值范围</h2>\n<p>这里先直接给出维基上的取值范围:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-63bf64dd03a14e22e04e300aaeee871d_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>可见float类型, 或者说32位浮点数的取值范围是<strong>:</strong><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"31.497ex\" height=\"2.005ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 13921.7 886\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"B1\" d=\"M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2778.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3500.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mstyle\" transform=\"translate(5840.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mi\" transform=\"translate(6840.7,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7201.7,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mstyle\" transform=\"translate(7686.7,0)\"><g data-mml-node=\"mspace\"></g></g><g data-mml-node=\"mo\" transform=\"translate(8908.9,0)\"><path data-c=\"B1\" d=\"M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(9909.1,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11409.3,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(12131.6,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container></span>，或者说是: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"51.627ex\" height=\"2.565ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 22819.2 1133.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(278,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1056,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2556.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3278.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5068.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5513.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6291.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8291.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(9013.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11353.9,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11854.1,0)\"><path data-c=\"222A\" d=\"M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12743.3,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(13021.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15021.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(15743.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(18084,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(18528.7,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20028.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(20751.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(22541.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span> 直观表示的话就是:</p>\n<p>[-340000000000000000000000000000000000000,\n-0.0000000000000000000000000000000000000118] ∪\n[0.0000000000000000000000000000000000000118,\n340000000000000000000000000000000000000]</p>\n<h2 id=\"前置概念\">2、前置概念</h2>\n<p>在详细介绍这个范围是怎么计算出来的之前,\n我们必须先了解一些概念.只有了解了这些概念,\n才能真正的理解浮点数的取值范围是如何计算出来的.</p>\n<p>而且此处假定你已经对IEEE754浮点数在内存中的存储方式有所了解,\n还不了解的话也可以参考本系列的第一篇文章.</p>\n<h2 id=\"概念1-normal-number规格数-subnormal-number非规格数\">概念1:\nnormal number(规格数) &amp; subnormal number(非规格数)</h2>\n<p>根据IEEE754的规定, 按照尾数位隐藏的整数部分是 <strong>1.</strong>\n还是<strong>0.</strong> 可以将浮点数划分为两类: <strong>normal\nnumber(规格数)</strong> 和 <strong>subnormal\nnumber(非规格数)</strong></p>\n<p>下面以32位浮点数为例来解释这些概念.</p>\n<p><strong>normal number(规格数)</strong></p>\n<p>就是尾数位隐藏的整数部分是<strong>1.</strong>的数, 这种数叫做normal\nnumber, 可以理解为\"正常的数\"</p>\n<p>一般来说, 我们遇到的都是normal number</p>\n<p>举例: 20.5在内存中表示为: 0 1000 0011 <strong>0100 1000 0000 0000\n000</strong></p>\n<p>其中尾数部分(即上面的加粗部分), 去掉后面补的零之后为: 01001</p>\n<p>但事实上, 真实的尾数部分应该是: <strong>1.</strong>01001,\n即前面省略了整数部分<strong>1.</strong></p>\n<p><strong>subnormal number(非规格数)</strong></p>\n<p>尾数位隐藏的整数部分为<strong>0.</strong>的数, 叫做subnormal number,\n也叫作denormal number, 可以理解为\"低于正常数的数\"</p>\n<p>引入subnormal number这个概念, 是为了在浮点数下溢时,\n可以逐位的损失精度, 以尽可能精确的表达0附近的极小数,\n之后的章节会具体讲解.</p>\n<p>为了表示subnormal number, IEEE754规定:\n<strong>如果将指数位全部填充为0, 则表示这个数是个subnormal\nnumber</strong></p>\n<p>举例: 以32位浮点数为例, 当你看到类似于 * <strong>00000000</strong>\n*********************** 这样内存状态的数时, (即指数位全部为0的数),\n就应该知道, 这是个subnormal number,\n此时这个数的尾数位隐藏的整数不是<strong>1.</strong>\n而是<strong>0.</strong></p>\n<h2 id=\"section\"></h2>\n<h2 id=\"概念2-non-number特殊数\">概念2: non-number(特殊数)</h2>\n<p>和subnormal number类似,\nIEEE754对于指数位全为1的状态也做了特殊规定:</p>\n<p><strong>当指数位全部被1填充, 即指数位表示的值为255时,\n用于表示这个浮点数处在一种非正常数(non-number)的状态:\n即这个数可能是±infinity或NaN.</strong></p>\n<p>注: Infinity和NaN是两个特殊数,\n分别表示<strong>无穷</strong>和<strong>Not a Number.</strong>\n我们后文还会详细讨论这两个特殊数</p>\n<blockquote>\n<p>The biased-exponent field is filled with all 1 bits to indicate\neither infinity or an invalid result of a computation.</p>\n</blockquote>\n<p>所以: 当你看到类似于 <strong>11111111</strong> 这样内存状态的数时,\n(即指数位全部为1的数), 就应该知道, 这是个non-number,\n它用于表示特殊数.</p>\n<h2 id=\"计算方法\">3、计算方法</h2>\n<p>在了解了上面两个概念之后, 再看计算方法就很简单了.</p>\n<p>如上所述, IEEE754规定, 当指数位全部为0或者全部为1时,\n用于表示两种特殊状态的数: subnormal number 和 non-number,\n所以现在可以得到如下示意图, 以32位单精度浮点数为例:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-ca78d279de4682dcd42f8ec28da27637_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这就是理解单精度浮点数取值范围的关键:\n<strong>当我们讨论浮点数的取值范围时, 实际上讨论的是:</strong>\n<strong>normal number (上图中绿色部分)的范围.</strong></p>\n<p>可以看出,\n32位浮点数的<strong>指数部分</strong>其实是无法取到-127和128的,\n因为:</p>\n<p>用于表示<strong>-127</strong>的<strong>0000\n0000</strong>被用来表示<strong>subnormal number</strong>了,</p>\n<p>而用于表示<strong>128</strong>的<strong>1111\n1111</strong>被用来表示<strong>non-number</strong>了.</p>\n<p><strong>所以实际上32位浮点数的指数部分只能取到只能取到[-126,\n127]</strong></p>\n<p>再来看看尾数: 对于normal number,\n尾数前隐藏的整数部分始终保持为<strong>1.</strong></p>\n<p>所以尾数(含隐藏的整数部分)所表示的值的范围其实是 [1.00...00,\n1.11...11],</p>\n<p>这个二进制数, 约等于十进制的[1, 2), 因为1.11..11非常逼近十进制的2</p>\n<p>好啦, 现在我们知道, 对于32位flaot而言:\n尾数(含隐藏的整数部分)的可取值为: [1 ,2), 指数位可取值[-126, 127],\n且浮点数可正可负, 根据运算规则, 就不难算出32位float的取值范围了: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -4.104ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"58.346ex\" height=\"9.339ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -2313.8 25789 4127.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\" transform=\"translate(0,1370.5)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(550,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(848,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1333,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1862,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2223,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">取</text></g><g data-mml-node=\"mi\" transform=\"translate(3223,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">值</text></g><g data-mml-node=\"mi\" transform=\"translate(4223,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">范</text></g><g data-mml-node=\"mi\" transform=\"translate(5223,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">围</text></g></g><g data-mml-node=\"mtd\" transform=\"translate(6223,0)\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mo\" transform=\"translate(277.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1333.6,0)\"><path data-c=\"B1\" d=\"M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2111.6,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">尾</text></g><g data-mml-node=\"mi\" transform=\"translate(3111.6,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g><g data-mml-node=\"mo\" transform=\"translate(4333.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(5056,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">指</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-122.8)\"><g data-mml-node=\"mtd\" transform=\"translate(6223,0)\"></g><g data-mml-node=\"mtd\" transform=\"translate(6223,0)\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mo\" transform=\"translate(277.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1333.6,0)\"><path data-c=\"B1\" d=\"M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2111.6,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2389.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2889.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3334.2,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3834.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4445.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(5167.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(278,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1778,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2056,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(1000,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3556,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-1563.8)\"><g data-mml-node=\"mtd\" transform=\"translate(6223,0)\"></g><g data-mml-node=\"mtd\" transform=\"translate(6223,0)\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mo\" transform=\"translate(277.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1333.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1722.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2500.6,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3222.8,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3945,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5588.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6033.3,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6811.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7533.5,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8255.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(10449.6,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10949.8,0)\"><path data-c=\"222A\" d=\"M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11839,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(12117,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12839.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(13561.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(15755.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(16199.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(16922.1,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(17644.3,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(19288,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></g></g></g></svg></mjx-container></span></p>\n<p>然后为了看着顺眼, 我们把上式的以2为底, 替换为以10为底:</p>\n<figure>\n<img src=\"https://pic3.zhimg.com/v2-cee80bc27473d527996851211ce1af1e_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>↑ 转换后小数位太长了, 所以这里写成了省略号的形式:\n3.402823669<strong>...</strong></p>\n<p>从上面这个集合中, 取一个更容易表示的子集,\n就是我们常见的32位float的取值范围了: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"51.627ex\" height=\"2.565ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 22819.2 1133.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(278,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1056,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2556.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3278.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5068.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5513.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6291.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8291.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(9013.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11353.9,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11854.1,0)\"><path data-c=\"222A\" d=\"M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12743.3,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(13021.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15021.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(15743.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(18084,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(18528.7,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20028.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(20751.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(22541.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span> ↑注意, 上面这个集合其实是32位float取值范围的子集,\n不过和真正的取值范围也没有差太多, 表示起来也更简洁, 没有冗长的小数位,\n还能写成闭区间的形式...所以在各种资料中,\n我们常看到的取值范围就是上面这个.</p>\n<p>之所以能写成闭区间的形式,\n就是因为它只是真正取值范围的一个<strong>子集.</strong> 这里特意说明一下,\n防止有的同学对这里的闭区间感到困惑.</p>\n<h2 id=\"补充\">4、补充</h2>\n<p>下面是 32位单精度浮点数的取值范围示意图,\n可以参照此图更好的理解一下前文内容</p>\n<p>下图中, x轴代表以2为底的n次幂(即内存中的指数部分),\ny轴代表尾数(含隐藏的整数部分1.)</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-c512ba53bcfbe3c5e4443eef30b9c90a_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>坐标系中任意一点(x, y)就代表一个浮点数,</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-17fbe3b0903f1beac711105f5b89ab8a_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这一点到x轴, y轴所围成的矩形的面积(即上图中橙色区域的面积),\n就是这个浮点数的值 (即浮点数的值 = 尾数(含隐藏的整数部分) *\n以2为底的n次幂)</p>\n<p>上图中:</p>\n<p>蓝色部分: 表示normal number的取值范围, 即, normal\nnumber类型的浮点数对应的坐标点只能出现在坐标系中的蓝色区域.</p>\n<p>坐标点: 一个坐标点对应一个浮点数</p>\n<p>橙色部分的面积: 表示该浮点数的值.</p>\n<p>这就是32位浮点数取值范围的计算方法.</p>\n<p>下一章将详细介绍为什么说32位浮点数的精度是\"7位有效数\",\n这个7是怎么计算出来的, 下一章也将会是整个系列中最有难度,\n最重要的一章.</p>\n<p>那下一章再见吧~</p>\n<h1 id=\"x03-为什么说32位浮点数的精度是7位有效数\">0x03\n为什么说32位浮点数的精度是\"7位有效数\"</h1>\n<p>️️本章包含一些自己的理解, 如有偏差还望指出.\n本章也是整个系列最重要的一章, 请耐心阅读。</p>\n<p>关于IEEE754标准中浮点数的精度是怎么计算的, 网上的资料众说纷纭,\n有些还彼此冲突,\n我也看的很头大……这里仅分享两种个人觉得比较靠谱的说法。</p>\n<h2 id=\"先说结论\">1、先说结论</h2>\n<p>打开IEEE754的维基百科，可以看到其中标注着,\n单精度浮点数的精度是\"Approximately 7 decimal digits\"</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-28e38af53fd59e0cfc058667e97bc4b0_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>有人把这句话翻译为 \"大约7位小数\" , 把\"decimal\"翻译成了\"小数\".</p>\n<p>但个人理解, 这里 \"decimal的\" 含义应该是 \"十进制的\" ,\n即32位浮点数的精度是 \"<strong>大约7位十进制数</strong>\" ,\n后文会说为什么这样理解.</p>\n<h2 id=\"在讨论之前\">2、在讨论之前…</h2>\n<p>我们先来思考这样一件事: 现在的计算机能存储[1,2]之间的所有小数吗?</p>\n<p>稍想一下就知道: 不可以. 因为计算机的内存或硬盘容量是有限的,\n而1到2之间小数的个数是无限的.</p>\n<p>极端一点, 计算机甚至无法存储1到2之间的某一个小数, 比如对于小数\n<strong>1.00000.....一万亿个零.....00001,</strong>\n恐怕很难用计算机去存储它...</p>\n<p>不过计算机却能存储[1, 10000]之间的所有整数.\n因为整数是\"<strong>离散</strong>\"的, [1, 10000]之间的整数只有10000个.\n10000种状态, 很容易就能存储到计算机中, 而且还能进行运算, 比如计算10000 +\n10000, 也只是要求你的计算机能存储20000种状态而已...</p>\n<p>这样来看的话: 计算机可以进行数学概念中的整数运算的,\n但却难以进行数学概念中的小数运算. 小数这种\"连续\"的东西,\n当前的计算机很难应对...</p>\n<p>事实上, 计算机为了进行小数运算,\n不得不将小数也当成\"<strong>离散</strong>\"的值, 一个一个的,\n就像整数那样:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-886f0c2a7559e2cd66ab4d4c917a7a95_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>↑ 数学中的整数是一个一个的, 想象绿色指针必须一次走一格</p>\n<p>↑ 数学中的小数是连续的, 想象绿色指针可以无极调节,\n想走到哪儿走到哪儿</p>\n<p>↑ 计算机中存储的小数是一个一个的, 绿色指针必须一次走一格,\n就像整数那样</p>\n<p>这就引发了精度的问题, 比如上图中, 我们无法在计算机中存储0.3,\n因为绿色指针只能一次走一格, 要么在0.234, 要么就到了0.468...</p>\n<p>当然, 我们也可以增加计算机存储小数的精度,\n或者说缩小点与点之间的间隔:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-5c9b6fa6744085c3f2d38aa9ce9eed08_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>IEEE754中的单精度浮点数和双精度浮点数大体也是如此:\n双精度浮点数中的蓝色小点更密集...</p>\n<h2 id=\"理解角度1-从间隔的角度理解\">3、理解角度1:\n从\"间隔\"的角度理解</h2>\n<h3 id=\"铺垫\">1. 铺垫</h3>\n<p>从\"间隔\"的角度理解来\"精度\", 其实是这样一种思路:</p>\n<p>想象一个类似于上图的圆形表盘, 表盘上有一些蓝点作为刻度,\n有一个绿色的指针用于指向蓝点, 绿色指针只能一次走一格:\n即只能从当前蓝点移动到下一个蓝点.\n<strong>不能指向两个蓝点之间的位置</strong>.</p>\n<p>假如表盘上用于表示刻度的<strong>蓝点</strong>如下所示:</p>\n<p>0.0000</p>\n<p>0.0012</p>\n<p>0.0024</p>\n<p>0.0036</p>\n<p>0.0048</p>\n<p>0.0060</p>\n<p>0.0072</p>\n<p>0.0084</p>\n<p>0.0096</p>\n<p>0.0108</p>\n<p>0.0120 (注意这里, 前一个数是108, 这个数是120, 先记住这一点)</p>\n<p>0.0132</p>\n<p>0.0144</p>\n<p>...</p>\n<p>即, 这是一组十进制数, 这组数以 <strong>0.0012</strong>\n的步长逐渐递增... 假设这个表盘就就是你的计算机所能表示的所有小数.</p>\n<p><img src=\"http://img.singhe.art/v2-551f39b009fbdc6fc65791dd8c3fa6ae_1440w.jpg\" alt=\"img\">表盘示意图</p>\n<p>问: 我们能说这个表盘, 或者说这组数的精度达到了 <strong>4</strong>\n位十进制数吗(比如, 可以精确到1位整数 + 3位小数)?</p>\n<p>分析: 如果说可以精确点1位整数 + 3位小数,\n那我们就应该可以说出下面这样的话:</p>\n<p>我们可以说, 当前指针正位于0.001x: 而指针确实可以位于0.0012,\n属于0.001x (x表示这一位是任意数, 或说这对该位的精度不做限制)</p>\n<p>我们可以说, 当前指针位于0.002x: 而指针确实可以位于0.0024,\n属于0.002x</p>\n<p>我们可以说, 当前指针位于0.003x: 而指针确实可以位于0.0036,\n属于0.003x</p>\n<p>...</p>\n<p>我们可以说, 当前指针位于0.009x: 而指针确实可以位于0.0096,\n属于0.009x</p>\n<p>我们可以说, 当前指针位于0.010x: 而指针确实可以位于0.0108,\n属于0.010x</p>\n<p>我们可以说: 当前指针位于0.011x...<strong>但, 注意,\n指针始终无法指向0.011x</strong>...在我们的表盘中, 指针可以指向0.0108,\n或指向0.0120, 但始终无法指向0.011x</p>\n<p>...</p>\n<p><strong>这就意味着: 对于当前表盘 (或者说对于这组数) 来说,\n4位精度太高了...4位精度所能描述的状态中,\n有一些是无法用这个表盘表示的.</strong></p>\n<p>那, 把精度降低一些.</p>\n<p>我们能说这个表盘, 或者说这组数的精度达到了 <strong>3</strong>\n位十进制数吗(比如, 可以精确到1位整数 + 2位小数)?</p>\n<p>再来分析一下: 如果说可以精确点1位整数 + 2位小数,\n那我们就应该可以说出下面这样的话:</p>\n<p>我们可以说, 当前指针位于0.00xx: 而指针确实可以位于0.0012, 0.0024,\n0.0036...0.0098, 这些都属于0.00xx</p>\n<p>我们可以说, 当前指针位于0.01xx: 而指针确实可以位于0.0108,\n0.0120...这些都属于0.01xx</p>\n<p>...</p>\n<p><strong>可以看出, 对于当前这个表盘 (或者说对于这组数) 来说,\n它完全能\"hold住\"3位精度.\n或者说3位精度所能描述的所有状态在该表盘中都可以得到表示.</strong></p>\n<p>如果我们的机器使用这个表盘作为浮点数的取值表盘的话,\n那我们就可以说:</p>\n<p>我们机器的浮点数精度 (或者说这个表盘的浮点数精度),\n能精确到3位十进制数(无法精确到4位十进制数).</p>\n<p>而这个精度, 本质上是由<strong>表盘间隔</strong>决定的,\n本例中的表盘间隔是<strong>0.0012,</strong>\n如果把表盘间隔缩小到<strong>0.00000012</strong>,\n那相应的表盘能表示的精度就会提升(能提升到 <strong>7</strong> 位十进制数,\n无法达到 <strong>8</strong> 位十进制数)</p>\n<p>通过这个例子, 希望大家能够直观的认识到 \"表盘的<strong>间隔</strong>\"\n和 \"表盘的<strong>精度</strong>\" 之间, 存在着密切的关系.\n这将是后文进行讨论的基础.</p>\n<p>事实上: ieee754标准中的32位浮点数, 也可以被想象为一个\n\"<strong>蓝点十分密集的浮点数表盘</strong>\",\n如果我们能分析出这个表盘中蓝点之间的间隔,\n那我们就能分析出这个表盘的精度.</p>\n<p>注: 也可以用一句很简单的话来解释本小节的例子:\n假设浮点数表盘能提供4位精度控制, 比如能控制到1位整数+3位小数,\n这就要求它必须能控制到 0.001 这个粒度, 而 0.001\n这个值小于该表盘的实际间隔 0.0012... 所以该表盘不能提供4位精度...</p>\n<h3 id=\"位浮点数的间隔\">2. 32位浮点数的间隔</h3>\n<p>那怎么分析32位浮点数的间隔与精度呢, 有一个很笨的方法:\n<strong>把32位浮点数能表示的所有小数都罗列出来, 计算间隔.\n然后分析精度</strong>...</p>\n<p>呃...我也确实准备用这个比较笨的方法...下面就开始吧...</p>\n<p>注: 此处只分析<strong>规格数(normal number)</strong>,\n且先不考虑负数情况, 也就是说不考虑符号位为 <strong>1</strong> 的情况</p>\n<p>32位浮点数能表示的最小<strong>规格数</strong>是 :</p>\n<p>0 00000001 0000000000000000000000<strong>0</strong> (二进制)</p>\n<p>(注意, 规格数的<strong>指数位</strong>最小为 00000001 ,\n不能为00000000. 这个在本系列的第二章中已经讨论过了, 以下不再赘述)</p>\n<p>紧邻的下一个数是:</p>\n<p>0 00000001 0000000000000000000000<strong>1</strong> (二进制)</p>\n<p>紧邻的下一个数是:</p>\n<p>0 00000001 000000000000000000000<strong>10</strong> (二进制)</p>\n<p>紧邻的下一个数是:</p>\n<p>0 00000001 000000000000000000000<strong>11</strong>(二进制)</p>\n<p>...</p>\n<p>这样一步一步的往下走，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.816ex\" height=\"2.072ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 3012.6 915.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(1512.3,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2512.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></span>步之后, 我们将指向这个数:</p>\n<p>0 00000001 <strong>11111111111111111111111</strong>(二进制)</p>\n<p>再走一步, 也就是2^23步之后, 我们将指向这个数:</p>\n<p>0 000000<strong>10</strong> 00000000000000000000000(二进制)</p>\n<p>总结一下: 2^23次移动之后:</p>\n<p>我们从起点: 0 000000<strong>01</strong> 00000000000000000000000,</p>\n<p>移动到了终点: 0 000000<strong>10</strong> 00000000000000000000000</p>\n<p>现在可以求间隔了, <strong>间隔 = 差值 / 移动次数 = (终点对应的值 -\n起点对应的值) / 2^23</strong>,</p>\n<p>但是, 先别急着计算. 我们先仔细观察一下, 可以发现, 和起点相比,\n终点的符号位和尾数位都没变, 仅仅是<strong>指数位</strong>变了:\n起点指数位000000<strong>01</strong> →\n终点指数位000000<strong>10,</strong> 终点的指数位,\n比起点的指数位<strong>变大了1</strong></p>\n<p>而ieee754中浮点数的求值公式是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.18ex\" height=\"2.474ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -893.3 4941.7 1093.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">尾</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g><g data-mml-node=\"mo\" transform=\"translate(2222.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2944.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">指</text></g><g data-mml-node=\"mi\" transform=\"translate(1000,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">数</text></g></g></g></g></g></svg></mjx-container></span>(先不考虑符号位)</p>\n<p>这样的话: <strong>假如说</strong>起点对应的值是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.392ex\" height=\"1.937ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 3709.1 855.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g></g></g></g></svg></mjx-container></span>，那终点对应的值就应该是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.392ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841 3709.1 863\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g></g></g></g></svg></mjx-container></span>。即,\n仅仅是指数位<strong>变大了1</strong></p>\n<p>把指数展开会看的更清晰一些:</p>\n<p>假如说起点对应的值是 0.0000 0001 (8位小数)</p>\n<p>那终点对应的值就应该是 0.0000 001 (7位小数)</p>\n<p>那起点和终点的<strong>差值</strong>就是: <strong>(0.0000 001 - 0.0000\n0001)</strong>, 是一个非常小的数</p>\n<p>那间隔就是: <strong>差值 / 2^23</strong></p>\n<p><strong>注意: 其实上面我们并没有计算出真正的间隔,\n只是假设了起点和终点的值分别是</strong><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.392ex\" height=\"1.937ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 3709.1 855.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g></g></g></g></svg></mjx-container></span>和<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.392ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841 3709.1 863\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g></g></g></g></svg></mjx-container></span></p>\n<p><strong>然后算出了一个假设的间隔. 但这个假设格外重要,\n下文我们会继续沿用这个假设进行分析 ️</strong></p>\n<p>废话不多说, 现在我们继续前进.</p>\n<p>现在起点变成了: 0 000000<strong>10</strong>\n00000000000000000000000</p>\n<p>再走<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.919ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 1290.1 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container></span>步, 来到了: 0\n000000<strong>11</strong> 00000000000000000000000</p>\n<p>同样: 符号位, 尾数位都没有变, 指数位又变大了1</p>\n<p>沿用上面的假设, 此时起点对应的值是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.392ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841 3709.1 863\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path></g></g></g></g></g></svg></mjx-container></span>, 则终点对应的值应该是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.392ex\" height=\"1.937ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 3709.1 855.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\"></path></g></g></g></g></g></svg></mjx-container></span>, 即, 还是指数位<strong>变大了1</strong></p>\n<p>再次计算差值: <strong>0.0000 01(6位小数) - 0.0000\n001(7位小数)</strong></p>\n<p>再次计算间隔: 等于 差值 / 2^23(移动次数)</p>\n<p>不知道同学们有没有体会到不对劲的地方, 没有的话, 我们计算往前走:</p>\n<p>现在起点变成了: 0 000000<strong>11</strong>\n00000000000000000000000</p>\n<p>再走2^23步, 来到了: 0 00000<strong>100</strong>\n00000000000000000000000</p>\n<p>同理, 终点相对起点, 还只是指数位<strong>变大了1</strong></p>\n<p>再次计算差值: (0.00001(<strong>5</strong>位小数) -\n0.000001(<strong>6</strong>位小数))...</p>\n<p>再次计算间隔: 等于 差值 / 2^23(移动次数)</p>\n<p>感受到不对劲了吗? 继续往前走...</p>\n<p>现在起点变成了: 0 00000<strong>100</strong>\n00000000000000000000000</p>\n<p>再走2^23步, 来到了: 0 00000<strong>101</strong>\n00000000000000000000000</p>\n<p>再次计算差值: (0.0001(<strong>4</strong>位小数) -\n0.00001(<strong>5</strong>位小数))...</p>\n<p>再次计算间隔: 等于 差值 / 2^23(移动次数)</p>\n<p>...一路走到这儿, 感受到不对劲了吗?</p>\n<p>不对劲的地方在于: 终点和起点的<strong>差值! 差值在越变越大!\n同理间隔也在越变越大!</strong></p>\n<p>不信的话我们来罗列一下之前的差值:</p>\n<blockquote>\n<p>... 那差值就是: 0.0000 001 ( <strong>7</strong>位小数) - 0.0000 0001(\n<strong>8</strong>位小数), 差值等于0.0000 0009 ... 那差值就是: (0.000001\n( <strong>6</strong>位小数) - 0.0000001( <strong>7</strong>位小数)),\n差值等于0.0000 009 ... 那差值就是: (0.00001 ( <strong>5</strong>位小数)\n- 0.000001( <strong>6</strong>位小数)), 等于 0.0000 09 ... 那差值就是:\n(0.0001 ( <strong>4</strong>位小数) - 0.00001(\n<strong>5</strong>位小数)), 等于 0.0000 9</p>\n</blockquote>\n<p>差值的小数点在不断向右移动, 这样走下次, 总有一天, 差值会变成9,\n变成90, 变成90000...</p>\n<p>而 移动次数始终 = 2^23, 间隔始终 = 差值/2^23....差值在越变越大,\n间隔也会跟着越变越大...</p>\n<p><strong>到这里, 你发现了ieee754标准的一个重要特性:\n如果把ieee754所表示的浮点数想象成一个表盘的话,\n那表盘上的蓝点不是均匀分布的, 而是越来间隔越大, 越来越稀疏:</strong></p>\n<p>大概就像这样:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-d46932f28c9c5078cf22993d5985cb16_1440w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>你可以直接在c语言中验证这一特性:</p>\n<p><img src=\"http://img.singhe.art/v2-e633378a7fe288ebc8de399ef51e71db_b.jpg\" alt=\"img\"> <img src=\"https://pic4.zhimg.com/80/v2-e633378a7fe288ebc8de399ef51e71db_1440w.jpg\" alt=\"img\"></p>\n<p>与16777216紧邻的蓝点是16777218, 两数差值为2,\n32位浮点数无法表示出16777217</p>\n<h3 id=\"位浮点数的间隔表\">3. 32位浮点数的间隔表</h3>\n<p>开头我们说过: 知道了表盘的间隔, 就能计算表盘的精度了.</p>\n<p>复杂的地方在于, ieee754这个表盘, 间隔不是固定的, 而是越来越大.</p>\n<p>幸运的地方在于, wiki已经帮我们总结好了间隔数据:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-ff4142478d0babb787e66abd2f15a870_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>对于这张表的数据, 我们只关注右侧的三列即可, 它是在告诉我们:\n<strong>[最小值, 最大值]范围间的间隔是多少</strong></p>\n<p>比如: 下面这一行告诉我们, <strong>8388608 ~ 16777215这个范围之间的数,\n间隔是1</strong></p>\n<figure>\n<img src=\"http://img.singhe.art/v2-c750858874d3b08aff9fa743aa027e43_1440w.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>所以32位浮点数可以存储838860<strong>8</strong>,\n也可以存储838860<strong>9</strong>,\n但无法存储838860<strong>8.5</strong>, 因为间隔是1</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-b42817e1909428e1d8086b1b72313670_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>而第二行在说: <strong>1 ~ 1.999999880791这个范围之间的数, 间隔是:\n1.19209e-7</strong></p>\n<figure>\n<img src=\"http://img.singhe.art/v2-de9640af04df62b0befde28b35159a0f_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>去翻一下c语言float.h的源码, 会发现这样一句:</p>\n<blockquote>\n<p>#define FLT_EPSILON 1.192092896e-07F // smallest such that\n1.0+FLT_EPSILON != 1.0</p>\n</blockquote>\n<p>↑ 定义常量<strong>FLT_EPSILON,</strong>\n其值为<strong>1.192092896e-07F</strong></p>\n<p>这个 <strong>1.192092896e-07F</strong> ,\n其实就是我们表格中看到的<strong>间隔</strong>:\n<strong>1.19209e-7</strong></p>\n<p>源码中说: 32位浮点数<strong>1.0,</strong>\n最少也要加上<strong>FLT_EPSILON</strong>这个常量,\n才能<strong>不等于1.0</strong>.</p>\n<p>换句话说, 如果 <strong>1.0</strong> 加上一个<strong>小于 FLT_EPSILON\n的数 N</strong>, 就会出现<strong>1.0 + N == 1.0</strong>\n这种\"诡异的情况\".</p>\n<p>因为对于 <strong>1 ~ 1.999999880791</strong> 这个范围中的32位浮点数,\n至少要加上 <strong>FLT_EPSILON</strong>,\n或者说至少要加上该范围对应的<strong>间隔</strong>,\n<strong>才能够把指针从当前蓝点, 移动到紧邻的下一个蓝点</strong></p>\n<p>注意: 如果不是<strong>1 ~ 1.999999880791</strong>之间的数,\n则不一定要加上 <strong>1.19209e-7</strong> 啊. 准确来说应该是:\n<strong>某个区间中的数, 至少要加上该区间对应的间隔,\n才能从当前蓝点移动到下一个蓝点.</strong></p>\n<p>仔细看一看一下上面那张间隔表,\n相对你对c语言的浮点数运算会更胸有成竹.</p>\n<p><strong>注意: 其实上面的解释中, 存在着一个不大不小的问题.\n不过这里先搁置不谈, 等我们理解的更深刻一些时,\n再拐回来重新探讨这个问题.</strong></p>\n<blockquote>\n<p>注: 64位浮点数的 <strong>间隔表,</strong> 也可以参见 <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/IEEE_754-1985\">IEEE754\nWIKI</a></p>\n</blockquote>\n<h3 id=\"位浮点数的精度\">4. 32位浮点数的精度</h3>\n<p>那, 为什么说32位浮点数的精度是7位十进制数呢?</p>\n<p>首先要说明的是: 32位浮点数的精度是: Approximately 7 decimal digits,\n是<strong>大约</strong>7位十进制数</p>\n<p>事实上, 对于有些8位十进制数, 32位浮点数容器也能对其精确保存, 比如,\n下面两个数都能精确保存</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-1001fc148449295755e8c0de89993223_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>那所谓的精度是7位十进制数到底是什么意思呢? 探讨这个之前,\n我们需要先了解一些更本质的东西</p>\n<h4 id=\"i.-浮点数只能存储蓝点位置对应的值\">I.\n浮点数只能存储蓝点位置对应的值</h4>\n<p>正如前文所说, 32位浮点数会形成一个表盘, 表盘上的蓝点逐渐稀疏.\n绿色指针只能指向某个蓝点, 不能指向两个蓝点之间的位置. 或者换句话说:\n<strong>32位浮点数只能保存蓝点对应的值</strong>.</p>\n<p><strong>如果你要保存的值不是蓝点对应的值,\n就会被自动舍入到离该数最近的蓝点对应的值</strong>. 举例:</p>\n<p>在0.5 ~ 1这个范围内, 间隔<strong>约为</strong>5.96046e-8,\n即<strong>约为</strong> 0.00000005.96046</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-35faa10130c724ab52b88fcf5d006020_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>也就是说: 表盘上有一个蓝点是0.5</p>\n<p>下一个蓝点应该是: 当前蓝点 + 间隔 ≈ 0.5 + 0.00000005.96046 ≈\n<strong>0.5000000596046</strong></p>\n<p>那, 如果我们要保存 <strong>0.50000006,</strong>\n也就是我们要保存的这个值, 稍大于下一个蓝点:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-6a03627668b34c78ff9452fe6df42ccb_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>因为绿色指针必须指向蓝点, 不能指向蓝点之间的位置,\n所以绿色指针会被\"校准\"到<strong>0.5000000596046</strong>,\n或者说我们要保存的<strong>0.50000006,</strong>\n会被<strong>舍入</strong>为<strong>0.5000000596046</strong></p>\n<p>实测一下:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-c56b98dcf7016344bba9c939f994490b_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>事实上, 每个32位浮点数容器中, 存储的必然是一个蓝点值</p>\n<p>验证一下, 首先求出从0.5开始的蓝点值:</p>\n<p>第一个蓝点: 0.5</p>\n<p>第二个蓝点: ≈ 0.5 + 0.0000000596046 ≈\n0.5000000<strong>596046</strong></p>\n<p>第三个蓝点: 第二个蓝点 + 0.0000000596046 ≈\n0.000000<strong>1192092</strong></p>\n<p>第四个蓝点: 第三个蓝点 + 0.0000000596046 ≈\n0.000000<strong>1788138</strong></p>\n<p><strong>然后看下面的代码, 发现变量中实际存储的,\n其实都是蓝点值:</strong></p>\n<figure>\n<img src=\"http://img.singhe.art/v2-0fd086c84aed5f6dd1ad158af62750d2_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>看打印出来的东西, 可以发现实际存储的都是蓝点值</p>\n<p>这是我们需要<strong>着重理解</strong>的东西</p>\n<p>说句题外话, 其实学到现在, 我们就能大体解释一个经典编程问题了:\n\"<strong>为什么32位浮点数中的 0.99999999 会被存储为1.0呢</strong>\", 因为\n0.99999999 不是一个蓝点值, 且离他最近的蓝点值是1.0,\n然后绿色指针被自动\"校准\"到了离他最近的蓝点1.0.</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-e5d6a69f8f2cf4ea84b05c3d73df7d60_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h4 id=\"ii.-理解32位浮点数的精度是7位十进制数\">II.\n理解32位浮点数的精度是7位十进制数</h4>\n<p>对此我是这样理解的:</p>\n<p><strong>例1:</strong></p>\n<p>查表, 发现 1024 ~ 2048 范围中的 间隔 约为 0.000122070</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-a93c54f7ae9176ca6be8b8c443dfecc2_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>如下图: 想要精确存储到小数点后4位, 却发现做不到,\n其实只能精确存储到小数点后3位:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-97cab15463c7a33729a2309c9b27f025_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>试图精确存储到小数点后4位, 却发现实际上无法存储1024.0005,\n因为表盘上没有这个1024.0005xxxxxxxx这个级别的数</p>\n<p>在这个1024 ~2048这个范围内, 能精确保存的数是 <strong>4位十进制整数 +\n3位十进制小数 = 7位十进制数</strong></p>\n<p><strong>例2:</strong></p>\n<p>查表, 发现 8388608 ~ 16777215 范围中的 间隔 为 1</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-10b9f6ef9edeab45f164357bcdf9e6be_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>如下图: 想要精确存储到小数点后一位, 却发现做不到,\n其实只能精确存储到小数点后零位,\n或者说只能精确存储到个位数(因为最小间隔为1):</p>\n<figure>\n<img src=\"https://pic2.zhimg.com/v2-22c518f5c6707f60d40d1645cbb02ccd_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>小数点后一位无法精确存储, 只能精确存储到个位</p>\n<p>在这个8388608 ~ 16777215 这个范围内, 能精确保存的数是\n7<strong>或8位十进制整数 + 0位十进制小数 = 7或8位十进制数</strong></p>\n<p>是的, 32位浮点数也能精确保存小于等于 16777215 的 8 位十进制数,\n所以说其精度<strong>大约</strong>是7位十进制数</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-d3da9fb01ed315ba5579fbbcf4c58845_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>例3:</strong></p>\n<p>查表, 发现 1 ~ 2 范围中的间隔为 1.19209e-7</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-82032ef5ec4b8c2eb165bf191cdc9af1_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>如下图: 想要精确存储到小数点后7位, 却发现做不到,\n其实只能精确存储到小数点后6位:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-86b6624556208897f554d4d890c19309_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>想精确存储到小数点后7位, 却发现实际上无法存储1.0000012,\n表盘上没有这个1.0000012xxxx 这个级别的数</p>\n<p>在这个1 ~ 2这个范围内, 能精确保存的数是 <strong>1位十进制整数 +\n6位十进制小数 = 7位十进制数</strong></p>\n<p>所谓的32位浮点数的精度是7位十进制数, 大概就是这样算出来的. 基本上\n<strong>整数位 + 小数位 最多只能有7位</strong>, 再多加无法确保精度了\n(注意这不是wiki给出的计算方法, wiki给出的算法见下文)</p>\n<p>如果你不喜欢这种理解方式, 不妨退一步, 仅记住如下三点即可:</p>\n<p><strong>1. 32位浮点数其实只能存储对应表盘上的蓝点值</strong></p>\n<p>而不能存储蓝点与蓝点之间的值</p>\n<p><strong>2. 蓝点不是均匀分布的, 而是越来越稀疏.\n或者说蓝点与蓝点之间的间隔越来越大, 或者说精度越来越低.</strong></p>\n<p>这也是为什么到1.xxxxxxx时还能精确到小数点后6位, 到<a href=\"https://link.zhihu.com/?target=http%3A//1024.xxx\">http://1024.xxx</a>时只能精确到小数点后3位,\n到8388608 时只能精确到个位数的原因. 因为蓝点越来越稀疏了,\n再往后连个位数都精确不到了...</p>\n<h3 id=\"注意事项\">5. 注意事项</h3>\n<h4 id=\"i.-区分32位浮点数的存储精度-打印效果\">I.\n区分32位浮点数的存储精度 &amp; 打印效果</h4>\n<p>在c语言中, 使用 <strong>%f</strong> 打印时, 默认打印\n<strong>6</strong> 位小数</p>\n<p>32位浮点数的有效位数是 <strong>7</strong> 位有效数</p>\n<p>这两者并不冲突, 比如:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-2be1c0c53e9a078628bc9291c6ab84b9_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>原始值 <strong>1234.878</strong> 89</p>\n<p>打印效果 <strong>1234.878</strong> 906</p>\n<p>可见打印效果中只有 前7位 和 原始值 是一致的</p>\n<p><strong>事实上, \"原始值\" vs \"打印出来的值\" , 其实就是\n\"你想要存储的值\" vs \"实际存储的值\"</strong></p>\n<p>你想要存储1234.878 89, 但实际存储的是1234.878 906... 因为1234.878\n906...才是个\"蓝点值\", 才能真正的被绿色指针所指向,\n才能真正的被32位浮点数容器所存储.</p>\n<p>虽然不能精确存储你想要保存的值,\n但32位浮点数能保证精确存储你想要保存的值的前 7 位.\n所以打印效果中的前7位和 原始值 是一致的.</p>\n<p>%f 默认打印到6位小数, 打印出来的是实际存储的蓝点值. 但,\n蓝点值可不一定是7位小数, 可能有十几位小数, 只是 %f\n会默默的将其舍入为7位小数并打印出来</p>\n<h4 id=\"ii.-有时候精度不是7位\">II. 有时候精度不是7位</h4>\n<p>可能的原因有很多, 比如:</p>\n<p><strong>1. 打印时, %f发生了舍入:</strong></p>\n<p>此时可以设置打印更多的小数位</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-5ba17438fc3c91b161b94d80f389a6c6_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>2. 好像精确度不止7位</strong></p>\n<p>注意, 浮点数中能存储的都其实是蓝点值</p>\n<p>所以, 如果 <strong>你要存储的值</strong> 和 <strong>蓝点值</strong>\n完全一样, 那你要存储的值就能够被完全精确的存储下来的.</p>\n<p>如果 <strong>你要存储的值</strong> 和 <strong>蓝点值</strong>\n非常非常靠近, 就会体现出超乎寻常的精度. 详见下例:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-880e68609e9d170c3371638bad4ef2da_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>3. 好像精确度不到7位</strong></p>\n<p>举例:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-6b4867f95f0ad85fe515b1ed8a6514c8_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>对此, 个人理解是:</p>\n<p>对于 1024 ~ 2048之间的数, 32位浮点数确实有能力精确到7位有效数</p>\n<p>当你要存储的值不是一个蓝点值时, 会发生舍入,\n自动舍入到离它最近的一个蓝点值</p>\n<p>所以, 1024.<strong>001</strong>,\n会舍入到离它最近的蓝点1024.<strong>000</strong>976...,\n体现的好像精度不足7位</p>\n<p>而1024.<strong>001</strong>1,\n就会舍入到离它最近的蓝点1024.<strong>001</strong>09...,\n体现的好像精度又足7位了...</p>\n<p>只是说: 32位浮点数确实有精确到7位有效数的能力,\n但舍入规则使得它有时好像无法精确到7位...</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-fc1abbf264a2307ba9995e110be0470c_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>从这个角度去理解的话, 前面我们讨论过的一个话题就有点站不住脚了:</p>\n<p>前面我们说过: :</p>\n<blockquote>\n<p>c语言的float.h中有这样一行代码: #define FLT_EPSILON 1.192092896e-07F\n// smallest such that 1.0+FLT_EPSILON != 1.0 ↑ 定义常量\n<strong>FLT_EPSILON,</strong> 其值为 <strong>1.192092896e-07F</strong>\n这个 <strong>1.192092896e-07F</strong> , 其实就是我们1 ~ 2范围中的\n<strong>间隔</strong>: <strong>1.19209e-7</strong> 源码中说: 32位浮点数\n<strong>1.0,</strong> 最少也要加上 <strong>FLT_EPSILON</strong>这个常量,\n才能 <strong>不等于1.0</strong> 换句话说, 如果 <strong>1.0</strong>\n加上一个 <strong>小于 FLT_EPSILON 的数 N</strong>, 就会出现 <strong>1.0\n+ N == 1.0</strong> 这种\"诡异的情况\".</p>\n</blockquote>\n<p>等等, 这里好像忽略掉了<strong>舍入规则:</strong> 1 ~ 2范围中,\n两个蓝点之间的<strong>间隔是</strong>: <strong>1.19209e-7,</strong>\n但这并不意味着想从当前蓝点走到下一个蓝点需要<strong>走满一个间隔</strong>啊,\n因为有舍入规则的存在, 其实你只要<strong>走大半个间隔</strong>就行了,\n然后舍入规则会自动把你舍入到下一个蓝点...</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-cdf397f6ce1643911cb30542aa4da304_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>在c语言中验证一下:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-e74adea468be4d42f5f3036d349c71b8_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>可见, 因为有舍入机制的存在, 一个蓝点想移动到下一个蓝点:\n<strong>大体上</strong>只需移动<strong>间隔的一半多一点</strong>即可.</p>\n<p>而c语言中的这行注释:</p>\n<p>#define FLT_EPSILON 1.192092896e-07F // smallest such that\n1.0+FLT_EPSILON != 1.0</p>\n<p>其实也不太对, <strong>1.0</strong> 也不需要加上\n<strong>FLT_EPSILON</strong> 这一整个间隔才能 <strong>!= 1.0</strong>\n(或者说才能到下一个蓝点), 大体上只需加上\n<strong>FLT_EPSILON的一半多一点</strong> 就能 <strong>!=1.0</strong>\n了(或者说就能到下一个蓝点了).</p>\n<figure>\n<img src=\"https://pic2.zhimg.com/v2-eef07c88b11904aa95cdca6c8aad72f5_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>不过这也只是个人理解...</p>\n<h4 id=\"iii.-0.xxxxxxx-到底能精确到小数点后几位\">III. 0.xxxxxxx\n到底能精确到小数点后几位</h4>\n<p>或者说, 32位浮点数能记录7位有效数, 那对于 <strong>0.xxxxxxx</strong>\n这种格式的数, 到底是能精确到小数点后7位, 还是小数点后6位. 或者说,\n此时整数部分的0算不算有效数...</p>\n<p>个人理解, 对于0.xxxxxxx这也的小数, 其实能精确到小数点后7位,\n即0不算一位有效数</p>\n<p>以0.5 ~ 1这个范围为例, 此时的间隔是间隔是5.96046e-8, 约等于0.0000\n0006</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-aee8d226a36d8aa7f4804202d36ff990_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>下面尝试精确到小数点后8位, 发现不行.</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-eb425517dc2c4bad11b13023bd29b30c_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>但精确到小数点后7位确是绰绰有余:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-f718dd6222af30caf2fb43b100f637fb_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>而0 ~ 0.5之间, 间隔则会更小, 精度则会更高\n(因为浮点数表盘上的蓝点是越来越稀疏, 精度越来越差的. 如果靠后的0.5 ~\n1范围中能精确到小数点后7位, 那更靠前的0 ~ 0.5中只会更精确,\n或者说蓝点只会更密集, 间隔只会更小)</p>\n<p>举例:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-caadec9b9944abf5d4fcdffba6af7538_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>总之还是那就话: <strong>大体来说</strong>,\n32位浮点数的精度是7位有效数.</p>\n<p>事实上, 浮点数中只能存储蓝点, 蓝点越靠近0就越密集, 精度就越高.\n←7位有效数是对这一现象的总结和概括性描述</p>\n<p>最后说一点: 有些同学可能会错误的认为32位浮点数类型的精度是:\n始终能精确到小数点后6位, 比如能精确存储999999.123456,\n但不能精确存储999999.1234567</p>\n<p>相信读到这里, 大家都能找出这种理解的错误之处了:\n32位浮点数的精确度是7位有效数, 大体来说, 这7位有效数, 指的是\n<strong>整数 + 小数一共7位</strong>,\n而不是说始终能精确到小数点后六位...</p>\n<h4 id=\"iv.-深入理解间隔表\">IV. 深入理解间隔表</h4>\n<p>我们再回头看看这张wiki上的间隔表. 其实它主要就是在告诉我们:\n某个范围中, 两个蓝点间的间隔是多少.</p>\n<p>比如在1 ~ 2范围中, 两个蓝点间的间隔约是1.19209e-7</p>\n<p>在 8388608 ~ 16777215范围中, 两个蓝点间的间隔是1</p>\n<figure>\n<img src=\"https://pic1.zhimg.com/v2-ff4142478d0babb787e66abd2f15a870_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这里其实有几个注意事项:</p>\n<p><strong>1. 每个范围中, 都有2^32个蓝点,\n或者每个区间都被等分为2^23个间隔</strong></p>\n<p>比如范围1~2会被等分为2^23个间隔, 范围 8388608 ~ 16777215\n也会被等分为2^23个间隔</p>\n<p><strong>2. 范围的划分由指数决定</strong></p>\n<p>所谓的范围<strong>1~2</strong>会被等分为2^23个间隔,\n准确来说应该是范围<strong>2^0 ~ 2^1</strong>会被等分为2^23个间隔</p>\n<p>所谓的范围<strong>8388608 ~ 16777215</strong>会被等分为2^23个间隔,\n准确来说应该是范围<strong>2^23 ~ 2^24</strong>会被等分为2^23个间隔</p>\n<p>每次指数位变更, 都会划分出新的范围. 这其实很好理解:</p>\n<p>比如, 现在我们位于起点: 0 000000<strong>10</strong>\n00000000000000000000000</p>\n<p>往前移动2^23 - 1步, 或者说往前移动2^23 - 1个间隔,\n对应的其实就是把尾数从00000000000000000000000,\n一步步变成11111111111111111111111</p>\n<p>再往前走一步, 也就是共往前移动了2^23个间隔, 我们来到了终点: 0\n000000<strong>11</strong> 00000000000000000000000</p>\n<p>可见终点相对起点, 仅指数位增长了<strong>1</strong></p>\n<p>终点到起点, 就确定了一段<strong>范围</strong>.\n该范围被等分成了2^23个间隔. (终点 - 起点) / 2^23就是每个间隔的长度.</p>\n<p>再往前走2^23个间隔, 就来到了0 00000<strong>100</strong>\n00000000000000000000000, 同样是指数变大了1...</p>\n<p>这就不难看出: <strong>指数位的变更用于划分范围,\n尾数位的变更用于往前一步步移动.</strong></p>\n<p>有多少个尾数位, 决定了每个范围中可以划分出多少个间隔,\n比如有23个尾数位, 就意味着每个范围中可以划分出2^23个间隔</p>\n<p>有多少指数位, 决定我们可以囊括多少的范围. 比如有8个指数位\n(可表示的指数范围是[-127, 128]), 那我们的范围划分就是这样的:</p>\n<p>2^-127 ~ 2^-126是一个范围</p>\n<p>2^-126 ~ 2^-125是一个范围</p>\n<p>...</p>\n<p>2^0 ~ 2^1 是一个范围</p>\n<p>2^1 ~ 2^2 是一个范围</p>\n<p>...</p>\n<p>2^127 ~ 2^128 是一个范围</p>\n<p>上面每个范围都会被尾数位等分为2^23份间隔</p>\n<p><strong>增大指数位不会增大精度</strong>: 比如,\n如果将指数位增大到16位(可表示的指数范围是[-32767, 32768]),\n那我们的范围划分是这样的</p>\n<p>2^-32767 ~ 2^-32766是一个范围</p>\n<p>2^-32766 ~ 2^-32765是一个范围</p>\n<p>...</p>\n<p>2^-127 ~ 2^-126是一个范围</p>\n<p>2^-126 ~ 2^-125是一个范围</p>\n<p>...</p>\n<p>2^0 ~ 2^1 是一个范围</p>\n<p>2^1 ~ 2^2 是一个范围</p>\n<p>...</p>\n<p>2^32767 ~ 2^32768是一个范围</p>\n<p>上面每个范围依旧会被尾数位等分为2^23份间隔</p>\n<p>注意: 2^0 ~ 2^1, 这个范围还是被等分为2^23份间隔, 2^-126 ~ 2^-125,\n这个范围还是被等分为2^23份间隔...</p>\n<p>每个范围的精度都没有任何提升.</p>\n<p><strong>增大尾数位才会增大精度:</strong> 比如, 将尾数位增大为48.\n则每个范围会被等分为2^48份间隔. 这样每个范围中的间隔才会变小,\n蓝点才会变密集, 精度才会提升.</p>\n<p>总结: 指数位的多少控制着能囊括多少个范围,\n尾数位的多少控制着每个范围的精度, 或者说控制着每个范围中间隔的大小,\n蓝点的密度.</p>\n<p>希望这能让你对ieee754标准中的指数位, 尾数位的 具体作用, 控制什么\n有更好的理解.</p>\n<h2 id=\"理解角度2-wiki中的计算方法\">4. 理解角度2: WIKI中的计算方法</h2>\n<p>理解角度2倒是相当简单.</p>\n<p>我们说过, 32位浮点数在内存中是这样表示的: 1位符号位, 8位指数位,\n23位尾数位</p>\n<p>事实上尾数位是24位,\n因为在尾数位前还隐藏了一个整数部分<strong>1.</strong> 或\n<strong>0.</strong> (可以参见本系列的第一篇文章)</p>\n<p>仔细想一下, 浮点数内存的三个部分中:</p>\n<p><strong>符号位</strong>: 用于控制正负号</p>\n<p><strong>指数位</strong>: 控制指数, 其实也就是控制小数点的移动:</p>\n<p>就好像在十进制中:</p>\n<p>1.2345e<strong>2</strong> = 123.45</p>\n<p>1.2345e<strong>3</strong> = 1234.5,\n指数位+1只是把小数点向后移动了一位. 二进制中也是一样的,\n指数位也仅仅用于控制小数点的移动. 比如0.01 → 0.001\n(小数点向左移动了一位)</p>\n<p><strong>尾数位</strong>: 其实真正控制精度的, 或者说真正记录状态的,\n只有尾数位.</p>\n<p>在24位尾数中</p>\n<p>从: 0.0000 0000 0000 0000 0000 000</p>\n<p>到: 0.0000 0000 0000 0000 0000 001</p>\n<p>...</p>\n<p>一直到: 1.1111 1111 1111 1111 1111 111</p>\n<p>共包含2^24种状态, 或者说能精确记录2^24种不同的状态:</p>\n<p>0.0000 0000 0000 0000 0000 000 是一种状态,</p>\n<p>0.0000 0000 0000 0000 0000 001 又是一种状态,</p>\n<p>1.0010 1100 0100 1000 0000 000 又是另一种状态</p>\n<p>...</p>\n<p>如果你准备记录2^24 + 1种状态, 那尾数就不够用了.\n或者说就不能满足你对精度的需求了.</p>\n<p>在这种视角下: <strong>精度 和 可表示的状态数</strong>\n之间画上了等号.</p>\n<p>总结一下: 32位浮点数一共能记录2^24种状态 (符号位用于控制正负,\n指数位用于控制小数点的位置. 只有尾数位用于精确记录状态)</p>\n<p>对于 <strong>float f = xxx;</strong>\n其中<strong>xxx</strong>是个数值,\n不管<strong>xxx</strong>你是用什么进制书写,\n只要是使用32位浮点数作为容器, 就最多只能精确记录2^24种状态,\n就好像一个32位浮点数大楼中一共有2^24个房间一样.</p>\n<p>事实上, <strong>xxx</strong>我们一般用10进制书写,</p>\n<p>而2^24 = 16 777 216(十进制), 即32位浮点数容器最多只能存储16 777\n216(十进制)种状态</p>\n<p>16 777 216 是个8位数</p>\n<p>所以32位浮点数的精度最多是7位十进制(0 - 9 999 999), 共10 000\n000种状态</p>\n<p>如果32位浮点数的精度是8位十进制的话(0 - 99 999 999), 这一共是100 000\n000种状态, 大于了32位浮点数能存储的状态上限16 777\n216...所以说精度到不了8位十进制数.</p>\n<p>到这里就分析完毕了.</p>\n<p>如果你更喜欢数学表达式的话, 那么 \"32位浮点数的精度最多是N位十进制\" ,\nN是这样算出来的: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.492ex\" height=\"2.481ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891.7 8173.3 1096.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1165.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2221.6,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2519.6,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(3004.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(510,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"msup\" transform=\"translate(4271.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5839.5,0)\"><path data-c=\"2248\" d=\"M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6895.3,0)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path></g></g></g></svg></mjx-container></span> 下面是wiki中对该算法的描述:</p>\n<blockquote>\n<p>The number of decimal digits precision is calculated via\nnumber_of_mantissa_bits * Log10(2). Thus ~7.2 and ~15.9 for single and\ndouble precision respectively.</p>\n</blockquote>\n<p>如wiki中所说, 32位浮点数的精度大约是7位十进制数,\n64位浮点数的大约是16位十进制数.</p>\n<p>注: 对于这两种理解角度: 理解角度2更简单一些,\n可以直接用数学公式计算出精度.\n理解角度1(也就是从间隔的角度去理解)的解释性更强一些, 细节更丰富,\n能解释的现象也更多一些.</p>\n<h2 id=\"总结\">5.总结</h2>\n<p>本章大体总结了 \"32位浮点数的精度是7位十进制数\" 的两种计算方法.\n关于这一话题, 网上的资料比较混乱, 所以这里加入了一些自己的理解.\n如有错误还望指出.</p>\n<p>下一章会讲解一下IEEE754标准中的一些<strong>非规格数与特殊数, 包括 ±0,\n±INFINITY, 和NaN</strong></p>\n<h1 id=\"x04-非规格数-infinity-nan\">0x04 非规格数, ±infinity, NaN</h1>\n<p>第一章提到过, ieee754标准中, 浮点数包含三种状态</p>\n<ol type=\"1\">\n<li>normal number(规格数)</li>\n<li>subnormal number(非规格数)</li>\n<li>non-number(特殊数)</li>\n</ol>\n<p>本章详细讲解这三种状态.</p>\n<h2 id=\"首先-如何区分这三种状态\">1、首先, 如何区分这三种状态</h2>\n<p>其实这三种状态是通过指数部分区分的, 而且很容易区分.</p>\n<p>以32位浮点数为例, 其内存状态分为3部分:</p>\n<p><strong>1位符号位 8位指数位 23位尾数位</strong></p>\n<p>其中, 如果8位指数位全为0, 就代表当前数是个非规格数. 或者说, 形如 *\n<strong>00000000</strong> ***********************\n格式的数就是非规格数.</p>\n<p>如果8位指数位全为1, 就代表当前数是个特殊数. 或者说, 形如 *\n<strong>11111111</strong> ***********************\n格式的数就是特殊数.</p>\n<p>如果8位指数不全为0, 也不全为1(也就是除去以上两种状态外,\n剩下的所有状态), 这个数就是规格数.</p>\n<p>随便几个例子: * 10101100 ***********************就是一个规格数</p>\n<p>可见:\n<strong>非规格数</strong>和<strong>特殊数</strong>是两种特殊状态,\n<strong>规格数</strong>则是非常常见的状态</p>\n<p>示意图:</p>\n<p>注意下图把<strong>特殊数</strong>分为了两种状态,\n<strong>无穷大</strong>和<strong>NaN</strong>:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-f9b4b188452bc9a79e6e0a4571218788_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h2 id=\"这三种状态的作用\">2、 这三种状态的作用</h2>\n<p>为什么要把浮点数分为这三种状态呢? 答案当然是有用啊,\n而且作用相当直观:</p>\n<p><strong>规格数</strong>: 用于表示最常见的数值, 比如1.2, 34567, 7.996,\n0.2. 但规格数不能表示0和非常靠近0的数.</p>\n<p><strong>非规格数</strong>: 用于表示0, 以及非常靠近0的数,\n比如1E-38.</p>\n<p><strong>特殊数</strong>: 用于表示\"无穷\"和\"NaN\":</p>\n<p>浮点数的存储和计算中会涉及到\"无穷\"这个概念, 比如:</p>\n<p>32位浮点数的取值范围是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"51.627ex\" height=\"2.52ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 22819.2 1114\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(278,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1056,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2556.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3278.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5068.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5513.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6291.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8291.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(9013.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11353.9,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11854.1,0)\"><path data-c=\"222A\" d=\"M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12743.3,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(13021.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15021.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(15743.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(18084,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(18528.7,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20028.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(20751.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(22541.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span></p>\n<p>如果你要往里面存储4e38(这超过了最大的可取值),\n32位浮点数就会在内存中这样记录 \"你存储的数超过了我的最大表示范围,\n那我就记录你存储了一个无穷大...\"</p>\n<p>浮点数的存储和计算中还会涉及到\"NaN (not a number)\"这个概念, 比如:</p>\n<p>你要给一个负数开根号(如<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.318ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.821ex\" height=\"2.398ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -919.5 2131 1060\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msqrt\"><g transform=\"translate(853,0)\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(0,59.5)\"><path data-c=\"221A\" d=\"M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z\"></path></g><rect width=\"1278\" height=\"60\" x=\"853\" y=\"799.5\"></rect></g></g></g></svg></mjx-container></span>\n), 但是ieee754标准中的浮点数却不知道该怎么进行这个运算,\n它就会在内存中这样记录 \"不知道怎么算, 这不是个数值, 记录为NaN\"</p>\n<p>可见, 这三种状态都是非常有用的, 作用也非常直观,\n下面我们一个个来讲.</p>\n<h2 id=\"状态1-规格数\">3、状态1: 规格数</h2>\n<p>对于规格数:</p>\n<p><strong>符号位, 1位</strong>: 可正可负</p>\n<p><strong>指数位, 8位</strong>: 不全为0, 且不全为1</p>\n<p>对于32位浮点数来说, 规格数的指数位的取值范围是[1, 254],\n偏置bias是127, 所以实际的指数是:</p>\n<p>[1 - 127, 254 - 127], 即 [-126, 127]</p>\n<p>注: 关于偏置, 可参见本系列第一章, 此处不再赘述</p>\n<p><strong>尾数位, 23位</strong>:\n尾数位前隐藏的整数部分是<strong>1.</strong> 而非 <strong>0.</strong></p>\n<p>所以尾数位的取值范围是[1.00000000000000000000000,\n1.11111111111111111111111] (二进制)</p>\n<p>换算为10进制为[1,2)</p>\n<p>注: 关于尾数位前隐藏的数, 可参见本系列第一章, 此处不再赘述</p>\n<p><strong>规格数的局限性:</strong> 无法表示 0 和 及其靠近0 的数</p>\n<p>原因很简单, ieee754浮点数的求值公式是:</p>\n<figure>\n<img src=\"https://pic1.zhimg.com/v2-2686d9d05e372301ad81a572046256f0_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>所以可求出32位浮点数的取值范围就是:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-cb7d77f56d9690caace22689457bc212_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>问题就出现在这里:</p>\n<p>注意尾数部分: 取值范围是[1, 2), 始终大于1</p>\n<p>注意指数部分:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-c80046339a4eb8c671c13b3ea77d7d58_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这个数始终大于0, 即便2^-167非常小, 但还是大于0</p>\n<p>那么: <strong>一个始终大于1的数 * 一个始终大于0的数,\n永远无法等于0</strong></p>\n<p><strong>事实上, 1(尾数最小值) * 2^-167(指数最小值) = 2^-167.\n2^-167就是当前我们能表示的最小值</strong></p>\n<p>也就是说: <strong>使用规格数时, 我们除了无法表示0, 也无法表示(0,\n2^-167)之间的, 靠近0的极小数...</strong></p>\n<p>这就是规格数的局限性, 这个局限性将由非规格数解决.</p>\n<p>补充一点:</p>\n<p>其实在本系列的第二章, 我们计算过32位浮点数的取值范围: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.501ex\" height=\"2.581ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -891 18343.5 1141\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(389,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1167,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1889.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2611.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4255.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4699.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5477.8,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6200,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(6922.2,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(9116,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9616.2,0)\"><path data-c=\"222A\" d=\"M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10505.4,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10783.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11505.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(12227.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(14421.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(14866.3,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15588.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(16310.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(17954.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span></p>\n<p>所以这里可以画一个示意图:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-d95c21622593e933f4339970e30ad7d2_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>↑\n<strong>绿色区域</strong>就是32位浮点数中<strong>规格数</strong>的取值范围,\n可见它取不到0和靠近0的极小数</p>\n<p>↑ <strong>红色区域</strong>包含0和靠近0的极小数,\n红色区域其实是<strong>非规格数</strong>的取值范围, 见下一节.</p>\n<h2 id=\"状态2-非规格数\">4、状态2: 非规格数</h2>\n<p>对于非规格数:</p>\n<p><strong>符号位, 1位</strong>: 可正可负</p>\n<p><strong>指数位, 8位</strong>: 全为0</p>\n<p>对于32位浮点数来说, 规格数的指数位全为0, 对应的值也是0.\n偏置bias依旧是127, 但:</p>\n<p>实际指数的计算方法是: 实际指数 = 1 - bias = 1 - 127 = -126,\n即<strong>非规格数的实际指数固定为-126.</strong> 注意这是规定.</p>\n<p>其实我们可以发现,\n非规格数<strong>实际指数</strong>的计算方法(实际指数 = 1 - bias),\n和规格数<strong>实际指数</strong>的计算方法(实际指数 = 指数位的值 -\nbias)<strong>不同</strong></p>\n<p>后文会看到这样规定的原因.</p>\n<p><strong>尾数位, 23位</strong>:\n尾数位前隐藏的整数部分是<strong>0.</strong> 而非 <strong>1.</strong></p>\n<p>所以尾数位的取值范围是[0.00000000000000000000000,\n0.11111111111111111111111] (二进制)</p>\n<p>换算为10进制为[0,1)</p>\n<p><strong>非规格数的作用:</strong> 表示0和靠近0的数</p>\n<p>那么规格数是怎么完成这个任务的呢.</p>\n<p><strong>首先看看非规格数是怎么表示0的</strong>:</p>\n<p>依旧要用到我们的ieee754浮点数求值公式:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-2686d9d05e372301ad81a572046256f0_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>然后, 非规格数尾数的取值范围是[0, 1), 指数固定为-126. 这就很简单了,\n让尾数取0不就能表示数值0了:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-d99bdefb801ddd4dcb04c200b08c6190_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>可见当尾数取0时, 通过变更符号位,\n我们可以表示出<strong>+0</strong>和<strong>-0</strong>,\nIEEE754规范中也确实存在着这两种表示0的方式</p>\n<p>注: 某些场景下, +0和-0会被认为完全相同, 某些场景下,\n+0和-0又被认为不完全相同. 这往往取决于具体的编程语言和应用场景,\n此处不做讨论. 只需知道IEEE754中可以表示+0和-0即可.\n+0和-0在IEEE754中是两种内存状态(符号位不同)</p>\n<p><strong>然后看看非规格数是怎么表示接近0的数的:</strong></p>\n<p>准确来说, 我们要看看, 对于32位浮点数, 非规格数是怎么表示出<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.989ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 9277.1 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(389,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1167,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1889.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2611.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4805.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5249.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5972.1,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(6694.3,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(8888.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container></span>之间的数的.\n也就是如何表示出下图中的红色区域的:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-e122b76cc864dec6b9317a1bb0e76f9b_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>其实也很简单:</p>\n<p>浮点数求值公式:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-2686d9d05e372301ad81a572046256f0_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>然后, 非规格数尾数的取值范围是[0, 1), 指数固定为-126.</p>\n<p>所以, 非规格数的取值范围就是:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-980aa9a359674316ca472dc15848594c_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这样就完成了...</p>\n<p>现在我们尝试着把32位浮点数中的非规格数的取值范围,\n和规格数的取值范围拼接在一起</p>\n<p>32位浮点数中, 非规格数的取值范围:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-dcbf842080418f7a6d0e91592533440a_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>32位浮点数中, 规格数的取值范围:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-7572e360fe2325aa8913730fa02b5fbb_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>仔细看一下, 啊...非规格数的取值范围,\n正好可以卡在规格数取值范围的中间, 现在我们得到了一个完整的取值范围:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-e032db27815ed895cec770e83d20dd87_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>感觉世界一下子清爽了起来.</p>\n<p>这就是非规格数的作用: 用于表示0和靠近0的数, 用于和规格数\"珠联璧合\",\n形成一个完整的取值范围.</p>\n<p>不过这还没有完...</p>\n<h2 id=\"非规格数补充\">5、非规格数补充</h2>\n<h3 id=\"逐渐溢出\">1. 逐渐溢出</h3>\n<p>前文说过, 非规格数尾数的取值范围是[0, 1),\n指数<strong>固定</strong>为-126</p>\n<p>所以是尾数的变化在导致非规格数的值变大, 举例:</p>\n<p>0 00000000 00000000000000000000001</p>\n<p>就比</p>\n<p>0 00000000 00000000000000000000000</p>\n<p>要大一些</p>\n<p>随着尾数逐渐增大, 相应的非规格数也在不断增大:</p>\n<p>...</p>\n<p>0 00000000 11111111111111111111111 这是非规格数的最大值</p>\n<p>此时尾数(带上隐藏的整数部分0.)其实是0.11111111111111111111111,\n是个比1小一点点的数, 不妨记做(1 - ε)</p>\n<p>那, 此时非规格数的值就是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.676ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 6044.7 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(389,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1111.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2111.4,0)\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2517.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3128.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3850.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span></p>\n<p>好, 我们再往前前进一格, 此时会进入<strong>规格数</strong>的范围:</p>\n<p>0 00000001 00000000000000000000000</p>\n<p>这是个规格数,</p>\n<p>其尾数位的值: 其实隐藏了 <strong>1.</strong> 或者说,\n此时真正的尾数应该是1.00000000000000000000000 , 也就是1</p>\n<p>其指数位的值: 是1, 则实际指数应该是1 - bias = 1-127 = -126</p>\n<p>所以这个规格数的值就是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.231ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 3638.2 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(722.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1444.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span>, 这是规格数的<strong>最小值</strong>.</p>\n<p>注意到没有: 非规格数的最大值是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.676ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 6044.7 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(389,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1111.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2111.4,0)\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2517.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3128.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3850.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span>，规格数的最小值是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.231ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 3638.2 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(722.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1444.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span></p>\n<p>两者之间实现了非常平滑的过度,\n非规格数的最大值非常紧密的连接上了规格数的最小值</p>\n<p>非规格数 \"一点点逐渐变大, 最后其最大值平稳的衔接上规格数的最小值\",\n这种特性在ieee754中被叫做<strong>逐渐溢出(gradual\nunderflow)</strong></p>\n<p>明白了这一点, 就很容易想通:</p>\n<p>① 为什么规定非规格数的尾数前隐藏的整数部分是 <strong>0.</strong>\n而规格数尾数前隐藏的整数部分是<strong>1.</strong></p>\n<p>② 为什么非规格数的真实指数的计算公式是 <strong>1 - bias</strong>,\n而规格数的真实指数的计算公式是 <strong>指数部分的值 - bias</strong>\n了</p>\n<p>仔细思考一下,\n就是这些设计实现了<strong>逐渐溢出</strong>这种特性.</p>\n<p>↑ 关于第①点: 这使得非规格数的尾数取值范围是[0,1),\n而规格数的尾数取值范围是[1,2), 两者平滑的衔接在了一起</p>\n<p>↑ 关于第②点: 这使得对于32位浮点数来说, 非规格数的真实指数固定为-126,\n而规格数的指数是[-126, 127], 两者也平滑的衔接在了一起...</p>\n<h3 id=\"密集分布\">2. 密集分布</h3>\n<p>第三章中我们说过: 如果把ieee754浮点数想象成一个表盘的话,\n那表盘上的蓝点是越来越稀疏的. 或者说越靠近0越密集.</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-d46932f28c9c5078cf22993d5985cb16_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>不过当时仅讨论了规格数的分布情况, 那非规格数呢.</p>\n<p>答案是, 非规格数的蓝点分布间隔,\n和规格数中蓝点最密集的区域(也就是最靠近0的区域)一致, 可以验证一下:</p>\n<p>非规格数: 范围是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.626ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 5138.9 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(278,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(778,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1222.7,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1944.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2667.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4860.9,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span>，在这个范围中分布了2^23个蓝点, 则蓝点间的间隔是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16.994ex\" height=\"2.47ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 7511.2 1091.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(2193.8,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"msup\" transform=\"translate(2693.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4261.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(5317.5,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(500,0)\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span></p>\n<p>规格数中蓝点最密集的区域, 也就是最靠近0的区域是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.191ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 5388.2 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(278,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2471.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2916.5,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5110.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span></p>\n<p>, 在这个范围中分布了2^23个蓝点, 则蓝点间的间隔是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"38.513ex\" height=\"2.47ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 17022.9 1091.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(389,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2805,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3805.2,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5999,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(6388,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"msup\" transform=\"translate(6888,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(8455.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(9511.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(11705.5,0)\"><g data-mml-node=\"mo\"><path data-c=\"2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"></path></g></g><g data-mml-node=\"msup\" transform=\"translate(12205.5,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(13773.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(14829.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(500,0)\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span></p>\n<p><strong>所以, 即便把非规格数与规格数放在一起审视,\nieee754浮点数表盘上的蓝点依旧是越靠近0越密集, 越靠近∞越稀疏</strong></p>\n<p><img src=\"http://img.singhe.art/v2-9a0245e28273934350ac558ed35da12c_b.jpg\" alt=\"img\"> 深入理解计算机系统第三版, 浮点数密度示意图.\n中间部分密密麻麻的都是非规格数</p>\n<p>下面是在c语言中的测试结果:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-bf95244a4f5a9a60e082782ce368631a_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h2 id=\"状态3-特殊数\">6、状态3: 特殊数</h2>\n<p>特殊数分为两种: 无穷和NaN</p>\n<ol type=\"1\">\n<li>先说无穷</li>\n</ol>\n<p>理解了非规格数, 再理解无穷就很简单了, 两者有很多相似之处:</p>\n<p>对于无穷:</p>\n<p><strong>符号位, 1位</strong>: 可正可负</p>\n<p><strong>指数位, 8位</strong>: 全为1</p>\n<p><strong>尾数位, 23位</strong>: 全部为0</p>\n<p>当内存位于上述状态时, 就表示无穷(infinity)</p>\n<p>具体写出来就是: * 11111111 00000000000000000000000\n用于表示无穷(infinity)</p>\n<p>其中符号位可正可负, 分别记做+infinity和-infinity</p>\n<p>以32位浮点数为例, 其规格数的取值范围是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.25ex\" height=\"2.468ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841 18232.5 1091\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(389,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1167,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1889.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2611.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4255.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4699.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5477.8,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(6200,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(6922.2,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(9116,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9616.2,0)\"><path data-c=\"222A\" d=\"M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10505.4,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10783.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11505.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(12227.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(14421.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(14866.3,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15588.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(16310.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(1000,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(17954.5,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span></p>\n<p>当要存储的数大于规格数取值范围的最大值时, 就会被记做+infinity,\n比如2^128, 刚刚超过规格数的取值范围的最大值, 就会被记做+infinity</p>\n<p>当要存储的数小于规格数取值范围的最小值时, 就会被记做-infinity,\n比如-2^128, 刚刚小于规格数的取值范围的最小值, 就会被记做-infinity</p>\n<p>需要注意的是: 所有+infinity的内存状态都是0 11111111\n00000000000000000000000, 不会有任何变动</p>\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.719ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 1643.7 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span>对应的内存状态是0\n11111111 00000000000000000000000</p>\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.518ex\" height=\"1.904ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 3765 841.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(1000,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(1500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(2000,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(2500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(3000,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(3500,0)\"></path><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\" transform=\"translate(4000,0)\"></path></g></g></g></g></g></svg></mjx-container></span>对应的内存状态还是0\n11111111 00000000000000000000000</p>\n<p>同理, -infinity的内存状态都是1 11111111 00000000000000000000000</p>\n<p>此外: 就像非规格数的最大值可以和规格数的最小值平稳衔接一样,\n规格数的最大值也可以和+infinity平稳衔接:</p>\n<p>规格数的最大值是: 0 11111110 11111111111111111111111</p>\n<p>尾数位其实是1.11111111111111111111111, 非常接近2, 不妨记做<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.815ex\" height=\"1.692ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 2128.4 748\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(722.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1722.4,0)\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g></g></g></svg></mjx-container></span>，指数是127，所以最大值是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.431ex\" height=\"2.468ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841 5494.5 1091\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(389,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1111.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2111.4,0)\"><path data-c=\"1D716\" d=\"M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2517.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3128.7,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3850.9,0)\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span></p>\n<p>+infinity的内存状态则是: 0 11111111 00000000000000000000000</p>\n<p>尾数其实是: 1.00000000000000000000000, 等于1，指数是128</p>\n<p>所以+infinity的内存状态对应的值是<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.719ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 1643.7 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1000,0)\"></path></g></g></g></g></g></svg></mjx-container></span></p>\n<p>可见规格数的最大值也能和+infinity平稳衔接. -infinity同理.</p>\n<p>现在我们就集齐了整个数轴:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-1b6f26cad2e694e143016cbe6094c80e_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>↑ 而且各个节点都能平稳的衔接在一起</p>\n<ol start=\"2\" type=\"1\">\n<li>NaN</li>\n</ol>\n<p>NaN则更简单, 前面说过, 如果计算出来的值不是一个数值, 则记录为NaN</p>\n<p>NaN的内存状态是:</p>\n<p><strong>符号位, 1位</strong>: 可正可负</p>\n<p><strong>指数位, 8位</strong>: 全为1</p>\n<p><strong>尾数位, 23位</strong>: 不全为0即可</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-9b66e9493132c726fb85eb2eded6abd9_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>仅仅是一种特殊状态标记而已.</p>\n<p>需要注意的是, 根据wiki, 没有+NaN或-NaN这种说法, 统称为NaN</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-6a0cba57252a92ddbd8afc9fd4b2922a_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h1 id=\"x05-一些补充\">0x05 一些补充</h1>\n<p>本章讨论一些零碎的话题.</p>\n<h2 id=\"其他导致浮点数存储不精确的原因\">1、其他导致浮点数存储不精确的原因</h2>\n<p>在第三章中我们提到过, 数学中的小数是连续的,\n而计算机中的小数(准确来说是ieee754标准中的小数)是离散的.</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-886f0c2a7559e2cd66ab4d4c917a7a95_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这就会引发精度问题: 图中的绿色指针只能指向蓝点, 不能指向蓝点之间的数.\n比如上面最右边的图, 绿色指针其实无法指向0.3, 当你想要指向0.3时,\n实际上会被舍入为0.234, 即舍入到离它最近的蓝点对应的值.</p>\n<p>而除此之外,\n<strong>进制问题也会导致IEEE754浮点数存储不精确</strong></p>\n<p>简单来说就是: <strong>有限长度编码下,\n每种进制都有他们不能精确表示的值</strong></p>\n<p>比如: 10进制不能精确的表示1/3 (0.3333333.....)</p>\n<p>十进制可以精确表示1/5 (0.2), 但二进制无法精确表示1/5</p>\n<p>不能精确表示时，只能进行近似. 编码长度越长，近似程度越高</p>\n<p>举例: 下图尝试用二进制表示0.2, 可以发现, 只能近似表示...</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-a1a9a5b34310327345b7d0e7c401af3e_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>当你把一个十进制数存储到计算机中时,\n实际上存储的是该数的二进制表示.</p>\n<p>所以, 当你写入如下代码时:</p>\n<p>float f = 0.2;</p>\n<p>虽然0.2(十进制)远远没有到达32位浮点数的精度上限(7位精度),\n但计算机其实无法精确地存储该数值,\n因为0.2(十进制)无法使用二进制格式精确表示.</p>\n<p>此时变量f对应的内存状态是这样的:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-52bdd794bc49357e167fff702838fe8e_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>↑ 你键入的是0.2</p>\n<p>↑ 内存中实际存储的是0.20000000298023223876953125</p>\n<p>可以在c语言中验证一下:</p>\n<p>可见十进制的0.2无法用二进制精确表示,\n但十进制的0.5却可以用二进制精确表示.</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-4abe601db3b9fae9f97d691c1da13973_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h2 id=\"二进制的小数形式\">2、二进制的小数形式</h2>\n<p>有些同学可能会纳闷, 二进制为什么会有小数形式?\n我常见的二进制都是整数形式啊, 比如十进制的9, 表示为二进制是1001,\n怎么会有 <strong>1001.101</strong> 这种二进制的小数格式呢.</p>\n<p>其实对于程序员来说, 这里确实比如容易让人困惑, 比如win10自带的计算机,\n就不支持二进制小数:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-1e8259a6ead804cc2f3569bb4e152fc3_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>二进制模式下, 小数点是不能用的</p>\n<p>许多编程语言, 比如js, 也不支持直接使用二进制小数:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-8b89b9a78637a088e19595c2f5de92df_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>支持二进制整数, 但不支持二进制小数，但和十进制一样,\n二进制其实也有小数形式, 而且很容易理解:</p>\n<p>比如对于十进制数 78.23</p>\n<p>十位: 7, 表示</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-4a640ab716bb061b75f626e48b3fec4e_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>个位: 8, 表示</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-1fadba1cbcac530132c02b825f81a3f0_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>十分位: 2, 表示2/10, 或说表示</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-4bebde9668557af01c1d8e4ad2337946_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>百分位: 3, 表示3/100, 或说表示</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-c8efddec0395759e00ee8f3f11b8ca72_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这个十进制所表示的值是: 70 + 8 + 2/10 + 3/100</p>\n<p>二进制数也是同理的:</p>\n<p>比如对于二进制数 10.11</p>\n<p>第一位: 1, 表示1 * 2^1 = 2</p>\n<p>第二位: 0, 表示0 * 2^0 = 0</p>\n<p>第三位: 1, 表示1 * 2^-1 = 0.5</p>\n<p>第四位: 1, 表示1 * 2^-2 = 0.25</p>\n<p>所以这个二进制表示的值, 其实就是十进制的2 + 0 + 0.5 + 0.25 = 2.75</p>\n<p>这里比较有意思的一点是:</p>\n<p>十进制小数点后面的那一位(也就是十分位),\n对应的<strong>权</strong>是1/10, 也就是0.1</p>\n<p>即, 对于十进制数3.4, 这个4对应的值是: <strong>4 * 权</strong> =\n<strong>4 * 0.1</strong> = <strong>0.4</strong></p>\n<p>而二进制小数点后面的一位, 对应的<strong>权</strong>是1/2,\n也就是十进制的0.5</p>\n<p>所以对于二进制数0.1, 这个1对应的值是: <strong>1 * 0.5 = 0.5</strong>,\n所以二进制的0.1, 其实等于十进制的0.5</p>\n<p>这让我想起来一个脑筋急转弯, 问: 什么时候 <strong>0.1</strong> 比\n<strong>0.2</strong> 要大?</p>\n<p>答: 当0.1是个二进制数, 而0.2是个十进制数的时候...</p>\n<p>事实上: 对于小数点之后的位, 二进制的位权始终比十进制的位权要大,\n举例:</p>\n<p>十进制数: 小数点之后的位权依次是: 1/10, 1/100, 1/1000...</p>\n<p>二进制数: 小数点之后的位权依次是: 1/2, 1/4, 1/8...\n相应位的权始终比↑十进制的要大</p>\n<p>所以会出现这种现象</p>\n<p>二进制: 1.000001, 小数点后面的数看起来已经很小很小了</p>\n<p>对应的十进制是: 1.015625, 小数点后面的数其实还挺大...</p>\n<p>在IEEE765标准中, 我们会经常和二进制小数打交道,\n所以这里补充一下相关知识.</p>\n<h2 id=\"关于32位浮点数-一些不太正确的认知\">3、关于32位浮点数,\n一些不太正确的认知</h2>\n<h3 id=\"位浮点数能存储很大的整数\">1. 32位浮点数能存储很大的整数</h3>\n<p>这是32位浮点数的取值范围:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-2aa6357d0b54287ab43ac3a4365a2794_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>当我第一次看到这个取值范围时, 我是很惊讶的, 怎么这么大?</p>\n<p>一个浮点数, 占用32字节,\n竟然能存储下约±340000000000000000000000000000000000000这么大的数</p>\n<p>相比之下, 一个同样32字节的long类型, 存储范围只有约±2147483647</p>\n<p>那我为啥还要用long类型...</p>\n<p>...</p>\n<p>一路学习到现在, 倒是可以绕过这个弯儿了, 那就是:</p>\n<p>32位浮点型确实最大可以存储到</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-467defecf22e086e65923f0034e9c99f_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这么大的数, 但精度很低</p>\n<p>第三章中我们说过, 32位浮点数表盘中的蓝点会越来越稀疏:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-d46932f28c9c5078cf22993d5985cb16_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>等到了</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-467defecf22e086e65923f0034e9c99f_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这么大的数时, 其实蓝点已经稀疏的不成样子了, 基本是不可用状态</p>\n<p>根据wiki中给出的间隔, 对于1.70141e38 到 3.40282e38范围中的数,\n间隔是2.02824e31</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-83d9de0f5c6394fcbd347ff755621d7d_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>也就是说, 大体上: 32位浮点数中, 能精确存储1.70141e38</p>\n<p>但无法精确存储1.70141e38 + 1</p>\n<p>也无法精确存储1.70141e38 + 2,</p>\n<p>也无法精确存储1.70141e38 + 100000000000</p>\n<p>...</p>\n<p>下一个能精确存储的数是: 1.70141e38 + 20282400000000000000000000000000\n(即加上间隔)</p>\n<p>这个精度基本上是不可用的.</p>\n<p>事实上, 如果你要用float存储整数的话, 最多只能精确存储到\n<strong>16777216</strong></p>\n<p>再大的话, 间隔就会变为2, 就不适合用来存储整数了:</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-e633378a7fe288ebc8de399ef51e71db_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>此时再回过头来看看同为 32位 的long类型, 能精确存储的整数范围</p>\n<p>约是: ±2147483647</p>\n<p>比: ±16777216 大多了</p>\n<p>所以存储大整数还是用long类型吧</p>\n<p>总结: 32位浮点数只是有能力存储到<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.078ex\" height=\"2.005ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 4012.6 886\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1500.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2222.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container></span>, 实际上存储的数过大会导致精度过低, 基本上不可用.\n用32位浮点数存储整数时, 只适用存储±16777216之间的整数.</p>\n<h3 id=\"位浮点数能存储很精确的小数\">2. 32位浮点数能存储很精确的小数</h3>\n<p>这是32位浮点数的取值范围: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"51.627ex\" height=\"2.565ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 22819.2 1133.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(278,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1056,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2556.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3278.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5068.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5513.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6291.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8291.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(9013.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11353.9,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11854.1,0)\"><path data-c=\"222A\" d=\"M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12743.3,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(13021.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15021.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(15743.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(18084,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(18528.7,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20028.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(20751.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(22541.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span></p>\n<p>看起来好像能存储<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.454ex\" height=\"2.005ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 5062.7 886\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2000.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2722.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container></span>这么精确的小数，但其实和存储整数一样,\n32位浮点数只是有能力存储到<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.454ex\" height=\"2.005ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 5062.7 886\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2000.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2722.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,393.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g></g></g></svg></mjx-container></span>这么小的小数而已...</p>\n<p>事实上在第三章中我们详细讲解过: 32位浮点数的精确度是7位有效数.</p>\n<p>即如果你要存储的数 整数部分 + 小数部分 放在一起超过了 7 位,\n32位浮点数就不能精确存储了</p>\n<p>比如, 32位浮点数就不能精确存储我们常背的部分圆周率</p>\n<figure>\n<img src=\"http://img.singhe.art/v2-78f9ab2f848ceb6be27fc39a423c08a5_b.jpg\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>32位浮点数倒是可以存储常见的月工资, 比如 5078.65, 或 12665.73.\n但如果要存储年工资, 或把工资存储到3位小数,\n32位浮点数就不一定够用了...</p>\n<p>所以, 虽然32位浮点数的取值范围看起来很大, 足足有: <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"51.627ex\" height=\"2.565ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -883.9 22819.2 1133.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(278,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1056,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2556.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(3278.4,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5068.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5513.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6291.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8291.4,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(9013.7,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11353.9,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11854.1,0)\"><path data-c=\"222A\" d=\"M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(12743.3,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(13021.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(778,0)\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(15021.6,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(15743.8,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(18084,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(18528.7,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(20028.9,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(20751.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1033,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\" transform=\"translate(500,0)\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(22541.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container></span> 但其实32位浮点数只适合存储常见数据...</p>\n<p>感性地去认知的话, float(也就是32位浮点数)类型其实和int类型有些相似:\nint用于存储最常用, 最自然的整数. float则用于存储最常用,\n最自然的浮点数...编程时,\n如果要存储的数很大或精度很高(相对来说，这些数往往不怎么常用或不怎么自然),\n就要考虑改用long或double.</p>\n<p>精确来说的话, 就是不要被32位浮点数骇人的取值范围吓到.\n而是记住事实上它只能存储7位有效数就行了.</p>\n","categories":["data_structure"]},{"title":"SkipList","url":"/2022/09/15/data_structure/SkipList/","content":"<blockquote>\n<p>转载自<a\nhref=\"https://baijiahao.baidu.com/s?id=1710441201075985657&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1710441201075985657&amp;wfr=spider&amp;for=pc</a></p>\n</blockquote>\n<h1 id=\"什么是跳表\">什么是跳表？</h1>\n<p><del>类似MineCraft的地狱交通，在地狱走一个相当于主世界走8格</del></p>\n<p>跳表全称为跳跃列表，它允许快速查询，插入和删除一个有序连续元素的数据链表。跳跃列表的平均查找和插入时间复杂度都是O(logn)。快速查询是通过维护一个多层次的链表，且每一层链表中的元素是前一层链表元素的子集（见右边的示意图）。一开始时，算法在最稀疏的层次进行搜索，直至需要查找的元素在该层两个相邻的元素中间。这时，算法将跳转到下一个层次，重复刚才的搜索，直到找到需要查找的元素为止。</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/e61190ef76c6a7ef314419fa0f46b858f1de66d6.jpeg\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>一张跳跃列表的示意图。每个带有箭头的框表示一个指针,\n而每行是一个稀疏子序列的链表；底部的编号框（黄色）表示有序的数据序列。查找从顶部最稀疏的子序列向下进行,\n直至需要查找的元素在该层两个相邻的元素中间。</p>\n<span id=\"more\"></span>\n<h1 id=\"跳表的演化过程\">跳表的演化过程</h1>\n<p>对于单链表来说，即使数据是已经排好序的，想要查询其中的一个数据，只能从头开始遍历链表，这样效率很低，时间复杂度很高，是\nO(n)。\n那我们有没有什么办法来提高查询的效率呢？我们可以为链表建立一个“索引”，这样查找起来就会更快，如下图所示，我们在原始链表的基础上，每两个结点提取一个结点建立索引，我们把抽取出来的结点叫作<strong>索引层</strong>或者<strong>索引</strong>，down\n表示指向原始链表节点的指针。</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/d043ad4bd11373f0fe53335b56b35cf2f9ed04cf.jpeg\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>现在如果我们想查找一个数据，比如说\n15，我们首先在索引层遍历，当我们遍历到索引层中值为 14\n的结点时，我们发现下一个结点的值为 17，所以我们要找的 15\n肯定在这两个结点之间。这时我们就通过 14 结点的 down\n指针，回到原始链表，然后继续遍历，这个时候我们只需要再遍历两个结点，就能找到我们想要的数据。好我们从头看一下，整个过程我们一共遍历了\n7\n个结点就找到我们想要的值，如果没有建立索引层，而是用原始链表的话，我们需要遍历\n10 个节点。</p>\n<p>通过这个例子我们可以看出来，通过建立一个索引层，我们查找一个基点需要遍历的次数变少了，也就是查询的效率提高了。</p>\n<p>那么如果我们给索引层再加一层索引呢？遍历的节点会不会更少呢，效率会不会更高呢？我们试试就知道了。</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/9922720e0cf3d7cab723615e01a3a9006a63a903.jpeg\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>现在我们再来查找 15，我们从第二级索引开始，最后找到 15，一共遍历了 6\n个节点，果然效率更高。</p>\n<p>当然，因为我们举的这个例子数据量很小，所以效率提升的不是特别明显，如果数据量非常大的时候，我们多建立几层索引，效率提升的将会非常的明显，感兴趣的可以自己试一下，这里我们就不举例子了。</p>\n<p>这种通过对链表加多级索引的机构，就是跳表了。</p>\n<h1 id=\"跳表具体有多快\">跳表具体有多快</h1>\n<p>通过上边的例子我们知道，跳表的查询效率比链表高，那具体高多少呢？下面我们一起来看一下。</p>\n<p>衡量一个算法的效率我们可以用时间复杂度，这里我们也用时间复杂度来比较一下链表和跳表。前面我们已经讲过了，链表的查询的时间复杂度为\nO(n)，那跳表的呢？</p>\n<p>如果一个链表有 n\n个结点，如果每两个结点抽取出一个结点建立索引的话，那么第一级索引的节点数大约就是\nn/2，第二级索引的结点数大约为 n/4，以此类推第 m 级索引的节点数大约为\nn/(2^m)。</p>\n<p>假如一共有 m 级索引，第 m\n级的节点数为两个，通过上边我们找到的规律，那么得出 n/(2^m)=2，从而求得\nm=log(n)-1。如果加上原始链表，那么整个跳表的高度就是\nlog(n)。我们在查询跳表的时候，如果每一层都需要遍历 k\n个结点，那么最终的时间复杂度就为 O(k*log(n))。</p>\n<p>那这个 k\n值为多少呢，按照我们每两个结点提取一个基点建立索引的情况，我们每一级最多需要遍历两个个结点，所以\nk=2。为什么每一层最多遍历两个节点呢？</p>\n<p>因为我们是每两个结点提取一个结点建立索引，最高一级索引只有两个结点，然后下一层索引比上一层索引两个结点之间增加了一个结点，也就是上一层索引两结点的中值，看到这里是不是想起来我们前边讲过的二分查找，每次我们只需要判断要找的值在不在当前结点和下一个节点之间即可。</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/500fd9f9d72a60595187061bdb882392023bba66.jpeg\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>如上图所示，我们要查询红色结点，我们查询的路线即黄线表示出的路径查询，每一级最多遍历两个节点即可。</p>\n<p>所以跳表的查询任意数据的时间复杂度为 O(2*log(n))，前边的常数 2\n可以忽略，为 O(log(n))。</p>\n<h1 id=\"跳表是用空间来换时间\">跳表是用空间来换时间</h1>\n<p>跳表的效率比链表高了，但是跳表需要额外存储多级索引，所以需要的更多的内存空间。</p>\n<p>跳表的空间复杂度分析并不难，如果一个链表有 n\n个结点，如果每两个结点抽取出一个结点建立索引的话，那么第一级索引的节点数大约就是\nn/2，第二级索引的结点数大约为 n/4，以此类推第 m 级索引的节点数大约为\nn/(2^m)，我们可以看出来这是一个等比数列。</p>\n<p>这几级索引的结点总和就是\nn/2+n/4+n/8…+8+4+2=n-2，所以跳表的空间复杂度为 o(n)。</p>\n<p>那么我们有没有办法减少索引所占的内存空间呢？可以的，我们可以每三个结点抽取一个索引，或者没五个结点抽取一个索引。这样索引节点的数量减少了，所占的空间也就少了。</p>\n<h1 id=\"跳表的插入和删除\">跳表的插入和删除</h1>\n<p>我们想要为跳表插入或者删除数据，我们首先需要找到插入或者删除的位置，然后执行插入或删除操作，前边我们已经知道了，跳表的查询的时间复杂度为\nO(logn），因为找到位置之后插入和删除的时间复杂度很低，为\nO(1)，所以最终插入和删除的时间复杂度也为 O(longn)。</p>\n<p>我们通过图看一下插入的过程。</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/a9d3fd1f4134970a61847ee86776c6c1a5865d43.jpeg\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>删除操作的话，如果这个结点在索引中也有出现，我们除了要删除原始链表中的结点，还要删除索引中的。因为单链表中的删除操作需要拿到要删除节点的前驱结点，然后通过指针操作完成删除。所以在查找要删除的结点的时候，一定要获取前驱结点。当然，如果我们用的是双向链表，就不需要考虑这个问题了。</p>\n<p>如果我们不停的向跳表中插入元素，就可能会造成两个索引点之间的结点过多的情况。结点过多的话，我们建立索引的优势也就没有了。所以我们需要维护索引与原始链表的大小平衡，也就是节点增多了，索引也相应增加，避免出现两个索引之间结点过多的情况，查找效率降低。</p>\n<p>跳表是通过一个随机函数来维护这个平衡的，当我们向跳表中插入数据的的时候，我们可以选择同时把这个数据插入到索引里，那我们插入到哪一级的索引呢，这就需要随机函数，来决定我们插入到哪一级的索引中。</p>\n<p>这样可以很有效的防止跳表退化，而造成效率变低。</p>\n<h1 id=\"跳表的代码实现\">跳表的代码实现</h1>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> skiplist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 跳表的一种实现方法。</span></span><br><span class=\"line\"><span class=\"comment\"> * 跳表中存储的是正整数，并且存储的是不重复的。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SkipList</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">MAX_LEVEL</span> <span class=\"operator\">=</span> <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">levelCount</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Node</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(); <span class=\"comment\">// 带头链表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Random</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> levelCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p.forwards[i] != <span class=\"literal\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;</span><br><span class=\"line\">                p = p.forwards[I];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.forwards[<span class=\"number\">0</span>] != <span class=\"literal\">null</span> &amp;&amp; p.forwards[<span class=\"number\">0</span>].data == value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.forwards[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">level</span> <span class=\"operator\">=</span> randomLevel();</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">        newNode.data = value;</span><br><span class=\"line\">        newNode.maxLevel = level;</span><br><span class=\"line\">        Node update[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[level];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; level; ++i) &#123;</span><br><span class=\"line\">            update[i] = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// record every level largest value which smaller than insert value in update[]</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> level - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p.forwards[i] != <span class=\"literal\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;</span><br><span class=\"line\">                p = p.forwards[I];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            update[i] = p; <span class=\"comment\">// use update save node in search path</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// in search path node next node become new node forwords(next)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; level; ++i) &#123;</span><br><span class=\"line\">            newNode.forwards[i] = update[i].forwards[I];</span><br><span class=\"line\">            update[i].forwards[i] = newNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// update node hight</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (levelCount &lt; level) levelCount = level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        Node[] update = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[levelCount];</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> levelCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p.forwards[i] != <span class=\"literal\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;</span><br><span class=\"line\">                p = p.forwards[I];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            update[i] = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.forwards[<span class=\"number\">0</span>] != <span class=\"literal\">null</span> &amp;&amp; p.forwards[<span class=\"number\">0</span>].data == value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> levelCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (update[i].forwards[i] != <span class=\"literal\">null</span> &amp;&amp; update[i].forwards[i].data == value) &#123;</span><br><span class=\"line\">                    update[i].forwards[i] = update[i].forwards[i].forwards[I];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 随机 level 次，如果是奇数层数 +1，防止伪随机</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">randomLevel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">level</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; MAX_LEVEL; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r.nextInt() % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                level++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printAll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.forwards[<span class=\"number\">0</span>] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            System.out.print(p.forwards[<span class=\"number\">0</span>] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            p = p.forwards[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node forwards[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[MAX_LEVEL];</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">maxLevel</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">            builder.append(<span class=\"string\">&quot;&#123; data: &quot;</span>);</span><br><span class=\"line\">            builder.append(data);</span><br><span class=\"line\">            builder.append(<span class=\"string\">&quot;; levels: &quot;</span>);</span><br><span class=\"line\">            builder.append(maxLevel);</span><br><span class=\"line\">            builder.append(<span class=\"string\">&quot; &#125;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["data_structure"],"tags":["data_structure","skip_list"]},{"title":"编码以及中文乱码","url":"/2022/04/08/data_structure/chinese_encoding/","content":"<blockquote>\n<p>参考自<a\nhref=\"https://www.bilibili.com/video/BV1cB4y177QR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=34f42153abf8d06182c3e941bc952660\">B站柴知道</a>，十分推荐观看原视频，侵权请联系删除。</p>\n</blockquote>\n<h1 id=\"什么是编码\">什么是编码</h1>\n<p>计算机存储的内容都是二进制的数据，图像、音频、文字等也都需要按照一定的规则转换成二进制数据进行存储。将文字转换成二进制数据的规则就叫做编码。</p>\n<p>假如世界上只有三个文字“柴知道”，那么我们就可以按照下面的方式进行编码：</p>\n<span id=\"more\"></span>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014102739026.png\"\nalt=\"image-20221014102739026\" />\n<figcaption aria-hidden=\"true\">image-20221014102739026</figcaption>\n</figure>\n<h1 id=\"ascii编码\">ASCII编码</h1>\n<p>计算机存储中最小的单位是一个字节（byte），一个byte等于8bit，因此一共可以编码2^8=256个字符。美国最先使用计算机，它们使用的文字只有26个英文字母，完全足够了。因此他们按照下面的方式对英文字母进行了编码，同时还包含了一些特殊控制符号（如回车、换行、删除），一共用了128个。所以只用了7bit（2^7=128)，所以最高位置0。</p>\n<figure>\n<img src=\"http://img.singhe.art/800px-USASCII_code_chart.png\"\nalt=\"USASCII code chart.png\" />\n<figcaption aria-hidden=\"true\">USASCII code chart.png</figcaption>\n</figure>\n<p>比如，字母a对应的码位就是01100001，十六进制为0x61。z对应的码位为01111010，十六进制为0x7A。</p>\n<p>下面的代码，我们将通过手动构造二进制数据，然后输出得到字符串\"hello\nworld\"。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> char_array[<span class=\"number\">12</span>] = &#123;<span class=\"number\">0b01101000</span>,  <span class=\"comment\">/* 0x68 h */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01100101</span>,     <span class=\"comment\">/* 0x65 e */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01101100</span>,     <span class=\"comment\">/* 0x6c l */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01101100</span>,     <span class=\"comment\">/* 0x6c l */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01101111</span>,     <span class=\"comment\">/* 0x6f o */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01110111</span>,     <span class=\"comment\">/* 0x77 w */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01101111</span>,     <span class=\"comment\">/* 0x6f o */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01110010</span>,     <span class=\"comment\">/* 0x72 r */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01101100</span>,     <span class=\"comment\">/* 0x6c l */</span></span><br><span class=\"line\">                        <span class=\"number\">0b01100100</span>,     <span class=\"comment\">/* 0x64 d */</span></span><br><span class=\"line\">                        <span class=\"number\">0b00000000</span>&#125;;    <span class=\"comment\">/* 0x00 &#x27;\\0&#x27;*/</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *<span class=\"built_in\">string</span> = (<span class=\"type\">char</span>*)char_array;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, <span class=\"built_in\">string</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"gb2312编码\">GB2312编码</h1>\n<p>ASCII只能编码英文字母和数字，而且一个byte最多只能编码256个字符，那么怎么来编码中文呢？GB2312-80就是1980年公布的汉字编码国家标准，采用两个byte来编码字符。如果是ASCII码已经存在的字符（如字母、数字），仍按照原有的方案用一个byte来编码，如果是汉字则使用2byte来编码。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014110216164.png\"\nalt=\"image-20221014110216164\" />\n<figcaption aria-hidden=\"true\">image-20221014110216164</figcaption>\n</figure>\n<p>从上图中可以看出，hello仍然按照ASCII的编码方法编码成68 65 6c 6c\n6f，而“中”字则被编码成D6 D0，“国”字被编码成B9 FA，均采用两字节编码。</p>\n<h1 id=\"gbk编码\">GBK编码</h1>\n<p>GBK编码是微软在GBK编码的基础上，进行了一部分拓展，以便支持其他类型的汉字（如繁体、日文汉字、韩文汉字）。“hello中国”在GBK中的编码和GB2312中的编码内容一致，但是GBK不是同一的标准，只是行业的技术规范。</p>\n<h1 id=\"unicode编码\">UNICODE编码</h1>\n<p>由于没有统一起来，各种编码方式层出不穷，各国间的编码方式也很难兼容。因此UNICODE就出现了，它被称为万国码或者统一码。</p>\n<p>UNICODE如今已经有了1114112个码位，，被划分成17个平面，每个平面容纳655356个码位。</p>\n<p>Unicode\n本身只规定了每个字符的数字编号是多少（即码位，或叫做UNICODE值），并没有规定这个编号如何存储，具体怎么存储有多种方式，也就UTF-8、UTF-16、UTF-32.</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014111416438.png\"\nalt=\"image-20221014111416438\" />\n<figcaption aria-hidden=\"true\">image-20221014111416438</figcaption>\n</figure>\n<h2 id=\"utf-32编码\">UTF-32编码</h2>\n<p>UTF-32采用定长4byte来编码字符，也就是每个字符有4byte长，它是直接将码位转换成4byte数据，这和UTF-8有区别。</p>\n<p>使用UTF-32进行存储会有存储空间浪费的问题，比如对于英文使用着来说，要存储“h”这个字符，使用ASCII编码只需要0x68一个byte就可以了，而使用UTF-32却仍需要0x00\n0x00 0x00 0x68四个字节，这样就造成了极大的存储空间浪费。</p>\n<p>因此UTF-32编码方式虽然简单，直接将码位存储为4byte，但却造成了严重的空间浪费。</p>\n<h2 id=\"utf-8编码\">UTF-8编码</h2>\n<p>UTF-8是另一种UNICODE的编码方式，并且相比UTF-32也更节省空间，因此是最常用的Unicode编码方式。</p>\n<p>1字节 0xxxxxxx 2字节 110xxxxx 10xxxxxx 3字节 1110xxxx 10xxxxxx\n10xxxxxx 4字节 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 5字节 111110xx\n10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 6字节 1111110x 10xxxxxx 10xxxxxx\n10xxxxxx 10xxxxxx 10xxxxxx\n同样以“hello中国”举例，我们来看看它按照UTF-8是怎样保存的。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014132653375.png\"\nalt=\"image-20221014132653375\" />\n<figcaption aria-hidden=\"true\">image-20221014132653375</figcaption>\n</figure>\n<p>可以看出，hello这几个字符被存储为68 65 6c 6c\n6f，每个字符存储为一个byte，这和ASCII编码方式是一致的。而“中”字被存储为E4\nB8 AD，其二进制表示为1110 0100 10111000\n10101101。如果吧1110和10这些前置信息去掉，那么我们可以得到其二进制序列为0100111000101101，其十六进制为4E\n2D，其就是“中”字的UNICODE值（也就是码位）。</p>\n<h1 id=\"锟斤拷的形成\">“锟斤拷”的形成</h1>\n<p>锟斤拷的形成主要是由于编辑者A使用GBK编码保存文本文件后，将此文本文件发送给其他用户B，而用户B按照UTF-8的格式打开并保存后，又将该文件发给了用户C，C重新用GBK编码打开文件就会得到很多很多的”锟斤拷“。下面我们仍然通过例子来说明。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014140132630.png\"\nalt=\"image-20221014140132630\" />\n<figcaption aria-hidden=\"true\">image-20221014140132630</figcaption>\n</figure>\n<p>首先是以GBK的编码保存文本。</p>\n<p>然后再用UTF-8打开文本并保存，可以看出UTF-8并不能识别以GBK编码保存的“中国”两字，对于UTF-8不能识别的字符，会自动用EF\nBF BD来替换，也就是对应左边出现的一个问号。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014140916470.png\"\nalt=\"image-20221014140916470\" />\n<figcaption aria-hidden=\"true\">image-20221014140916470</figcaption>\n</figure>\n<p>接着，我们将被UTF-8读取了并修改的文件重新按照GBK编码的方式打开。按照GBK编码的方式EF\nBF被解释成“锟”， BD EF被解释成“斤”， BF BD被解释成“拷”。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014140814843.png\"\nalt=\"image-20221014140814843\" />\n<figcaption aria-hidden=\"true\">image-20221014140814843</figcaption>\n</figure>\n<h1 id=\"烫烫烫和屯屯屯\">烫烫烫和屯屯屯</h1>\n<p>在Microsoft Visual\nstudio的Debug模式下，用户未初始化的栈内存会被系统初始化为0xcc，而GBK编码中“烫”字的编码正是0xcc\n0xcc。而未初始化的堆空间会被初始化成0xcd，而0xcd\n0xcd在GBK编码下对应的就是“屯”字。下面我们试着用例子来解释下。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014141641526.png\"\nalt=\"image-20221014141641526\" />\n<figcaption aria-hidden=\"true\">image-20221014141641526</figcaption>\n</figure>\n<figure>\n<img src=\"http://img.singhe.art/image-20221014142013935.png\"\nalt=\"image-20221014142013935\" />\n<figcaption aria-hidden=\"true\">image-20221014142013935</figcaption>\n</figure>\n","categories":["data_structure"],"tags":["encode","coding"]},{"title":"go导入自定义包","url":"/2022/04/08/go/go%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85/","content":"<blockquote>\n<p>本文参考<a\nhref=\"https://blog.csdn.net/deroy/article/details/123021040\">CSDN博客</a></p>\n</blockquote>\n<h1 id=\"环境\">环境</h1>\n<ul>\n<li>ubuntu18.04</li>\n<li>go 1.18</li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"项目结构\">项目结构</h1>\n<p><img src=\"http://img.singhe.art/architecture.png\" /></p>\n<h1 id=\"创建go项目\">创建go项目</h1>\n<p>创建一个项目目录<code>learn</code>，在<code>learn</code>目录下编辑<code>main.go</code>文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;learn/math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(math.Add(<span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"自定义包\">自定义包</h1>\n<p>在<code>learn</code>目录下创建<code>math</code>目录，在<code>math</code>目录下创建<code>math.go</code>文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> math</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a <span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sub</span><span class=\"params\">(a <span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a - b\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mul</span><span class=\"params\">(a <span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a * b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Div</span><span class=\"params\">(a <span class=\"type\">int</span>, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a / b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是：</p>\n<ol type=\"1\">\n<li>包目录下所有文件 <code>package</code>\n必须和目录名保持一致，例如<code>math</code>目录下所有包文件\n<code>*.go</code> 必须引用 <code>package math</code>.</li>\n<li>外部接口必须以大写字母开头，例如<code>Add()</code>,否则外部无法调用</li>\n</ol>\n<h1 id=\"导入自定义包\">导入自定义包</h1>\n<p>在main包里面导入自定义包，需通过mod命令初始化，将go项目添加到环境中去。</p>\n<p>打开终端，进入hello目录</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> mod init hello</span><br></pre></td></tr></table></figure>\n<p>此刻生成go.mod文件便可以自由导入自定义包而不会找不到包了</p>\n<p>main.go文件导入包格式如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;learn/math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tfmt.Println(math.Add(<span class=\"number\">1</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>go mod init\nlearn的时候将learn目录导入到go环境查找目录中去了，所以导入的库目录需以\"learn/“为查找路径，math目录在learn目录下，查找路径便是\"learn/math”;</p>\n","categories":["go"],"tags":["go语言","编程"]},{"title":"GFS","url":"/2022/05/31/database/GFS/","content":"<h1 id=\"系统架构\">系统架构</h1>\n<figure>\n<img src=\"http://img.singhe.art/image-20220902151055829.png\"\nalt=\"image-20220902151055829\" />\n<figcaption aria-hidden=\"true\">image-20220902151055829</figcaption>\n</figure>\n<p>在GFS中，一个文件由多个chunk组成，每一个chunk大小都是64MB，而一个文件的chunk可能不在同一个chunkserver上，也就是分布在不同的chunkserver上。</p>\n<p>GFS采用的是单主架构，client通过filename和offset向master索要chunk信息，master返回对应的chunk在哪个chunkserver上，然后client再和chunkserver交互。</p>\n<p>每个chunkserver直接使用linux的文件系统。</p>\n<span id=\"more\"></span>\n<h1 id=\"master数据结构\">master数据结构</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename -&gt; <span class=\"function\">array of chunk <span class=\"title\">handles</span> <span class=\"params\">(Disk)</span></span></span><br><span class=\"line\"><span class=\"function\">handle -&gt; list of chunkservers</span></span><br><span class=\"line\"><span class=\"function\">handle -&gt; version <span class=\"title\">number</span> <span class=\"params\">(Disk)</span></span></span><br><span class=\"line\"><span class=\"function\">handle -&gt; primary</span></span><br><span class=\"line\"><span class=\"function\">handle -&gt; lease expiration</span></span><br><span class=\"line\"><span class=\"function\">Log, <span class=\"title\">Checkpoint</span> <span class=\"params\">(Disk)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>filename -&gt; array of chunk handles保存的是文件名到chunk块号(64\nbits)的映射，即记录每个文件对应的所有的chunk。</li>\n<li>handle -&gt; list of chunk\nservers。每一个chunk有多个副本，master需要记录每个chunk对应的副本在哪个chunkserver上。</li>\n<li>handle -&gt; version number。version\nnumber记录当前chunk最新的版本号，由此来判断哪个chunkserver上的数据是最新的。</li>\n<li>handle -&gt; lease\nexpiration。GFS通过lease(租期)来分配primary和secondary。master指定primary并分配lease，lease过期的时间是60s，在此期间primary可以将client的指令组织好顺序发送给secondary。</li>\n</ul>\n<blockquote>\n<p>以下部分转载自<a\nhref=\"https://blog.csdn.net/kdb_viewer/article/details/116111241\">https://blog.csdn.net/kdb_viewer/article/details/116111241</a></p>\n</blockquote>\n<h1 id=\"一致性模型\">一致性模型</h1>\n<p>gfs的数据一致性是针对多个chunk\nserver保存的相同文件副本来说的，文件按照每64MB一个chunk的形式组织，一个文件可能占用多个chunk，每个chunk都复制多份保存在不同chunk\nserver上，默认副本数量是3。对数据库有一定了解的同学对事务的一致性级别一定不会陌生，gfs对于文件的修改操作和数据库事务有相通之处，对于数据修改后文件的一段数据(region)，定义如下两个一致性级别：</p>\n<ul>\n<li>一致的(consistency)：所有client无论从哪个副本读一个region，读到的都是同样的内容</li>\n<li>已定义的(defined)：region一致，且client能看到写入操作的全部内容</li>\n</ul>\n<p>下面总结了所有操作的一致性级别：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th></th>\n<th>任意位置写</th>\n<th>记录追加</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>串行成功</td>\n<td>已定义</td>\n<td>已定义，部分不一致</td>\n</tr>\n<tr class=\"even\">\n<td>并行成功</td>\n<td>一致未定义</td>\n<td>已定义，部分不一致</td>\n</tr>\n<tr class=\"odd\">\n<td>失败</td>\n<td>不一致</td>\n<td>不一致</td>\n</tr>\n</tbody>\n</table>\n<p>这里对写操作和记录追加两种修改方式分别做解释</p>\n<p>对写操作，串行成功和失败的情况都很好理解，串行成功是最严格的一致性要求，成功后数据一定是一致的；gfs对失败操作没有类似数据库事务的回滚操作，可能在一个副本写入了数据其他副本没写入，或者每个副本写入的数据长度不一样，从而多副本之间的数据是不一致的。这里主要解释下并行成功的情况。并行写的情况发生在多个client写同一个文件区域，例如两个client同时写一个文件alibaba.txt，client\nA从文件偏移1000的位置开始写入100个字节，client\nB从文件偏移1050的位置开始写入100个字节，这样两个client的写入有50字节冲突，如图：</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tkYl92aWV3ZXI=,size_16,color_FFFFFF,t_70.png\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>并行成功不知道1050到1100区间写入的是谁的数据，可能是A也可能是B，甚至可能这段区间混杂着两者的写入，比如对1050位置的一个字节，A先写入成功，然后B写入成功把A刚写入的结果覆盖了，而对1051位置的字节相反，A覆盖了B的写入。物理上这个region每个字节在所有副本上都相同，但是无法读取一个client写入的全部数据，因此这里造成的结果是undefined，也就是一致但未定义。换个角度来说，这个region的数据不是一个可以合理解释的记录，虽然在物理上具有一致性但是这个region的数据是无法使用的，这也就是「未定义」这个一致性级别的名字来源。</p>\n<p>对记录追加操作，失败时不一致不做过多解释了，着重解释下成功操作导致的「已定义，但是部分不一致」这个结果。第一眼看可能有些费解，因为「已定义」是比「一致」更高级别的一致性要求，怎么会出现「已定义但是不一致性」这种结果呢，要理解这个要从gfs提供的记录追加方式说起。gfs保证成功的记录追加在多个副本上一定是原子的、最终一致的、自定义偏移的。这里举一个例子帮助理解，一个client在alibaba.txt文件上做记录追加，假设alibaba.txt当前有100个字节，因此本次偏移从100位置开始，追加内容为\"hello\"，此文件chunk有3副本，如图：</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tkYl92aWV3ZXI=,size_16,color_FFFFFF,t_70-20220902153733235.png\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>此时该client在第一个副本成功，在第二个副本和第三个副本都写入了一部分内容，此时若另一个client也发起了对alibaba.txt的记录追加，内容为“world”，那么会造成如下结果：</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tkYl92aWV3ZXI=,size_16,color_FFFFFF,t_70-20220902153801154.png\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>gfs的原子追加保证第一个client发现了在第二个副本自己的追加失败了，因此“hello”的追加会重新发起，第二个client也同样，直到最终两个client的写入都会成功，如下：</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tkYl92aWV3ZXI=,size_16,color_FFFFFF,t_70-20220902153817667.png\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>gfs对成功的记录追加会返回一个偏移，这个偏移是gfs自己选择的，经过可能多次重试造成的结果。对于第一个client，追加成功后可以得知自己在111偏移位置成功写入了“hello”内容，对第二个client，同样在106偏移位置成功写入了“world”内容。从上图可以明显发现，从100到106位置的字节是不一致的，gfs并不尝试在这种被抛弃的region上强制多副本同步，这也就是「已定义但是不一致」这个看起来矛盾的一致性级别的来源。</p>\n<h1 id=\"系统交互\">系统交互</h1>\n<figure>\n<img src=\"http://img.singhe.art/image-20220902154256623.png\"\nalt=\"image-20220902154256623\" />\n<figcaption aria-hidden=\"true\">image-20220902154256623</figcaption>\n</figure>\n<p>master会选择chunk的一个副本为主chunk并建立租约，租期内，主chunk对chunk的所有操作进行序列化，chunk的所有副本都按照这个顺序执行。流程如下：</p>\n<p>1-2：client向master询问所有chunk副本位置和主chunk信息</p>\n<p>3-6：client向chunk\nserver推送信息，控制流和数据流分离，控制流发给主chunk，数据流顺序推送，目的是使用到100%的网卡带宽，在这种线性管道推送方式下，\n传送B字节到R个副本的时间为B/T +\nLR，其中T是网络吞吐，L是两台机器间的网络延迟，一般小于1ms可以忽略不计。例如，在100Mbps的网络上传输1MB数据，花费80ms</p>\n<p>7：主chunk返回client，任何一个副本错误都会认为失败，此时各副本被修改的region处于不一致状态，client负责重试3-6的步骤</p>\n<h1 id=\"快照\">快照</h1>\n<p>gfs提供的快照机制是标准的COW（copy-on-write）。具体实现是，client发送快照命令到master，master首先取消当前chunk的租约，保证后续所有对该chunk的访问都通过master进行，然后在文件名空间中创建快照文件，和原始文件关联到同一个chunk，记录该chunk的引用计数为2。当有修改该chunk的操作到来，master发现chunk计数大于2，命令chunk\nserver对该chunk创建副本，此后该chunk和原始chunk就可以分开独立访问了。</p>\n<h1 id=\"master节点管理\">master节点管理</h1>\n<h2 id=\"文件锁\">文件锁</h2>\n<p>首先介绍下gfs的文件名空间。和unix文件系统不同，gfs的文件名空间就是一个全路径到元数据的映射表，通过前缀压缩的形式全部在内存中维护，因此没有可以列出一个目录下全部文件的功能，也没有软硬链接的概念。前缀压缩的文件名空间构成了一个树形结构，每个绝对路径对应树形结构中的一个节点，每个节点都有一个关联的读写锁。看个例子：</p>\n<figure>\n<img src=\"http://img.singhe.art/20210424234651586.png\" alt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这里leaf节点对应的文件名为/d1/d2/leaf，对leaf进行操作，需要获取d1、d2的读锁，和leaf的读写锁。获取d1和d2的读锁是为了防止操作过程中父目录丢失。所有获取锁的操作都从根节点进行以防止死锁。</p>\n<h2 id=\"文件删除\">文件删除</h2>\n<p>gfs使用惰性文件删除策略。删除指令发送到master后，master将文件重命名为一个包含删除时间戳的隐藏文件名。master节点有例行扫描文件名空间任务，发现超过3天的隐藏文件才发起物理删除，在此期间都可以撤销删除操作以防止误删除。这样设计有如下几个原因：</p>\n<ul>\n<li>若实时删除，那么master发给chunk\nserver的删除消息可能丢失，master需要维护重试机制，相比之前惰性删除更一致、更可靠</li>\n<li>惰性策略下实际物理删除发生在master后台定时任务，操作被批量执行，开销分散，master的cpu使用更平缓</li>\n<li>为人为操作导致的误删除提供兜底</li>\n</ul>\n<h2 id=\"过期失效的副本检测\">过期失效的副本检测</h2>\n<p>chunk多副本存储在多个chunk server上，可能出现的一种情况是，一个chunk\nserver短暂失联，导致丢失了client对一个chunk的最新修改，针对这种场景，master对每个chunk维护一个版本号，每次和一个chunk建立租约确立主chunk时，都将版本号+1，并通知所有副本，同时client也会在查询chunk位置信息时获取这个信息。失联的chunk\nserver上，chunk版本号不会改变，当chunk\nserver重连向master报告时master会发现过期失效的副本，同时若client向此chunk\nserver读数据也可以通过版本号判断过期。</p>\n<h1 id=\"高可用\">高可用</h1>\n<p>这里解释gfs实现高可用的技术手段。</p>\n<ul>\n<li>服务快速拉起，master和chunk server都设计成秒级启动</li>\n<li>chunk复制策略，保证数据不丢</li>\n</ul>\n<p>master节点建设主备，client操作在主master和从master全部落盘后才返回，外部监控进程监控master状态并在master故障后选择新的master升主</p>\n<h1 id=\"数据完整性\">数据完整性</h1>\n<p>由于gfs的原子追加操作会导致「已定义但是不一致」的状态，数据在byte-wise级别本身就不是一致的，因此chunk服务数据完整性无法通过跨chunk\nserver方案实现，只能在chunk server内部检查。chunk\nserver将chunk切成64KB大小的块，并为每个块维护一个32位的checksum。对读操作，数据返回client之前会检查checksum。对写操作，需要对写范围有覆盖的第一个64KB块和最后一个先进行校验，防止原来存在损坏的数据被本次写隐藏了，然后进行实际写入并重新计算checksum。chunk\nserver空闲时会对所有chunk做整体扫描，尤其针对一个不活动的chunk，防止master认为chunk已经有足够的副本数量了但是实际上副本内容已经损坏。</p>\n","categories":["database"],"tags":["MIT6.824"]},{"title":"SLOG","url":"/2022/05/31/database/SLOG/","content":"<h1 id=\"背景\">背景</h1>\n<h2 id=\"geo-replicated-dbms\">Geo-replicated DBMS</h2>\n<p>SLOG假设一个数据库系统是跑在横跨世界各地的数据中心的系统，这种系统我们通常称之为Geo-replicated\nDatabase Management\nSystem(DBMS)，它将数据复制多份在各地的资料中心中。</p>\n<span id=\"more\"></span>\n<p>下图展示了一个分布在三个地区的数据库系统。通常一个数据中心会持有一份完整的数据，然后每个数据中心中的数据会再切分成多个不相交的partition。在下图之中，一共有三分备份(replica)，然后每个数据中心内有三个partition。数据中心之间会需要时常同步数据来保证数据的一致性。</p>\n<figure>\n<img src=\"http://img.singhe.art/geo-dbms.png\"\nalt=\"Geo-replicated DBMS\" />\n<figcaption aria-hidden=\"true\">Geo-replicated DBMS</figcaption>\n</figure>\n<p>跨区域备份的架构主要有两个目的：</p>\n<ul>\n<li>High\nAvailable：因为数据有多个备份，当某个备份无法服务的时候就可以由其他备份提供服务。</li>\n<li>Low Read Latency：\n可以优先从地理位置较近的数据中心更快地读取需要的数据。</li>\n</ul>\n<h2 id=\"motivation\">motivation</h2>\n<p>分布式数据库系统有三大目标：</p>\n<ul>\n<li>Strict Serializablity</li>\n<li>Low Latency</li>\n<li>High Throughput</li>\n</ul>\n<p>到SLOG为止，这时目前尚未有人能够完美同时解决的问题。</p>\n<p>例如，要实现strict\nserializability，通常需要通过协调(coordination)来得到全局的事务顺序，但这会导致write\nlatency较高。如果使用weak consistency（如snapshot\nisolation)能够同时保证low latency和high throughput，但是又不是strict\nserializability。</p>\n<h2 id=\"论文发现\">论文发现</h2>\n<p>SLOG依赖了两个主要发现来达成以上目标：</p>\n<ol type=\"1\">\n<li>使用者通常都会在同一个地区（数据中心）存取自己的数据</li>\n<li>并非所有transaction之间都一定要有global\norder，不冲突的transaction之间的顺序可以排序。</li>\n</ol>\n<p>第1点说的就是数据局部性问题，用户的写入和读取大多都在同一个数据中心。</p>\n<p>第2点举例来说，如果有两个事务T1、T2，T1修改数据A，T2修改数据B，那么T1、T2谁先谁后都不影响结果。因此这两个transaction无论如何排序，都不影响serializability。</p>\n<h1 id=\"slog概念\">SLOG概念</h1>\n<h2 id=\"home-region\">Home Region</h2>\n<p>每一组 records 可能会被跨数据中心复制很多份 replica，但是只有一份\nreplica 是主要的 (primary)。 存放这个主要的 replica 的区域就叫做 home\nregion。 这个时候，一般马上就会想到 master-slave 架构。 那 SLOG\n跟那种架构又有什么不同呢？ 主要差异是，在常见的 master-slave\n架构之中，replica 通常是以整个 database 作为单位，其中 primary replica\n一定是整组 database 放在同一个区域中。但是 SLOG\n提出的架构是以<strong>一组 records</strong> 作为单位。也就是说，可能有些\nrecords 的 primary replica 在台湾，有些 records 在美国。\n如下图所示，每个方块代表一组 records。 黑色代表 primary。 A 组的 home\nregion 是 region 1，B 组则是在 region 2。</p>\n<figure>\n<img src=\"http://img.singhe.art/home-region.png\" alt=\"Home Region\" />\n<figcaption aria-hidden=\"true\">Home Region</figcaption>\n</figure>\n<p>还需要注意的是在一个partition（一个物理机器）中，并不是所有的records都是primary，如下图所示。</p>\n<figure>\n<img src=\"http://img.singhe.art/sortledton-2.png\" alt=\"sortledton-2\" />\n<figcaption aria-hidden=\"true\">sortledton-2</figcaption>\n</figure>\n<p>那么怎么得到一个record的home-region呢?SLOG在每个region设立一个LookupMaster\nindex，它保存的是record id到record metadata的映射，而record\nmeta由两部分组成，第一部分是该record的当前home-region，第二部分是该record的home-region改变次数（后面有用）。</p>\n<p>每个Record中也含有这个metadata，并且当record的metadata被更新的时候，更新LookUpMaster\nIndex。</p>\n<p>SLOG将事务分成两类：single-home transaction和multi-home\ntransaction</p>\n<h2 id=\"single-home-transactions\">Single-home Transactions</h2>\n<p>如果一个事务存取的数据的home\nregion都在同一个region，这种transaction被称作single-home\ntransaction。如下图所示，T1、T2、T3、T4都是single-home transaction。</p>\n<p>对于single-home transaction，我们只需要在home\nregion内做冲突处理，其他数据中心的replica只要确保有复制到home\nregion的结果就好。因此SLOG在home\nregion完成transaction之后，就会把log复制到slave。一旦有N个数据中心回复（N由使用者设定），就可以回复client该transaction完成。如此以来，就可以省下跨数据中心的coordination带来的多个round-trip\ntime。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221010230820560.png\"\nalt=\"image-20221010230820560\" />\n<figcaption aria-hidden=\"true\">image-20221010230820560</figcaption>\n</figure>\n<p>举个例子，T1、T2都只访问数据A，而数据A的home region是region\n0，因此T1、T2会在Region0上进行冲突处理（client发送transaction到最近的region，即使被发送到了region1，也会被转发到region\n0上）。T3，T4被送到region\n1上进行冲突处理。对于single-home类型的transaction，它首先写日志到local\nlog，当local log收集到一批事务日志后，通过paxos发给其他region。global\nlog是全局的事务顺序，它既包含本地local\nlog的日志，也包含从其他region接收到的log，因此每个region的global\nlog顺序可能不一致（但是T1一定在T2之前，T3一定在T4之前）。但是因为它们都是single-home\ntransaction，即使顺序不一致也能保证结果的一致性，因为它们的存取的数据不相交（这也就是论文发现的第2点）。</p>\n<blockquote>\n<p>Batch 0-1 0代表的region id，1代表batch id</p>\n</blockquote>\n<p>global log的顺序确定好之后，region只需要从global\nlog取log然后执行就可以了。</p>\n<h2 id=\"multi-home-transactions\">multi-home transactions</h2>\n<p>如果事务都是single-home的，那就皆大欢喜了，可事实却肯定并非如此。如果一个transaction访问的数据home-region不止一个，那么就称为multi-region\ntransaction。如果figure 3的T2不仅要访问A，还要访问B，那么按照figure\n3的方式得到的global\nlog是有问题的，会导致region间数据不一致性。比如region0和region1对数据B最后写入的是T4，而region2最后写入的是T2，导致region0和region2，以及region1和region2的状态不一致。</p>\n<p>对于multi-home transaction的处理，我们可以分为multi-home\ntransaction跟multi-home transaction之间的冲突处理，以及multi-home\ntransaction跟single-home transaction之间的冲突处理。</p>\n<h3\nid=\"multi-home-transaction-跟multi-home-transaction之间的冲突处理\">multi-home\ntransaction 跟multi-home transaction之间的冲突处理</h3>\n<p>SLOG采用deterministic database的概念，在一开始先把所有 multi-home\ntransactions 通过一个 total ordering protocol 进行排序，确定了这些\ntransaction 的 global order 后，再送到 deterministic execution engine\n执行，以确保 consistent 的结果。</p>\n<p>如下图，Tx G.1 与 Tx G.2 无论送到哪个 region，都会被强制送进 total\nordering layer 进行全域的排序之后，再送到下面的系统开始执行。</p>\n<figure>\n<img src=\"http://img.singhe.art/multi-home-1.png\"\nalt=\"Multiple Home - Total Oredering\" />\n<figcaption aria-hidden=\"true\">Multiple Home - Total\nOredering</figcaption>\n</figure>\n<p>只要保证了事务的全局顺序，那么multi-home transaction和multi-home\ntransaction之间的就完成了并发冲突。</p>\n<h2\nid=\"multi-home-transaction跟single-home-transaction之间的冲突处理\">multi-home\ntransaction跟single-home transaction之间的冲突处理</h2>\n<p>上述的方案能够结果multi-home和multi-home之间的冲突，但是解决不了mutli-home和single-home之间的冲突。</p>\n<figure>\n<img src=\"http://img.singhe.art/mh-mp-2.png\" alt=\"mh-mp-2\" />\n<figcaption aria-hidden=\"true\">mh-mp-2</figcaption>\n</figure>\n<p>上图中T1和T3是single-home transaction，而T2和T4是multi-home\ntransaction。从上图可以看出multi-home和multi-home\ntransaction间有序（T2在T4前面），但是和single-home\ntransaction间却导致了乱序，这也会导致region间数据不一致性问题。如何解决？加锁。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221011001507539.png\"\nalt=\"image-20221011001507539\" />\n<figcaption aria-hidden=\"true\">image-20221011001507539</figcaption>\n</figure>\n<p>figure4所示，T1、T3、T4为single-home，T2为multi-home\ntransaction。T2在total order\nmodule排序出来后，会生成T2<sub>0</sub>和T2<sub>1</sub>两个事务（因为T2涉及两个home\nregion，需要为每一个region都生成一个），这两个事务叫做LockOnlyTxn。T2<sub>0</sub>用来锁住数据项A，T2<sub>1</sub>用来锁住数据项B。single-home\ntransaction对数据读取的时候也需要进行加锁，而multi-home\ntransaction（图中没有画出，我把它称作T2，它出现在global\nlog的任何地方都不影响数据一致性，不相信的话可以举个例子）要执行的时候，必须拿到所有的锁（T2<sub>0</sub>和T2<sub>1</sub>执行）才能够执行，否则会阻塞。</p>\n<h2 id=\"home-region的更换\">home-region的更换</h2>\n<p>client发送的transaction是发给最近的region，但是此region可能不是home-region，因此这个region会将这个事务发送给home-region。如下图所示。事务T1存取B，它被client发送给了T1，但是T1要访问的数据B的home-region是region1，因此T1被转发给region1.</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221011003542954.png\"\nalt=\"image-20221011003542954\" />\n<figcaption aria-hidden=\"true\">image-20221011003542954</figcaption>\n</figure>\n<p>但是这种转发的次数多了肯定影响性能，因此我们希望设定一个阈值（比如region0连着三次都在转发），那么我们希望把B的home-region变更到region0，充分的利用局部性原理（也就是论文发现的第1点），论文把这种行为称为remaster。</p>\n<p>但是简单的remaster也会导致region间数据的不一致性。例如在上图中，事务T1、T2、T3都有存取数据B，T1被转发给region1，而T<sub>remaster</sub>事务要将数据B的home-region改为region0。当remaster事务执行后，home\nregion改变了，那么T3的home region就不应该在region\n1了，而应该是region0，所以T3\nabort，并得到T3<sub>new</sub>，发送给region0。由此得到的global\nlog如图figure 5所示。</p>\n<p>那么这么得到的global\nlog就会导致region间的不一致，region0和region1的事务顺序是T1、T2、T3，而region2的事务顺序是T1、T3、T2。</p>\n<h1\nid=\"remaster导致的不一致性解决方案\">remaster导致的不一致性解决方案</h1>\n<p>为了解决remaster导致的region间数据不一致性问题，我们通过record的metadata中的counter（也就是该record的home-region被更改了几次）来解决。我们通过举个例子来理解。</p>\n<p>当事务T被发送个第一个region时（比如T1发给region0），region0首先通过LookUpMaster查找该record的metadata，并将此metadata信息插入到事务中。因此T1可以表示为T1(1,0)，1代表它的当前home\nregion为1，0表示home-region改变了0次。类似的，T2(1,0)，T3(1,0)，T3new(0,1)。</p>\n<p>当我们要对该事务事务涉及的数据项上锁时，会将事务中的数据项counter和region中数据项的metadata中的counter进行比较。如果前者更大，那么说明本region还没有处理remaster请求，因此需要阻塞该事务等到remaster请求被执行后再换行。如果后者更大，那么说明LookupMaster\nIndex中的映射是stale的，本事务应该abort。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221011140318225.png\"\nalt=\"image-20221011140318225\" />\n<figcaption aria-hidden=\"true\">image-20221011140318225</figcaption>\n</figure>\n<h1 id=\"实验结果对比\">实验结果对比</h1>\n<h2 id=\"为什么slog吞吐率低于calvin\">为什么slog吞吐率低于Calvin？</h2>\n<p>导致slog吞吐率比calvin低最主要的原因是multi-home事务的存在，在calvin中没有multi-home的概念，因此calvin不受multi-home的影响。</p>\n<p>xxxxxxxxxx /<em>client_tcp.c</em>/#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;#include&lt;unistd.h&gt;#include&lt;arpa/inet.h&gt;#include&lt;sys/socket.h&gt;​int\nmain(){ //创建套接字 int sock = socket(AF_INET, SOCK_STREAM, 0);​\n//服务器的ip为本地，端口号1234 struct sockaddr_in serv_addr;\nmemset(&amp;serv_addr, 0, sizeof(serv_addr)); serv_addr.sin_family =\nAF_INET; inet_pton(AF_INET, \"127.0.0.1\", &amp;serv_addr.sin_addr);\nserv_addr.sin_port = htons(1234); //向服务器发送连接请求 connect(sock,\n(struct sockaddr*)&amp;serv_addr, sizeof(serv_addr)); //发送并接收数据\nchar buffer[40]; printf(\"Please write:\"); scanf(\"%s\", buffer);\nwrite(sock, buffer, sizeof(buffer));​ memset(buffer, 0, sizeof(buffer));\nread(sock, buffer, sizeof(buffer) - 1); printf(\"Serve send: %s\",\nbuffer);​ //断开连接 close(sock);​ return 0;}c</p>\n<p>但是当multi-partition（跨分片）事务数量变多的时候，calvin和slog的吞吐率差距会变小，因为calvin对于跨分片的事务也需要进行协调带来额外的开销，而slog在处理multi-home的时候顺带也解决了（部分）multi-partition的冲突。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20221011021949992.png\"\nalt=\"image-20221011021949992\" />\n<figcaption aria-hidden=\"true\">image-20221011021949992</figcaption>\n</figure>\n<p>如下图所示，T1和T2既是multi-home\ntransaction又是multi-partition事务，calvin对于multi-partion事务需要做coordination，而slog需要对multi-home事务做coordination，因此当multi-partition的比例较高时，slog和calvin的差距就不是很明显。</p>\n<figure>\n<img src=\"http://img.singhe.art/mh-mp.png\" alt=\"mh-mp\" />\n<figcaption aria-hidden=\"true\">mh-mp</figcaption>\n</figure>\n<h2 id=\"为什么slog延迟比calvin低\">为什么slog延迟比calvin低？</h2>\n<figure>\n<img src=\"http://img.singhe.art/image-20221011024804253.png\"\nalt=\"image-20221011024804253\" />\n<figcaption aria-hidden=\"true\">image-20221011024804253</figcaption>\n</figure>\n<p>上图曲线越靠近左边代表延迟越低。可以看出slog延迟在multi-home比例很低（也就是single-home\ntransaction比例很高）的时候明显优于calvin。因为对于slog来说，single-home\ntransaction每个record有它的master，只要transaction的日志写入到master（home-region）上该事务就可以返回了，然后异步地使用paxos同步日志给slave\nregion，因此延迟比较低。而multi-home事务越多，对slog的latency影响越大。</p>\n<h1 id=\"参考文献\">参考文献</h1>\n<ol type=\"1\">\n<li>https://www.slmt.tw/blog/2019/10/20/paper-slog/</li>\n<li>Thomson, Alexander, and Daniel J. Abadi. “The case for determinism\nin database systems.” Proceedings of the VLDB Endowment 3.1-2 (2010):\n70-80.</li>\n</ol>\n","categories":["database"]},{"title":"YCSB测试Riak数据库","url":"/2022/07/01/database/YCSB%E6%B5%8B%E8%AF%95Riak%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"<h1 id=\"前言\">前言</h1>\n<p>笔者踩了许多坑，最大的两个问题是Riak必须配置3个节点，第二个问题是得手动修改jar包才能进行配置。至于用Python和Java连接Riak，笔者有时间会单独出一篇教程。</p>\n<h1 id=\"环境\">环境</h1>\n<p>CentOS 7.6 64位</p>\n<p>若未有特殊说明，所有操作均在<code>root</code>下进行操作。</p>\n<span id=\"more\"></span>\n<h1 id=\"安装riak\">安装Riak</h1>\n<blockquote>\n<p>参考<a\nhref=\"https://cloud.tencent.com/developer/article/1811945\">Riak -\n安装运维篇</a></p>\n</blockquote>\n<p>安装必要的软件和依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install pam-devel gcc gcc-c++ glibc-devel make ncurses-devel openssl-devel autoconf git</span><br></pre></td></tr></table></figure>\n<p>之后，需要下载编译ErLang。因为Riak是Erlang编写的，我们从源代码编译Riak安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://s3.amazonaws.com/downloads.basho.com/erlang/otp_src_R16B02-basho8.tar.gz</span><br><span class=\"line\">tar zxvf otp_src_R16B02-basho8.tar.gz</span><br><span class=\"line\">cd OTP_R16B02_basho8/</span><br><span class=\"line\">./otp_build autoconf</span><br><span class=\"line\">CFLAGS=&quot;-DOPENSSL_NO_EC=1&quot; ./configure &amp;&amp; make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>\n<p>安装好后，输入<code>erl</code>， 可以看到</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">erl</span></span><br><span class=\"line\">Erlang R16B02_basho8 (erts-5.10.3) [source] [64-bit] [smp:32:32] [async-threads:10] [hipe] [kernel-poll:false]</span><br><span class=\"line\"></span><br><span class=\"line\">Eshell V5.10.3  (abort with ^G)</span><br><span class=\"line\"><span class=\"meta prompt_\">1&gt;</span></span><br></pre></td></tr></table></figure>\n<p>安装Riak，编译安装3个Riak实例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://s3.amazonaws.com/downloads.basho.com/riak/2.1/2.1.4/rhel/6/riak-2.1.4-1.el6.src.rpm</span><br><span class=\"line\">rpm -ivh riak-2.1.4-1.el6.src.rpm</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，根据<a\nhref=\"https://riak.docs.hw.ag/riak/kv/latest/configuring/strong-consistency/#minimum-cluster-size\">Riak文档</a>所说，应该至少有3个节点才能保证Riak是可用的，否则用YCSB进行测试的时候会出现<code>RiakResponseException: unavailable</code>的错误。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20220619101547044.png\"\nalt=\"image-20220619101547044\" />\n<figcaption aria-hidden=\"true\">image-20220619101547044</figcaption>\n</figure>\n<p>这之后会把源代码文件夹安装到对应的rpm安装位置，find下即可，我这里是<code>/root/rpmbuild/SOURCES/riak-2.1.4.tar.gz</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /root/rpmbuild/SOURCES/riak-2.1.4.tar.gz ./</span><br><span class=\"line\">tar zxvf riak-2.1.4.tar.gz</span><br><span class=\"line\">cd riak-2.1.4</span><br><span class=\"line\">make devrel DEVNODES=3 # 节点数量至少为3</span><br></pre></td></tr></table></figure>\n<p>make的时候会下载一些东西（比如solr等），需要耐心些。安装完成之后5个实例都都在当前目录的dev文件夹下。tree一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">tree -L 2 dev/</span></span><br><span class=\"line\">dev/</span><br><span class=\"line\">├── dev1</span><br><span class=\"line\">│   ├── bin</span><br><span class=\"line\">│   ├── data</span><br><span class=\"line\">│   ├── erts-5.10.3</span><br><span class=\"line\">│   ├── etc</span><br><span class=\"line\">│   ├── lib</span><br><span class=\"line\">│   ├── log</span><br><span class=\"line\">│   └── releases</span><br><span class=\"line\">├── dev2</span><br><span class=\"line\">│   ├── bin</span><br><span class=\"line\">│   ├── data</span><br><span class=\"line\">│   ├── erts-5.10.3</span><br><span class=\"line\">│   ├── etc</span><br><span class=\"line\">│   ├── lib</span><br><span class=\"line\">│   ├── log</span><br><span class=\"line\">│   └── releases</span><br><span class=\"line\">├── dev3</span><br><span class=\"line\">│   ├── bin</span><br><span class=\"line\">│   ├── data</span><br><span class=\"line\">│   ├── erts-5.10.3</span><br><span class=\"line\">│   ├── etc</span><br><span class=\"line\">│   ├── lib</span><br><span class=\"line\">│   ├── log</span><br><span class=\"line\">│   └── releases</span><br></pre></td></tr></table></figure>\n<p>我们先启动一个实例，dev1，首先修改下配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd dev/dev1</span><br><span class=\"line\">vim ./etc/riak.conf</span><br></pre></td></tr></table></figure>\n<p>主要修改：</p>\n<ul>\n<li>nodename = dev1@127.0.0.1</li>\n<li>listener.http.internal = 127.0.0.1:10018</li>\n<li>listener.protobuf.internal = 127.0.0.1:10017</li>\n<li>storage_backend = leveldb</li>\n<li>strong_consistency = on</li>\n</ul>\n<p>这三项为自己实际要绑定的IP即可，若是在同一台服务器上运行YCSB和Riak，保持默认的127.0.0.1即可；若是一台服务器运行Riak，另一台服务器运行YCSB，则需要将IP设置为Riak服务器的IP。\n对于<code>dev2</code>和<code>dev3</code>进行同样的修改，之后启动：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./bin/riak start</span><br></pre></td></tr></table></figure>\n<p>启动成功后，查看状态和集群状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev1@127.0.0.1     |valid |  up   |100.0|  --   |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br></pre></td></tr></table></figure>\n<p>再配置两个node，分别是dev2和dev3文件夹下的，同样只是修改那三个属性的IP即可，端口已经自动写好了，不用改，之后启动。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak start</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev2@127.0.0.1     |valid |  up   |100.0|  --   |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev3/bin/riak start</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev3/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev3@127.0.0.1     |valid |  up   |100.0|  --   |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br></pre></td></tr></table></figure>\n<p>之后，开始配置一个三个Riak\nnode的集群。首先，将dev1@127.0.0.1和dev2@127.0.0.1组成一个集群。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak-admin cluster <span class=\"built_in\">join</span> dev1@127.0.0.1</span></span><br><span class=\"line\">Success: staged join request for &#x27;dev2@127.0.0.1&#x27; to &#x27;dev1@127.0.0.1&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak-admin cluster plan</span></span><br><span class=\"line\">=============================== Staged Changes ================================</span><br><span class=\"line\">Action         Details(s)</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">join           &#x27;dev2@127.0.0.1&#x27;</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NOTE: Applying these changes will result in 1 cluster transition</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##############################################################################</span></span></span><br><span class=\"line\">                         After cluster transition 1/1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##############################################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">================================= Membership ==================================</span><br><span class=\"line\">Status     Ring    Pending    Node</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">valid     100.0%     50.0%    &#x27;dev1@127.0.0.1&#x27;</span><br><span class=\"line\">valid       0.0%     50.0%    &#x27;dev2@127.0.0.1&#x27;</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Valid:2 / Leaving:0 / Exiting:0 / Joining:0 / Down:0</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: Not all replicas will be on distinct nodes</span><br><span class=\"line\"></span><br><span class=\"line\">Transfers resulting from cluster changes: 32</span><br><span class=\"line\">  32 transfers from &#x27;dev1@127.0.0.1&#x27; to &#x27;dev2@127.0.0.1&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak-admin cluster commit</span></span><br><span class=\"line\">Cluster changes committed</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev1@127.0.0.1     |valid |  up   | 87.5|  50.0 |</span><br><span class=\"line\">|     dev2@127.0.0.1     |valid |  up   | 12.5|  50.0 |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev1@127.0.0.1     |valid |  up   | 75.0|  50.0 |</span><br><span class=\"line\">|     dev2@127.0.0.1     |valid |  up   | 25.0|  50.0 |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev1@127.0.0.1     |valid |  up   | 62.5|  50.0 |</span><br><span class=\"line\">|     dev2@127.0.0.1     |valid |  up   | 37.5|  50.0 |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev2/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev1@127.0.0.1     |valid |  up   | 50.0|  --   |</span><br><span class=\"line\">|     dev2@127.0.0.1     |valid |  up   | 50.0|  --   |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br></pre></td></tr></table></figure>\n<p>分为三步，先join某一个集群（只用填集群中一个节点的名字即可），之后plan，看下分布和需要的移动操作（这些在commit之后riak会自己做），最后确认无误，则commit。\n对于dev3@127.0.0.1也是一样：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev3/bin/riak-admin cluster <span class=\"built_in\">join</span> dev1@127.0.0.1</span></span><br><span class=\"line\">Success: staged join request for &#x27;dev3@127.0.0.1&#x27; to &#x27;dev1@127.0.0.1&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev3/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+-------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status | avail |ring |pending|</span><br><span class=\"line\">+------------------------+-------+-------+-----+-------+</span><br><span class=\"line\">|     dev3@127.0.0.1     |joining|  up   |  0.0|  --   |</span><br><span class=\"line\">| (C) dev1@127.0.0.1     | valid |  up   | 50.0|  --   |</span><br><span class=\"line\">|     dev2@127.0.0.1     | valid |  up   | 50.0|  --   |</span><br><span class=\"line\">+------------------------+-------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev3/bin/riak-admin cluster plan</span></span><br><span class=\"line\">=============================== Staged Changes ================================</span><br><span class=\"line\">Action         Details(s)</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">join           &#x27;dev3@127.0.0.1&#x27;</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NOTE: Applying these changes will result in 1 cluster transition</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##############################################################################</span></span></span><br><span class=\"line\">                         After cluster transition 1/1</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##############################################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">================================= Membership ==================================</span><br><span class=\"line\">Status     Ring    Pending    Node</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">valid      50.0%     34.4%    &#x27;dev1@127.0.0.1&#x27;</span><br><span class=\"line\">valid      50.0%     32.8%    &#x27;dev2@127.0.0.1&#x27;</span><br><span class=\"line\">valid       0.0%     32.8%    &#x27;dev3@127.0.0.1&#x27;</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Valid:3 / Leaving:0 / Exiting:0 / Joining:0 / Down:0</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: Not all replicas will be on distinct nodes</span><br><span class=\"line\"></span><br><span class=\"line\">Transfers resulting from cluster changes: 21</span><br><span class=\"line\">  10 transfers from &#x27;dev1@127.0.0.1&#x27; to &#x27;dev3@127.0.0.1&#x27;</span><br><span class=\"line\">  11 transfers from &#x27;dev2@127.0.0.1&#x27; to &#x27;dev3@127.0.0.1&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev3/bin/riak-admin cluster commit</span></span><br><span class=\"line\">Cluster changes committed</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev3/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev1@127.0.0.1     |valid |  up   | 43.8|  34.4 |</span><br><span class=\"line\">|     dev2@127.0.0.1     |valid |  up   | 50.0|  32.8 |</span><br><span class=\"line\">|     dev3@127.0.0.1     |valid |  up   |  6.3|  32.8 |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">./dev3/bin/riak-admin cluster status</span></span><br><span class=\"line\">---- Cluster Status ----</span><br><span class=\"line\">Ring ready: true</span><br><span class=\"line\"></span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">|          node          |status| avail |ring |pending|</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\">| (C) dev1@127.0.0.1     |valid |  up   | 34.4|  --   |</span><br><span class=\"line\">|     dev2@127.0.0.1     |valid |  up   | 32.8|  --   |</span><br><span class=\"line\">|     dev3@127.0.0.1     |valid |  up   | 32.8|  --   |</span><br><span class=\"line\">+------------------------+------+-------+-----+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">Key: (C) = Claimant; availability marked with &#x27;!&#x27; is unexpected</span><br></pre></td></tr></table></figure>\n<p>这里riak-admin cluster\nstatus可以查看集群状态。status是目前每个节点的状态。avail代表是否可以访问，ring就是每个节点持有多少百分比的数据。和Dynamo的思想一致，riak以一致性哈希环保存数据。这个ring就是虚节点，里面的百分比就是每个节点持有虚节点个数。</p>\n<p>运行成功后，我们需要创建bucket-type，供YCSB测试使用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dev/dev1/riak-admin bucket-type create ycsb &#x27;&#123;&quot;props&quot;:&#123;&quot;consistent&quot;:true&#125;&#125;&#x27;</span><br><span class=\"line\">dev/dev1/riak-admin bucket-type activate ycsb</span><br><span class=\"line\">dev/dev1/riak-admin bucket-type create fakeBucketType &#x27;&#123;&quot;props&quot;:&#123;&quot;allow_mult&quot;:&quot;false&quot;,&quot;n_val&quot;:1,&quot;dvv_enabled&quot;:false,&quot;last_write_wins&quot;:true&#125;&#125;&#x27;</span><br><span class=\"line\">dev/dev1/riak-admin bucket-type activate fakeBucketType</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装ycsb\">安装YCSB</h1>\n<blockquote>\n<p>参考<a\nhref=\"https://github.com/brianfrankcooper/YCSB/tree/master/riak\">YCSB/riak\nat master · brianfrankcooper/YCSB · GitHub</a></p>\n</blockquote>\n<p>下载YCSB最新版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/brianfrankcooper/YCSB/releases/download/0.17.0/ycsb-0.17.0.tar.gz</span><br><span class=\"line\">tar -zxvf ycsb-0.17.0.tar.gz</span><br><span class=\"line\">cd ycsb-0.17.0</span><br></pre></td></tr></table></figure>\n<p>笔者参考了所有的相关资料，发现配置文件对<code>Riak-YCSB</code>并不起作用，阅读源代码知道，配置文件写死在了jar包里面不能自己设置，因此只能够修改<code>Riak-binding</code>的jar包。在<code>ycsb-0.17.0</code>目录下运行一下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd riak-binding/lib</span><br><span class=\"line\">mv riak-binding-0.17.0.jar riak-binding-0.17.0.jar.bak</span><br><span class=\"line\">unzip riak-binding-0.17.0.jar.bak</span><br></pre></td></tr></table></figure>\n<p>解压jar包后会得到<code>META-INF</code>，<code>riak.properties</code>和<code>site</code>三个文件（或文件夹）</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20220619104949932.png\"\nalt=\"image-20220619104949932\" />\n<figcaption aria-hidden=\"true\">image-20220619104949932</figcaption>\n</figure>\n<p>修改<code>riak.properties</code>为如下配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">implied. See the License <span class=\"keyword\">for</span> the specific language governing</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">permissions and limitations under the License. See accompanying</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">LICENSE file.</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"></span><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">RiakKVClient - Default Properties</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Note: Change the properties below to <span class=\"built_in\">set</span> the values to use <span class=\"keyword\">for</span> your <span class=\"built_in\">test</span>. You can <span class=\"built_in\">set</span> them either here or from the</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">command</span> line. Note that the latter choice overrides these settings.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.hosts - string list, comma separated list of IPs or FQDNs.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">EX: 127.0.0.1,127.0.0.2,127.0.0.3 or riak1.mydomain.com,riak2.mydomain.com,riak3.mydomain.com</span></span><br><span class=\"line\">riak.hosts=127.0.0.1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.port - int, the port on <span class=\"built_in\">which</span> every node is listening. It must match the one specified <span class=\"keyword\">in</span> the riak.conf file</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">at the line <span class=\"string\">&quot;listener.protobuf.internal&quot;</span>.</span></span><br><span class=\"line\">riak.port=10017</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.bucket_type - string, must match value of bucket <span class=\"built_in\">type</span> created during setup. See readme.md <span class=\"keyword\">for</span> more information</span></span><br><span class=\"line\">riak.bucket_type=ycsb</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.r_val - int, the R value represents the number of Riak nodes that must <span class=\"built_in\">return</span> results <span class=\"keyword\">for</span> a <span class=\"built_in\">read</span> before the <span class=\"built_in\">read</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">is considered successful.</span></span><br><span class=\"line\">riak.r_val=3</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.w_val - int, the W value represents the number of Riak nodes that must report success before an update is</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">considered complete.</span></span><br><span class=\"line\">riak.w_val=3</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.read_retry_count - int, number of <span class=\"built_in\">times</span> the client will try to <span class=\"built_in\">read</span> a key from Riak.</span></span><br><span class=\"line\">riak.read_retry_count=5</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.wait_time_before_retry - int, time (<span class=\"keyword\">in</span> milliseconds) the client waits before attempting to perform another</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">read</span> <span class=\"keyword\">if</span> the previous one failed.</span></span><br><span class=\"line\">riak.wait_time_before_retry=200</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.transaction_time_limit - int, time (<span class=\"keyword\">in</span> seconds) the client waits before aborting the current transaction.</span></span><br><span class=\"line\">riak.transaction_time_limit=10</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">riak.strong_consistency - boolean, indicates whether to use strong consistency (<span class=\"literal\">true</span>) or eventual consistency (<span class=\"literal\">false</span>).</span></span><br><span class=\"line\">riak.strong_consistency=true</span><br></pre></td></tr></table></figure>\n<p>之后，再将jar包重新打包，如果出错则去掉m使用<code>jar -cvf</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">jar -cvfm riak-binding-0.17.0.jar riak.properties META-INF/MANIFEST.MF site</span><br></pre></td></tr></table></figure>\n<p>之后，在<code>ycsb-0.17.0</code>目录下运行YCSB进行数据的插入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/ycsb load riak -P workloads/workloada</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/image-20220619105637278.png\"\nalt=\"image-20220619105637278\" />\n<figcaption aria-hidden=\"true\">image-20220619105637278</figcaption>\n</figure>\n<p>最后，测试读取、更新、删除操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/ycsb run riak -P workloads/workloada</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/image-20220619105756247.png\"\nalt=\"image-20220619105756247\" />\n<figcaption aria-hidden=\"true\">image-20220619105756247</figcaption>\n</figure>\n","categories":["database"],"tags":["database","Riak","YCSB"]},{"title":"foundationdb的安装和测试","url":"/2023/02/22/database/foundationdb%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E6%B5%8B%E8%AF%95/","content":"<h1 id=\"安装\">安装</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用这个版本</span></span><br><span class=\"line\">wget https://github.com/apple/foundationdb/releases/download/7.2.3/foundationdb-server_7.2.3-1_amd64.deb</span><br><span class=\"line\">wget https://github.com/apple/foundationdb/releases/download/7.2.3/foundationdb-clients_7.2.3-1_amd64.deb</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">sudo dpkg -i foundationdb-clients_7.2.3-1_amd64.deb</span><br><span class=\"line\">sudo dpkg -i foundationdb-server_7.2.3-1_amd64.deb</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">卸载</span></span><br><span class=\"line\">sudo dpkg --purge foundationdb-server</span><br><span class=\"line\">sudo dpkg --purge foundationdb-clients</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/apple/foundationdb/releases/download/6.2.11/foundationdb-server_6.2.11-1_amd64.deb</span><br><span class=\"line\">wget https://github.com/apple/foundationdb/releases/download/6.2.11/foundationdb-clients_6.2.11-1_amd64.deb</span><br><span class=\"line\">sudo dpkg -i foundationdb-clients_6.2.11-1_amd64.deb</span><br><span class=\"line\">sudo dpkg -i foundationdb-server_6.2.11-1_amd64.deb</span><br><span class=\"line\">sudo dpkg --purge foundationdb-server</span><br><span class=\"line\">sudo dpkg --purge foundationdb-clients</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>查看服务状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service foundationdb status</span><br><span class=\"line\">service foundationdb start</span><br><span class=\"line\">service foundationdb stop</span><br></pre></td></tr></table></figure>\n<p>安装完成之后会自动启动foundationdb，输入<code>fdbcli</code>之后就可以看到相关信息了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/cpl$ fdbcli</span><br><span class=\"line\">Using cluster file `/etc/foundationdb/fdb.cluster&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">The database is available.</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to the fdbcli. For help, type `help&#x27;.</span><br><span class=\"line\"><span class=\"meta prompt_\">fdb&gt; </span><span class=\"language-bash\">status</span></span><br><span class=\"line\"></span><br><span class=\"line\">Using cluster file `/etc/foundationdb/fdb.cluster&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration:</span><br><span class=\"line\">  Redundancy mode        - single</span><br><span class=\"line\">  Storage engine         - memory-2</span><br><span class=\"line\">  Encryption at-rest     - disabled</span><br><span class=\"line\">  Coordinators           - 1</span><br><span class=\"line\">  Usable Regions         - 1</span><br><span class=\"line\"></span><br><span class=\"line\">Cluster:</span><br><span class=\"line\">  FoundationDB processes - 1</span><br><span class=\"line\">  Zones                  - 1</span><br><span class=\"line\">  Machines               - 1</span><br><span class=\"line\">  Memory availability    - 7.7 GB per process on machine with least available</span><br><span class=\"line\">  Retransmissions rate   - 1 Hz</span><br><span class=\"line\">  Fault Tolerance        - 0 machines</span><br><span class=\"line\">  Server time            - 02/22/23 15:57:08</span><br><span class=\"line\"></span><br><span class=\"line\">Data:</span><br><span class=\"line\">  Replication health     - Healthy</span><br><span class=\"line\">  Moving data            - 0.000 GB</span><br><span class=\"line\">  Sum of key-value sizes - 0 MB</span><br><span class=\"line\">  Disk space used        - 105 MB</span><br><span class=\"line\"></span><br><span class=\"line\">Operating space:</span><br><span class=\"line\">  Storage server         - 1.0 GB free on most full server</span><br><span class=\"line\">  Log server             - 213.6 GB free on most full server</span><br><span class=\"line\"></span><br><span class=\"line\">Workload:</span><br><span class=\"line\">  Read rate              - 22 Hz</span><br><span class=\"line\">  Write rate             - 0 Hz</span><br><span class=\"line\">  Transactions started   - 9 Hz</span><br><span class=\"line\">  Transactions committed - 0 Hz</span><br><span class=\"line\">  Conflict rate          - 0 Hz</span><br><span class=\"line\"></span><br><span class=\"line\">Backup and DR:</span><br><span class=\"line\">  Running backups        - 0</span><br><span class=\"line\">  Running DRs            - 0</span><br><span class=\"line\"></span><br><span class=\"line\">Client time: 02/22/23 15:57:08</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">fdb&gt; </span></span><br></pre></td></tr></table></figure>\n<p>这里也提供下卸载的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo dpkg --purge foundationdb-server</span><br><span class=\"line\">sudo dpkg --purge foundationdb-clients</span><br></pre></td></tr></table></figure>\n<h1 id=\"测试\">测试</h1>\n<h2 id=\"c-api简单测试\">C-API简单测试</h2>\n<p>test_fdb.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FDB_API_VERSION 710</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fdb_c.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">FDBTransaction *tr = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">FDBDatabase *db = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">pthread_t</span> netThread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">checkError</span><span class=\"params\">(<span class=\"type\">fdb_error_t</span> errorNum)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (errorNum) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Error (%d): %s\\n&quot;</span>, errorNum, fdb_get_error(errorNum));</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(errorNum);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">waitAndCheckError</span><span class=\"params\">(FDBFuture *<span class=\"built_in\">future</span>)</span> &#123;</span><br><span class=\"line\">  checkError(fdb_future_block_until_ready(<span class=\"built_in\">future</span>));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fdb_future_get_error(<span class=\"built_in\">future</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    checkError(fdb_future_get_error(<span class=\"built_in\">future</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">runNetwork</span><span class=\"params\">()</span> &#123; checkError(fdb_run_network()); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">createDataInDatabase</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> committed = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  Create transaction. */</span></span><br><span class=\"line\">  checkError(fdb_database_create_transaction(db, &amp;tr));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!committed) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Create data */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *key1 = <span class=\"string\">&quot;Test Key1&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *val1 = <span class=\"string\">&quot;Test Value1&quot;</span>;</span><br><span class=\"line\">    fdb_transaction_set(tr, key1, (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>(key1), val1, (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>(val1));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Commit to database.*/</span></span><br><span class=\"line\">    FDBFuture *commitFuture = fdb_transaction_commit(tr);</span><br><span class=\"line\">    checkError(fdb_future_block_until_ready(commitFuture));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fdb_future_get_error(commitFuture) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      waitAndCheckError(</span><br><span class=\"line\">          fdb_transaction_on_error(tr, fdb_future_get_error(commitFuture)));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      committed = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fdb_future_destroy(commitFuture);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* Destroy transaction. */</span></span><br><span class=\"line\">  fdb_transaction_destroy(tr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">readDataFromDatabase</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  FDBTransaction *tr = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">uint8_t</span> *value = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"type\">fdb_bool_t</span> valuePresent;</span><br><span class=\"line\">  <span class=\"type\">int</span> valueLength;</span><br><span class=\"line\">  <span class=\"type\">char</span> *key = <span class=\"string\">&quot;Test Key1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  checkError(fdb_database_create_transaction(db, &amp;tr));</span><br><span class=\"line\">  FDBFuture *getFuture = fdb_transaction_get(tr, key, (<span class=\"type\">int</span>)<span class=\"built_in\">strlen</span>(key), <span class=\"number\">0</span>);</span><br><span class=\"line\">  waitAndCheckError(getFuture);</span><br><span class=\"line\"></span><br><span class=\"line\">  checkError(</span><br><span class=\"line\">      fdb_future_get_value(getFuture, &amp;valuePresent, &amp;value, &amp;valueLength));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Got Value from db. %s: &#x27;%.*s&#x27;\\n&quot;</span>, key, valueLength, value);</span><br><span class=\"line\">  fdb_transaction_destroy(tr);</span><br><span class=\"line\">  fdb_future_destroy(getFuture);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Default fdb cluster file. */</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *cluster_file = <span class=\"string\">&quot;/etc/foundationdb/fdb.cluster&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Setup network. */</span></span><br><span class=\"line\">  checkError(fdb_select_api_version(FDB_API_VERSION));</span><br><span class=\"line\">  checkError(fdb_setup_network());</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Created network.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  pthread_create(&amp;netThread, <span class=\"literal\">NULL</span>, (<span class=\"type\">void</span> *)runNetwork, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  checkError(fdb_create_database(cluster_file, &amp;db));</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Created database.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  createDataInDatabase();</span><br><span class=\"line\">  readDataFromDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Program done. Now exiting...&quot;</span>);</span><br><span class=\"line\">  fdb_database_destroy(db);</span><br><span class=\"line\">  db = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  checkError(fdb_stop_network());</span><br><span class=\"line\">  <span class=\"type\">int</span> rc = pthread_join(netThread, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rc)</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;ERROR: network thread failed to join\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc test_fdb.c -lfdb_c -lpthread -I /usr/include/foundationdb/ -ggdb3 -O0 -g3 -o test_fdb</span><br></pre></td></tr></table></figure>\n<h2 id=\"ycsb测试\">YCSB测试</h2>\n<h3 id=\"安装go环境\">安装go环境</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo snap install go</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载go-ycsb\">下载go-ycsb</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pingcap/go-ycsb.git</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加载数据到foundationdb</span></span><br><span class=\"line\">./bin/go-ycsb load foundationdb -P workloads/workloadb -p threadcount=64 -p recordcount=1000000 -p operationcount=10000</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">运行测试</span></span><br><span class=\"line\">./bin/go-ycsb run foundationdb -P workloads/workloadb -p threadcount=256 -p recordcount=10000 -p operationcount=1000</span><br></pre></td></tr></table></figure>\n<h2 id=\"多节点foundationdb\">多节点foundationdb</h2>\n","categories":["database"],"tags":["foundationdb"]},{"title":"丢失修改、不可重复度、读脏数据","url":"/2022/05/31/database/isolation_level/","content":"<h1 id=\"背景\">背景</h1>\n<p>数据库并发如果不做任何的控制，会破坏事务ACID特性的隔离性和一致性，如丢失修改、不可重复读、幻影现象和读“脏数据”等问题。</p>\n<span id=\"more\"></span>\n<h1 id=\"问题解释\">问题解释</h1>\n<p>本章介绍丢失修改、不可重复读和读“脏数据”的概念。</p>\n<h2 id=\"丢失修改\">丢失修改</h2>\n<figure>\n<img\nsrc=\"http://img.singhe.art/%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9.png\"\nalt=\"image-20220714104421583\" />\n<figcaption aria-hidden=\"true\">image-20220714104421583</figcaption>\n</figure>\n<p>两个事务T<sub>1</sub>和T<sub>2</sub>读入同一数据并修改，T<sub>2</sub>提交的结果破坏了T<sub>1</sub>提交的结果，导致T<sub>1</sub>的修改被丢失。</p>\n<h2 id=\"不可重复读\">不可重复读</h2>\n<figure>\n<img src=\"http://img.singhe.art/image-20220715091255981.png\"\nalt=\"image-20220715091255981\" />\n<figcaption aria-hidden=\"true\">image-20220715091255981</figcaption>\n</figure>\n<p>事务T<sub>1</sub>读取某一数据后，事务T<sub>2</sub>对其进行了修改，当事务T<sub>1</sub>再次读区该数据时，得到与前一次不一样的结果。</p>\n<h2 id=\"幻影现象\">幻影现象</h2>\n<p>事务T<sub>1</sub>从数据库读取某些记录后，事务T<sub>2</sub>删除(或者插入了)部分记录，事务T<sub>1</sub>再按照相同条件读取的时候发现某些记录消失了(或新增了)。</p>\n<h2 id=\"读脏数据\">读“脏数据”</h2>\n<figure>\n<img src=\"http://img.singhe.art/image-20220715091933540.png\"\nalt=\"image-20220715091933540\" />\n<figcaption aria-hidden=\"true\">image-20220715091933540</figcaption>\n</figure>\n<p>读“脏数据”是指事务T<sub>1</sub>修改某一数据并将其写会磁盘，事务T<sub>2</sub>读区同一数据后，T<sub>1</sub>由于某种原因被撤销，这时被T<sub>1</sub>修改过的数据恢复原值，T<sub>2</sub>读到的数据就与数据库中的数据不一致，则T<sub>2</sub>读到的数据就为“脏”数据，即不正确的数据。</p>\n<h1 id=\"问题解决\">问题解决</h1>\n<p>并发控制的技术有很多，比如封锁、时间戳、乐观控制和多版本并发控制，这里介绍封锁的方法。</p>\n<h2 id=\"封锁的相容矩阵\">封锁的相容矩阵</h2>\n<figure>\n<img src=\"http://img.singhe.art/image-20220715093307688.png\"\nalt=\"image-20220715093307688\" />\n<figcaption aria-hidden=\"true\">image-20220715093307688</figcaption>\n</figure>\n<h2 id=\"封锁协议\">封锁协议</h2>\n<p>在运用X锁和S锁时，还需要约定一些规则。例如，合适申请X锁或S锁、持锁时间、何时释放等。这些规则被称为封锁协议。</p>\n<h3 id=\"一级封锁协议读未提交\">一级封锁协议(读未提交)</h3>\n<p>一级封锁协议是指，事务T在修改数据R之前必须对其加X锁，知道事务结束才释放。</p>\n<p>在一级封锁协议中，如果仅仅是读数据而不对其进行修改，是不需要加锁的，所以它不能保证可重复读和不读“脏数据”，它只能够解决丢失修改的问题。</p>\n<h3 id=\"二级封锁协议读已提交\">二级封锁协议(读已提交)</h3>\n<p>二级封锁协议在一级封锁协议的基础上增加事务T在读取数据R之前必须对其加S锁，读完后即可释放S锁。</p>\n<p>二级封锁协议能够解决丢失修改、读“脏数据”的问题，不能解决可重复读</p>\n<h3 id=\"三级封锁协议可重复读\">三级封锁协议(可重复读)</h3>\n<p>三级封锁协议是指，在一级封锁协议的基础上增加事务T在读取R之前必须对其加S锁，直到事务结束才释放。三级封锁协议和二级封锁协议的差别在于读锁的持续时间不同。</p>\n<p>三级封锁协议能够解决丢失修改、读“脏数据”、不可重复读的问题。但是不能解决幻读的问题，因为封锁都是对某一行进行加锁，而幻读出现问题的地方是整个表格。</p>\n<h3 id=\"可串形化\">可串形化</h3>\n<p>能够解决所有的问题，但是并发性能太差。</p>\n","categories":["database"],"tags":["database","lock"]},{"title":"multi-clock snapshot isolation","url":"/2023/06/07/database/multi-clock-snapshot-isolation/","content":"<h1 id=\"section\"></h1>\n<h1 id=\"motivatione\">Motivatione</h1>\n<p>a previous single-layer NVM database N2DB[14] used the snapshot\nisolation from PostgreSQL[17]. Its snapshot generation process involves\ntaking a lock and scanning a global active transaction list, which\nblocks concurrent transactions and is not scalable</p>\n<h1 id=\"background\">Background</h1>\n<h2 id=\"concurrency-control-for-nvm-databases\">2.3 Concurrency control\nfor NVM databases</h2>\n<p>The snapshot isolation concurrency control implementation used in\ntraditional MVCC databases is not well suited for NVM because of two\nreasons. (1) The concurrency control implementations of traditional\ndatabases mainly focus on their in-memory part without discussing\ndurability and crash consistency. They leave those to another dedicated\nrecovery protocol, such as ARIES or write-ahead logging. The situation\nis different in NVM databases because a single copy of data is used for\nboth runtime access and durability. Ensuring crash consistency should\nunavoidably be part of the concurrency control itself. (2) Concurrency\ncontrol methods from a two-layer architecture have suboptimal\nperformance when directly applied to a single-layer NVM database.\nFOEDUS[28] points out that centralized components, such as lock manager\nand logs in traditional concurrency control implementations, will cause\nperformance bottlenecks in a multicore NVM database. A previous NVM\ndatabase N2DB[14] adopted the concurrency control from PostgreSQL[17] to\nimplement snapshot isolation. The concurrency control scheme from\nPostgreSQL uses the currently completed transactions in the system to\nrepresent a snapshot. When generating a snapshot, it has to take a lock\nand scan the global active transaction list. This approach blocks\nconcurrent transactions and is not scalable. N2DB also adopted the\ncommit log in NVM to persistently store transaction status for crash\nconsistency. The commit log is an array-like structure and is\nwrite-shared by all threads, which limits its scalability. Zen[29] also\npoints out that traditional concurrency control methods often need to\nmodify the tuple metadata not only by tuple writes but also by tuple\nreads, which incurs expensive NVM writes.</p>\n<h1 id=\"multi-clock-concurrency-control\">Multi-Clock Concurrency\nControl</h1>\n","categories":["database"]},{"title":"mysql上验证快照隔离","url":"/2022/05/31/database/mysql_snapshot_isolation/","content":"<blockquote>\n<p>本文在mysql上验证快照隔离的特性。参考<a\nhref=\"http://t.zoukankan.com/xwdreamer-p-2297081.html\">文章</a>。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"创建数据库\">创建数据库</h1>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database demo;</span><br><span class=\"line\">use demo;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test</span><br><span class=\"line\">(</span><br><span class=\"line\">tid <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">primary</span> key,</span><br><span class=\"line\">tname <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;version1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> test <span class=\"keyword\">VALUES</span>(<span class=\"number\">2</span>,<span class=\"string\">&#x27;version2&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/image-20220715113204595.png\"\nalt=\"image-20220715113204595\" />\n<figcaption aria-hidden=\"true\">image-20220715113204595</figcaption>\n</figure>\n<h1 id=\"连接一\">连接一</h1>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE demo;</span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION <span class=\"keyword\">WITH</span> CONSISTENT SNAPSHOT;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> test <span class=\"keyword\">SET</span> tname<span class=\"operator\">=</span><span class=\"string\">&#x27;version3&#x27;</span> <span class=\"keyword\">WHERE</span> tid<span class=\"operator\">=</span><span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/image-20220715113440161.png\"\nalt=\"image-20220715113440161\" />\n<figcaption aria-hidden=\"true\">image-20220715113440161</figcaption>\n</figure>\n<p>可以看到连接一中数据已被修改。</p>\n<h1 id=\"连接二\">连接二</h1>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE demo;</span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION <span class=\"keyword\">WITH</span> CONSISTENT SNAPSHOT;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> test;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/image-20220715113625028.png\"\nalt=\"image-20220715113625028\" />\n<figcaption aria-hidden=\"true\">image-20220715113625028</figcaption>\n</figure>\n<p>由于事务一(连接一)还没有提交，因此连接二看到的是version2而不是version3。</p>\n<h1 id=\"commit\">commit</h1>\n<figure>\n<img src=\"http://img.singhe.art/image-20220715114056294.png\"\nalt=\"image-20220715114056294\" />\n<figcaption aria-hidden=\"true\">image-20220715114056294</figcaption>\n</figure>\n<p>即使连接一commit之后，连接二在当前事务中也不能看到最新的版本version3。</p>\n<figure>\n<img src=\"http://img.singhe.art/image-20220715114239913.png\"\nalt=\"image-20220715114239913\" />\n<figcaption aria-hidden=\"true\">image-20220715114239913</figcaption>\n</figure>\n<p>而当连接二commit退出当前事务后，便能够看到version3了。</p>\n","categories":["database"],"tags":["database","mysql"]},{"title":"sortledton","url":"/2022/05/31/database/sortledton/","content":"<h1 id=\"introduction\">1. introduction</h1>\n<p>​\n动态数据集上的图处理在许多应用领域越发重要，如推荐系统和欺诈检测等。现今，许多场景下都需要进行大规模的图计算，如图分析(analytics),图模式匹配(graph\npattern matching, GPM),\n图遍历(tranversals).而这些图计算的数据集是动态变化的，随时都在进行更新。\n创建这样一个系统仍然是一个未解决的问题，其根源就是没有底层数据结构既能保证高效率的事务更新，又能有效处理各种各样的图工作负载（比如模式匹配、图遍历就是不同的工作负载）。这篇文章就是要解决这个问题。\n为支持分析工作负载(如page\nrank)和图遍历(单源最短路径)需要支持快速扫描。为了支持模式匹配(如triangle\ncounting)，数据结构需要有序to enable fast\nintersections。为了保证更新速度，该数据结构需要支持动态更新。为了保证并发，需要实现多版本。</p>\n<span id=\"more\"></span>\n<h1 id=\"background\">2. background</h1>\n<p>动态图上的图工作负载主要有三类：analytics(Page rank)，grapha pattern\nmatching(triangle count), graph traversals(single-source-shortest\npath)，怎么在动态图上支持所有的workload是一个问题。</p>\n<h2 id=\"problem\">2.1 problem</h2>\n<p>为了解决上述问题，有两个关键的challenges。</p>\n<p><strong>第一个挑战</strong>：</p>\n<ol type=\"1\">\n<li>all workloads require fast <strong>scannilng</strong> of\nneighborhoods</li>\n<li>high throughput of new deges requires fast\n<strong>insertions</strong></li>\n<li>GPM needs <strong>intersection</strong>.</li>\n</ol>\n<p>scan+insertion可以使用vector，但是求交集的复杂度是O(M*N);</p>\n<p>scan+intersection可以使用有序数组，但是其插入很慢</p>\n<p>insertion+intersection可以使用hash set，但是 hash sets have empty\nslots which require the evaluation of apredicate for each scanned\nelement</p>\n<p><strong>第二个挑战</strong></p>\n<p>并发执行</p>\n<h2 id=\"graphalytic-benchmake\">2.3 Graphalytic Benchmake</h2>\n<p><strong>WCC</strong>:weakly connected component</p>\n<p><strong>PR</strong>: PageRank</p>\n<p><strong>CDLP</strong>:community detection via label propagation</p>\n<p><strong>BFS</strong>: breadth-first search</p>\n<p><strong>SSSP</strong>: weighted single-source shortest path</p>\n<p><strong>LCC</strong>: local clustering co-efficient</p>\n<h1 id=\"requirements-and-design-goals\">3. Requirements and design\ngoals</h1>\n<p>Four memory access patterns:</p>\n<ol type=\"1\">\n<li>sequential access to the neighborhoods of all vertices</li>\n<li>sequential access to the edges within a neighborhood</li>\n<li>random access to algorithm-specific properties, e.g., scores for\nPageRank or distances for BFS</li>\n<li>random access to the neighborhoods of all vertices.</li>\n</ol>\n<h2 id=\"sequential-vertex-access\">3.1 Sequential Vertex Access</h2>\n<figure>\n<img src=\"http://img.singhe.art/image-20220904183951251.png\"\nalt=\"image-20220904183951251\" />\n<figcaption aria-hidden=\"true\">image-20220904183951251</figcaption>\n</figure>\n<p>第一种用一个大的数组来存所有的邻居节点，第二种每一行都是一个vector，其内存分配是随机的，而不是连续的。</p>\n<h2 id=\"sequential-neighborhoods-access\">3.2 sequential neighborhoods\naccess</h2>\n<p>先说明下sequential vertex access 和sequential neighborhoods\naccess的区别(个人理解)：</p>\n<p>sequential vertex也就意味着所有的顶点访问都可以连续内存，而sequential\nneighborhood只是某个顶点的neighborhoods的是在连续的内存区域。对应上面图的1和2.</p>\n<p>We conclude that optimal <em>sequential neighborhood access</em> can\nbe supported by set data structures with at least 256 edges per\nblock.</p>\n<h2 id=\"random-access-to-algorithm-properties\">3.3 random access to\nalgorithm properties</h2>\n<h2 id=\"random-vertex-access\">3.4 random vertex access</h2>\n<h2 id=\"transactoin-on-graphs\">3.5 transactoin on graphs</h2>\n","categories":["database"],"tags":["data_structure","graph"]},{"title":"ubuntu_mysql忘记密码","url":"/2023/02/17/database/ubuntu-mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/","content":"<h1 id=\"前言\">前言</h1>\n<p>参考：<a\nhref=\"https://blog.csdn.net/m0_46825740/article/details/127768826\">https://blog.csdn.net/m0_46825740/article/details/127768826</a></p>\n<p>我的系统是<code>ubuntu 18.04</code>，Windows用户可以划走了。<code>ubuntu 18.04</code>使用<code>sudo apt install mysql-server</code>安装的mysql版本是5.7，当忘记了密码的时候可以采取下面的方法。</p>\n<span id=\"more\"></span>\n<h1 id=\"使用debian-sys-maint账号登录\">使用debian-sys-maint账号登录</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo <span class=\"built_in\">cat</span> /etc/mysql/debian.cnf</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Automatically generated <span class=\"keyword\">for</span> Debian scripts. DO NOT TOUCH!</span></span><br><span class=\"line\">[client]</span><br><span class=\"line\">host     = localhost</span><br><span class=\"line\">user     = debian-sys-maint</span><br><span class=\"line\">password = xFaoTL9Jo2Q4QzVg</span><br><span class=\"line\">socket   = /var/run/mysqld/mysqld.sock</span><br><span class=\"line\">[mysql_upgrade]</span><br><span class=\"line\">host     = localhost</span><br><span class=\"line\">user     = debian-sys-maint</span><br><span class=\"line\">password = xFaoTL9Jo2Q4QzVg</span><br><span class=\"line\">socket   = /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure>\n<p>使用该账号和密码进行登录:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改root账号密码\">修改root账号密码</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">update user set plugin=&#x27;mysql_native_password&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n","categories":["database"],"tags":["linux"]},{"title":"vmware fault tolerance","url":"/2022/07/01/database/vmware_faul_tolerance/","content":"<h1 id=\"failure-types\">failure types</h1>\n<p>Fail-stop failure(i.e. machine crashes, os kernel panic), not\nincluding software or hardware bugs.</p>\n<span id=\"more\"></span>\n<h1 id=\"two-types-of-primary-backup-replication\">two types of\nprimary-backup replication</h1>\n<ul>\n<li><strong>State Transfer</strong>: you should transfer all the state\nof the primary(such as the content of RAM) via Internet to the\nbackup</li>\n<li><strong>Replicated State Machine</strong>: primary just sends the\nexternal inputs to the backup. The different states between primary and\nbackup are all caused by external inputs.</li>\n</ul>\n<p>Replicated State Machine is a good idea, but there are some\nnon-determined instructions(such as get current time or get random\nnumber). So we must handle the non-determined instructions.</p>\n<p>VMware-Fault-Tolerance only deals with <strong>single-core</strong>\nmachine rather than multi-core machine because there will be\ninterleavings of the instructions from two cores.</p>\n<h1 id=\"problems\">problems</h1>\n<h2 id=\"what-states-to-be-replicated\">what states to be replicated?</h2>\n<p>VMware-Fault-Tolerance replicates states at machine level. It will\ntransfer all the states such as the content of RAMs, registers and so\non. It doesn't care what software you run on it, which is unique\ncompared to other fault tolerances.</p>\n<h2 id=\"non-determined-events\">non-determined events</h2>\n<ul>\n<li>Inputs = network packet = data + interrupt(no-determined)</li>\n<li>Weird instructions(such as getting processor id)</li>\n<li>Multiple-cores</li>\n</ul>\n<h1 id=\"log-entries\">log entries</h1>\n<p>requirements:</p>\n<ul>\n<li>Log entry number</li>\n<li>the type of log entry(determine or non-determine)</li>\n<li>Data</li>\n</ul>\n<h1 id=\"output-rule\">output rule</h1>\n<p><strong>Problem 1</strong>:If the primary has generated outputs to\nthe client but crashed before sending records to the backup, the status\nof the backup is not correct. Output rule is to deal with the problem.\nBelow is the output rule:</p>\n<p>The primary is not allowed to generate outputs to the client until\nthe backup acknowledges that it has received all log records.</p>\n<p><strong>Problem 2</strong>: let's talk about the following scenario.\nThe primary has sent the input records to the backup. But it crashed\nafter generating the output to the client. Then, the backup takes over\nas primary. The new primary will generates the same output the client as\nthe old primary did.How to solve it?</p>\n<p>Well, we send packest with TCP and the new primary is identical with\nthe old primary. So the new primary will send packets with same packet\nnumber and the client will discard the same packet.</p>\n<p><strong>Problem 3</strong>: brain split. If the primary and the\nbackup cannot talk with each other, They will both be the primary and\ngenerate output to the client. How to solve it?</p>\n<p>Via Shared disk and using test-and-set to ensure there is only one\nprimary. If test-and-set success, the one can go live. Otherwise,\ncannot.</p>\n","categories":["database"],"tags":["MIT6.824","fault_tolerance"]},{"title":"C++名称修饰","url":"/2024/07/28/cpp/C++%E5%90%8D%E7%A7%B0%E4%BF%AE%E9%A5%B0/","content":"<figure>\n<img src=\"https://img.singhe.art/20200321173317697.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<span id=\"more\"></span>\n<p>c++filt 可用于解析 C++ 和 Java\n中被修饰的符号，比如变量与函数名称。</p>\n<p>我们知道， 在 C++ 和 Java 中，\n允许函数重载，也就是说我们可以写出多个同名但参数类型不同的函数，其实现依赖于编译器的名字改编（Name\nMangling）机制，即编译器会将函数的名称进行修饰，加入参数信息。考察如下程序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//@file:print.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> dTest=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; strElfFileName)</span> </span>&#123;</span><br><span class=\"line\">        std::cout&lt;&lt;<span class=\"string\">&quot;readelf &quot;</span>&lt;&lt;strElfFileName&lt;&lt;std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用g++编译生成目标文件print.o</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++ -c print.cpp -o print.o</span><br></pre></td></tr></table></figure>\n<p>然后使用命令 strings 查找 print.o 中的可打印字符串。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">strings print.o</span><br><span class=\"line\">readelf </span><br><span class=\"line\">GCC: (GNU) 7.3.0</span><br><span class=\"line\">print.cpp</span><br><span class=\"line\">_ZStL19piecewise_construct</span><br><span class=\"line\">_ZStL8__ioinit</span><br><span class=\"line\">_ZL5dTest</span><br><span class=\"line\">_Z41__static_initialization_and_destruction_0ii</span><br><span class=\"line\">_GLOBAL__sub_I__Z5printRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE</span><br><span class=\"line\">_ZSt4cout</span><br><span class=\"line\">_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</span><br><span class=\"line\">_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE</span><br><span class=\"line\">_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_</span><br><span class=\"line\">_ZNSolsEPFRSoS_E</span><br><span class=\"line\">_ZNSt8ios_base4InitC1Ev</span><br><span class=\"line\">__dso_handle</span><br><span class=\"line\">_ZNSt8ios_base4InitD1Ev</span><br><span class=\"line\">__cxa_atexit</span><br><span class=\"line\">.symtab</span><br><span class=\"line\">.strtab</span><br><span class=\"line\">.shstrtab</span><br><span class=\"line\">.rela.text</span><br><span class=\"line\">.data</span><br><span class=\"line\">.bss</span><br><span class=\"line\">.rodata</span><br><span class=\"line\">.rela.init_array</span><br><span class=\"line\">.comment</span><br><span class=\"line\">.note.GNU-stack</span><br><span class=\"line\">.rela.eh_frame</span><br></pre></td></tr></table></figure>\n<p>使用c++filt还原函数名称：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">strings print.o | c++filt </span><br><span class=\"line\">readelf </span><br><span class=\"line\">GCC: (GNU) 7.3.0</span><br><span class=\"line\">print.cpp</span><br><span class=\"line\">std::piecewise_construct</span><br><span class=\"line\">std::__ioinit</span><br><span class=\"line\">dTest</span><br><span class=\"line\">__static_initialization_and_destruction_0(int, int)</span><br><span class=\"line\">_GLOBAL__sub_I__Z5printRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE</span><br><span class=\"line\">std::cout</span><br><span class=\"line\">std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)</span><br><span class=\"line\">std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)</span><br><span class=\"line\">std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)</span><br><span class=\"line\">std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::operator&lt;&lt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; (*)(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;))</span><br><span class=\"line\">std::ios_base::Init::Init()</span><br><span class=\"line\">__dso_handle</span><br><span class=\"line\">std::ios_base::Init::~Init()</span><br><span class=\"line\">__cxa_atexit</span><br><span class=\"line\">.symtab</span><br><span class=\"line\">.strtab</span><br><span class=\"line\">.shstrtab</span><br><span class=\"line\">.rela.text</span><br><span class=\"line\">.data</span><br><span class=\"line\">.bss</span><br><span class=\"line\">.rodata</span><br><span class=\"line\">.rela.init_array</span><br><span class=\"line\">.comment</span><br><span class=\"line\">.note.GNU-stack</span><br><span class=\"line\">.rela.eh_frame</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["cpp"]},{"title":"C++类在内存中如何存储","url":"/2022/08/03/cpp/C++%E7%B1%BB%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8/","content":"<blockquote>\n<p>参考<a\nhref=\"https://baijiahao.baidu.com/s?id=1653384309305389312&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1653384309305389312&amp;wfr=spider&amp;for=pc</a></p>\n</blockquote>\n<h1 id=\"背景\">背景</h1>\n<p>我们知道在C++中<code>char</code>占用一个字节，<code>int</code>占用四个字节。那么类在内存中是怎么布局的呢？成员变量和成员函数是放在一起存储的吗？</p>\n<span id=\"more\"></span>\n<h1 id=\"空类\">空类</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of a:%lu&quot;</span>, <span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其结果是<code>size of a: 1</code>，也就是空类占用一个字节。</p>\n<h1 id=\"仅有成员变量\">仅有成员变量</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i1;</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of a:%lu\\n&quot;</span>, <span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i1:%p\\n&quot;</span>, &amp;a.pub_i1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i2:%p\\n&quot;</span>, &amp;a.pub_i2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">size of a:8</span><br><span class=\"line\">address of pub_i1:0x7fffe2502740</span><br><span class=\"line\">address of pub_i2:0x7fffe2502744</span><br></pre></td></tr></table></figure>\n<p>从结果可以知道，公共成员变量占用空间和结构体是一样的，其内存布局如下：</p>\n<p><img src=\"http://img.singhe.art/类内存布局.png\" /></p>\n<h1 id=\"非虚成员函数\">非虚成员函数</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i1;</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i2;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pub_func1</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pub_func2</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of a:%lu\\n&quot;</span>, <span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i1:%p\\n&quot;</span>, &amp;a.pub_i1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i2:%p\\n&quot;</span>, &amp;a.pub_i2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of func1:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)(&amp;A::pub_func1));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of func2:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)(&amp;A::pub_func2));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">size of a:<span class=\"number\">8</span></span><br><span class=\"line\">address of pub_i1:<span class=\"number\">0x7ffe58501900</span></span><br><span class=\"line\">address of pub_i2:<span class=\"number\">0x7ffe58501904</span></span><br><span class=\"line\">address of func1:<span class=\"number\">0x563f174fa904</span></span><br><span class=\"line\">address of func2:<span class=\"number\">0x563f174fa91</span></span><br></pre></td></tr></table></figure>\n<p>可以知道类的非虚成员函数并不和成员变量存储在一起，类中只存了成员变量，其内存布局如下：</p>\n<p><img src=\"http://img.singhe.art/非虚函数布局.png\" /></p>\n<h1 id=\"私有成员变量\">私有成员变量</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i1;</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> *<span class=\"title\">GetI3Addr</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> &amp;pri_i3; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> *<span class=\"title\">GetI4Addr</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> &amp;pri_i4; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> pri_i3;</span><br><span class=\"line\">    <span class=\"type\">int</span> pri_i4;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of a:%lu\\n&quot;</span>, <span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i1:%p\\n&quot;</span>, &amp;a.pub_i1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i2:%p\\n&quot;</span>, &amp;a.pub_i2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pri_i3:%p\\n&quot;</span>, a.<span class=\"built_in\">GetI3Addr</span>());</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pri_i4:%p\\n&quot;</span>, a.<span class=\"built_in\">GetI4Addr</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">size of a:16</span><br><span class=\"line\">address of pub_i1:0x7fff65848b00</span><br><span class=\"line\">address of pub_i2:0x7fff65848b04</span><br><span class=\"line\">address of pri_i3:0x7fff65848b08</span><br><span class=\"line\">address of pri_i4:0x7fff65848b0c</span><br></pre></td></tr></table></figure>\n<p>可以看到私有成员变量和公共成员变量在存储上没有区别，其内存布局如下：</p>\n<p><img src=\"http://img.singhe.art/私有成员函数布局.png\" /></p>\n<h1 id=\"虚函数\">虚函数</h1>\n<p>在上面代码的基础上，增加<code>virtual void pub_vfunc1()&#123;&#125;</code>这一个虚函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i1;</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i2;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pub_func1</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pub_func2</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">pub_vfunc1</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of a:%lu\\n&quot;</span>, <span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i1:%p\\n&quot;</span>, &amp;a.pub_i1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i2:%p\\n&quot;</span>, &amp;a.pub_i2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of func1:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)(&amp;A::pub_func1));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of func2:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)(&amp;A::pub_func2));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">size of a:16</span><br><span class=\"line\">address of pub_i1:0x7fff7adf7678</span><br><span class=\"line\">address of pub_i2:0x7fff7adf767c</span><br><span class=\"line\">address of func1:0x55c7089739c4</span><br><span class=\"line\">address of func2:0x55c7089739d0</span><br></pre></td></tr></table></figure>\n<p>从结果可以看出，虚函数占用了8个字节，那么我们再增加一个虚函数是否也会增加类的大小呢？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i1;</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i2;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pub_func1</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pub_func2</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">pub_vfunc1</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">pub_vfunc2</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of a:%lu\\n&quot;</span>, <span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i1:%p\\n&quot;</span>, &amp;a.pub_i1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i2:%p\\n&quot;</span>, &amp;a.pub_i2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of func1:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)(&amp;A::pub_func1));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of func2:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)(&amp;A::pub_func2));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">size of a:16</span><br><span class=\"line\">address of pub_i1:0x7ffe2a89ff18</span><br><span class=\"line\">address of pub_i2:0x7ffe2a89ff1c</span><br><span class=\"line\">address of func1:0x55c205a279e4</span><br><span class=\"line\">address of func2:0x55c205a279f0</span><br></pre></td></tr></table></figure>\n<p>可以看出，增加虚函数的数量不会对类的大小产生影响，它始终只会增加8个字节的大小，其内存布局如下：</p>\n<p><img src=\"http://img.singhe.art/虚表.png\" /></p>\n<p>我们可以通过以下代码来验证：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i1;</span><br><span class=\"line\">    <span class=\"type\">int</span> pub_i2;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pub_func1</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pub_func2</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">pub_vfunc1</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">pub_vfunc2</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size of a:%lu\\n&quot;</span>, <span class=\"built_in\">sizeof</span>(a));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of a:%p\\n&quot;</span>, &amp;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i1:%p\\n&quot;</span>, &amp;a.pub_i1);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_i2:%p\\n&quot;</span>, &amp;a.pub_i2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_vfunc1:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)(&amp;A::pub_vfunc1));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;address of pub_vfunc2:%p\\n&quot;</span>, (<span class=\"type\">void</span>*)(&amp;A::pub_vfunc2));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取虚表指针</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> *_vptr = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>*)(&amp;a);</span><br><span class=\"line\">    <span class=\"comment\">// 构建虚表</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> *table = (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>*)*_vptr;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;content of table[0]:%lx\\n&quot;</span>, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)table[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;content of table[1]:%lx\\n&quot;</span>, table[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">size of a:16</span><br><span class=\"line\">address of a:0x7ffd49855ab0</span><br><span class=\"line\">address of pub_i1:0x7ffd49855ab8</span><br><span class=\"line\">address of pub_i2:0x7ffd49855abc</span><br><span class=\"line\">address of pub_vfunc1:0x55abbe9d3a4a</span><br><span class=\"line\">address of pub_vfunc2:0x55abbe9d3a56</span><br><span class=\"line\">content of table[0]:55abbe9d3a4a</span><br><span class=\"line\">content of table[1]:55abbe9d3a56</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["cpp"]},{"title":"C++重载运算符>>和<<","url":"/2022/04/04/cpp/C++%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6/","content":"<h1 id=\"概述\">概述</h1>\n<p>要重载一个运算符，有两种方式：</p>\n<ul>\n<li>作为成员方法，只需要一个参数。</li>\n<li>作为全局函数，需要两个参数。</li>\n</ul>\n<p>而<code>cin</code>和<code>cout</code>这两个对象我们无法对其内部成员进行修改，因此对<code>cin</code>和<code>cout</code>的重载只能使用第二种办法。</p>\n<span id=\"more\"></span>\n<h1 id=\"代码示例\">代码示例</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> _height, _weight;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Rectangle</span>(<span class=\"type\">int</span> height, <span class=\"type\">int</span> weight);</span><br><span class=\"line\">    ~<span class=\"built_in\">Rectangle</span>();</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, <span class=\"type\">const</span> Rectangle&amp; rect);</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream&amp; in, Rectangle&amp; rect);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle::<span class=\"built_in\">Rectangle</span>(<span class=\"type\">int</span> height, <span class=\"type\">int</span> weight): _height(height), _weight(weight)&#123;&#125;</span><br><span class=\"line\">Rectangle::~<span class=\"built_in\">Rectangle</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt; (ostream&amp; out, <span class=\"type\">const</span> Rectangle&amp; rect) &#123;</span><br><span class=\"line\">    out &lt;&lt; <span class=\"string\">&quot;height is:&quot;</span> &lt;&lt; rect._height &lt;&lt; <span class=\"string\">&quot; weight is:&quot;</span> &lt;&lt; rect._weight &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream&amp; in, Rectangle&amp; rect) &#123;</span><br><span class=\"line\">    in &gt;&gt; rect._height &gt;&gt; rect._weight;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> in;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Rectangle <span class=\"title\">rect</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\">    cout &lt;&lt; rect;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["cpp"]},{"title":"condition-variable","url":"/2022/08/13/cpp/condition-variable/","content":"<blockquote>\n<p>前面已经对mutex以及相关的lock进行了梳理，这里对thread和condition_variable做一个简单的梳理。</p>\n</blockquote>\n<h1 id=\"stdthread\"># std::thread</h1>\n<p>通过该函数能够创建一个线程。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">worker1_func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;worker1\\n&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">std::thread <span class=\"title\">worker1</span><span class=\"params\">(worker1_func)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;main func\\n&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  worker1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>通过以下命令编译执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++ test.cc -o a.out -lpthread</span><br><span class=\"line\">./a.out</span><br></pre></td></tr></table></figure>\n<p>得到如下结果：</p>\n<p>main func main func main func worker1 worker1 worker1 worker1 worker1\nmain func main func</p>\n<p>那么worker1.join()的用处是什么呢？它的用处是执行这个语句的线程(主线程)必须等待woker1这个线程执行完成后才能继续执行，可以实现一个简单的线程同步。而更复杂的线程同步则需要通过condition_variable来实现。</p>\n<h1 id=\"stdcondition_variable\">std::condition_variable</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">wait</span>()</span><br></pre></td></tr></table></figure>\n<p>wait会阻塞本线程，直到有人用condition_variable将其唤醒或者复活条件成立。在阻塞的过程中会将锁释放，在苏醒后又会重新获取锁。</p>\n","categories":["cpp"],"tags":["cpp","thread"]},{"title":"memory model","url":"/2022/09/15/cpp/consistency_model/","content":"<h1 id=\"memory-consistency-model\">memory consistency model</h1>\n<figure>\n<img src=\"http://img.singhe.art/image-20220903234055396.png\"\nalt=\"image-20220903234055396\" />\n<figcaption aria-hidden=\"true\">image-20220903234055396</figcaption>\n</figure>\n<p>由于一些优化（可能来自编译器或者操作系统或者硬件之类的），在核1真正执行的时候可能不会按照程序原有的顺序执行，比如core1会将两个操作交换顺序，这就导致多个核之间的执行顺序可能会任意进行。为了让结果符合预期，就产生了memory\nconsistency model这一概念，以及各种不同的memory model。</p>\n<span id=\"more\"></span>\n<h1 id=\"sequential-consistency-model\">Sequential consistency model</h1>\n<p>顺序一致性有两点要求：</p>\n<ul>\n<li>在同一个核里的指令顺序与程序顺序相同（也就是不能交换指令改变指令顺序）</li>\n<li>在不同核之间可以按照任意的顺序进行。</li>\n</ul>\n<p>这就好像洗牌的时候将两堆扑克牌合起来一样，每堆扑克牌各自的顺序保持不变，但是两堆扑克牌合起来的顺序可以任意进行。</p>\n<figure>\n<img src=\"http://img.singhe.art/puke.jpeg\" alt=\"puke\" />\n<figcaption aria-hidden=\"true\">puke</figcaption>\n</figure>\n<h1 id=\"references\">references</h1>\n<ul>\n<li><p><a\nhref=\"https://www.cis.upenn.edu/~devietti/classes/cis601-spring2016/sc_tso.pdf\">https://www.cis.upenn.edu/~devietti/classes/cis601-spring2016/sc_tso.pdf</a></p></li>\n<li><p><a\nhref=\"https://www.youtube.com/watch?v=AUxFuD_IfqA\">https://www.youtube.com/watch?v=AUxFuD_IfqA</a></p></li>\n</ul>\n","categories":["cpp"],"tags":["memory_model"]},{"title":"explicit关键字","url":"/2022/05/31/cpp/explicit%E5%85%B3%E9%94%AE%E5%AD%97/","content":"<blockquote>\n<p>本文参考自<a\nhref=\"https://zhuanlan.zhihu.com/p/137947734\">知乎</a></p>\n</blockquote>\n<p>C++中explicit常用于构造函数前，防止因隐式转换而导致错误的发生。本文将通过构造函数带有和不带有explicit两个例子，从而说明explicit的作用</p>\n<span id=\"more\"></span>\n<h1 id=\"没有explicit\">没有explicit</h1>\n<p>以下代码为不含有<code>explicit</code>的示例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">Foo</span>(<span class=\"type\">int</span> a) &#123;</span><br><span class=\"line\">      value_ = a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"type\">int</span> value_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Foo <span class=\"title\">instance</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;origin value:&quot;</span> &lt;&lt; instance.<span class=\"built_in\">GetValue</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    instance = <span class=\"number\">12</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;modifyed value:&quot;</span> &lt;&lt; instance.<span class=\"built_in\">GetValue</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行程序，得到以下结果:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">origin value:20</span><br><span class=\"line\">modifyed value:12</span><br></pre></td></tr></table></figure>\n<p>这里其实进行了隐式转换，<code>instance = 12</code>被隐式转换成为<code>instance = A tmp(2)</code>。</p>\n<h1 id=\"含有explicit的情况\">含有explicit的情况</h1>\n<p>以下代码为含有explicit的示例。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">      value_ = a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"type\">int</span> value_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Foo <span class=\"title\">instance</span><span class=\"params\">(<span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;origin value:&quot;</span> &lt;&lt; instance.<span class=\"built_in\">GetValue</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    instance = <span class=\"number\">12</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;modifyed value:&quot;</span> &lt;&lt; instance.<span class=\"built_in\">GetValue</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当编译的时候，出现下面的错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">test.cc: In function ‘int main()’:</span><br><span class=\"line\">test.cc:18:16: error: no match for ‘operator=’ (operand types are ‘Foo’ and ‘int’)</span><br><span class=\"line\">     instance = 12;</span><br><span class=\"line\">                ^~</span><br><span class=\"line\">test.cc:2:7: note: candidate: constexpr Foo&amp; Foo::operator=(const Foo&amp;)</span><br><span class=\"line\"> class Foo &#123;</span><br><span class=\"line\">       ^~~</span><br><span class=\"line\">test.cc:2:7: note:   no known conversion for argument 1 from ‘int’ to ‘const Foo&amp;’</span><br><span class=\"line\">test.cc:2:7: note: candidate: constexpr Foo&amp; Foo::operator=(Foo&amp;&amp;)</span><br><span class=\"line\">test.cc:2:7: note:   no known conversion for argument 1 from ‘int’ to ‘Foo&amp;&amp;’</span><br></pre></td></tr></table></figure>\n<p>因此，再加上explicit后，将不会进行隐式转换。</p>\n<h1 id=\"总结\">总结</h1>\n<p>explicit关键字的作用就是防止类构造函数的隐式自动转换。</p>\n<p>explicit在下面两种情况下有效：</p>\n<ul>\n<li>类的构造函数只有一个参数时；</li>\n<li>类的构造函数中除了第一个参数以外，其他参数都有默认值的时候。(第一个参数可以有默认值，也可以没有)</li>\n</ul>\n<p>google\nC++规范中也约定所有单参数的构造函数都必须是显示的，即使用explicit关键字。</p>\n","categories":["cpp"],"tags":["cpp"]},{"title":"forward和move","url":"/2024/07/28/cpp/forward%E5%92%8Cmove/","content":"<p>既然左值引用和右值引用都是地址，那么它们和指针有什么区别呢？引用可以看做是被限制的指针，和普通指针的区别在于，引用只能在声明的时候初始化，且不可更改。可以发现，引用和指针常量在功能上是等同的。</p>\n<span id=\"more\"></span>\n<h1 id=\"stdmove\">std::move</h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"type\">int</span>&amp;&amp; t)</span> </span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt;<span class=\"string\">&quot;rvalue\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"type\">int</span>&amp; t)</span></span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt;<span class=\"string\">&quot;lvalue\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>&amp;&amp; a =<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">function</span>(a);<span class=\"comment\">//lvalue</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>假设没有<code>std::move</code>，如果我们想用函数1来处理a对应的资源数据，是不可能实现的。根据前面的讲解我们可以知道，如果某块资源能够通过变量名获取，那么这块资源是可取地址的，换句话说，它是一个左值引用。因此当我们把一个引用名传递给<code>function()</code>，调用的始终是函数2。<code>std::move</code>的作用就是告诉编译器，用函数1来处理引用a指向的数据。</p>\n<h1 id=\"stdforward\">std::forward</h1>\n<p>首先解释一下什么是完美转发，它指的是函数模板可以将自己的参数“完美”地转发给内部调用的其它函数。所谓完美，即不仅能准确地转发参数的值，还能保证被转发参数的左、右值属性不变。举个例子（注意！本例中使用右值的方式并没有提高运行效率，因为它不满足我们前面提到的三个要求，这样写只是为了说明完美转发的作用）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"type\">int</span>&amp;&amp; t)</span> </span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt;<span class=\"string\">&quot;rvalue\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"type\">int</span>&amp; t)</span></span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt;<span class=\"string\">&quot;lvalue\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> &amp; num = n;</span><br><span class=\"line\">    <span class=\"built_in\">function</span>(num); <span class=\"comment\">// 输出lvalue</span></span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;&amp; num2 = <span class=\"number\">11</span>;</span><br><span class=\"line\">    <span class=\"built_in\">function</span>(num2); <span class=\"comment\">// 输出lvalue</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们期望<code>function(num2);</code>输出<code>rvalue</code>，但实际上输出的是<code>lvalue</code>，这是因为右值引用<code>num2</code>被<code>11</code>初始化后，<code>num2</code>就是一个有名称、或者说可以取地址的值了，换句话说，经过编译后，<code>num2</code>由右值引用变成了左值引用。我们修改一下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> &amp; num = n;</span><br><span class=\"line\">    <span class=\"built_in\">function</span>(std::forward&lt;<span class=\"type\">int</span>&gt;(num)); <span class=\"comment\">// 输出lvalue</span></span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;&amp; num2 = <span class=\"number\">11</span>;</span><br><span class=\"line\">    <span class=\"built_in\">function</span>(std::forward&lt;<span class=\"type\">int</span>&gt;(num2)); <span class=\"comment\">// 输出rvalue</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果与预期相符，也就是说完美转发能够保证左值引用在传递过程中始终是左值引用，右值引用在传递过程中始终是右值引用。其实我们把代码修改如下，也能得到同样的输出结果：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> &amp; num = n;</span><br><span class=\"line\">    <span class=\"built_in\">function</span>(num); <span class=\"comment\">// 输出lvalue</span></span><br><span class=\"line\">    <span class=\"type\">int</span> &amp;&amp; num2 = <span class=\"number\">11</span>;</span><br><span class=\"line\">    <span class=\"built_in\">function</span>(std::<span class=\"built_in\">move</span>(num2)); <span class=\"comment\">// 输出rvalue</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们想调用函数1，直接把变量名传递给<code>function</code>，如果我们想调用函数2，对变量名<code>move</code>操作后再传递给<code>function</code>就可以了，代码也很简洁，既然如此，为什么还要引入<code>std::forward</code>？其实在非模板编程中，由于我们很容易知道每个引用到底是左值引用还是右值引用，完全可以不用<code>std::forward</code>；但是在模板编程中，经过层层引用折叠之后，我们很难知道某个类型是左值引用类型还是右值引用类型，<code>std::forward</code>就是为了简化模板编程而出现的</p>\n","categories":["cpp"],"tags":["cpp"]},{"title":"getopt详解","url":"/2023/05/31/cpp/getopt/","content":"<blockquote>\n<p>转载自<a\nhref=\"https://blog.csdn.net/c1523456/article/details/79173776#commentBox\">csdn</a></p>\n</blockquote>\n<h1 id=\"简介\">简介</h1>\n<p>getopt函数是命令行参数解析函数，在头文件<code>getopt.h</code>中，这里对齐用法做一个简单的介绍。</p>\n<span id=\"more\"></span>\n<h1 id=\"使用说明\">使用说明</h1>\n<p>getopt()函数将传递给mian()函数的argc,argv作为参数，同时接受字符串参数optstring\n--\noptstring是由选项Option字母组成的字符串。关于optstring的格式规范简单总结如下：\n(1) 单个字符，表示该选项Option不需要参数。 (2)\n单个字符后接一个冒号\":\"，表示该选项Option需要一个选项参数Option\nargument。选项参数Option\nargument可以紧跟在选项Option之后，或者以空格隔开。选项参数Option\nargument的首地址赋给optarg。 (3)\n单个字符后接两个冒号\"::\"，表示该选项Option的选项参数Option\nargument是可选的。当提供了Option\nargument时，必须紧跟Option之后，不能以空格隔开，否则getopt()会认为该选项Option没有选项参数Option\nargument，optarg赋值为NULL。相反，提供了选项参数Option\nargument，则optarg指向Option argument。</p>\n<p>为了使用getopt()，我们需要在while循环中不断地调用直到其返回-1为止。每一次调用，当getopt()找到一个有效的Option的时候就会返回这个Option字符，并设置几个全局变量。\ngetopt()设置的全局变量包括： char *optarg －－\n当匹配一个选项后，如果该选项带选项参数，则optarg指向选项参数字符串；若该选项不带选项参数，则optarg为NULL；若该选项的选项参数为可选时，optarg为NULL表明无选项参数，optarg不为NULL时则指向选项参数字符串。</p>\n<p>int optind －－\n下一个待处理元素在argv中的索引值。即下一次调用getopt的时候，从optind存储的位置处开始扫描选项。当getopt()返回-1后，optind是argv中第一个Operands的索引值。optind的初始值为1。\nint opterr －－\nopterr的值非0时，在getopt()遇到无法识别的选项，或者某个选项丢失选项参数的时候，getopt()会打印错误信息到标准错误输出。opterr值为0时，则不打印错误信息。\nint optopt －－\n在上述两种错误之一发生时，一般情况下getopt()会返回'?'，并且将optopt赋值为发生错误的选项。</p>\n<h1 id=\"一个简单的例子\">一个简单的例子</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *unix_socket_path = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *server_host = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> server_port = PORT_DEFAULT;</span><br><span class=\"line\">  <span class=\"type\">int</span> opt;</span><br><span class=\"line\">  <span class=\"keyword\">extern</span> <span class=\"type\">char</span> *optarg;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ((opt = <span class=\"built_in\">getopt</span>(argc, argv, <span class=\"string\">&quot;s:h:p:&quot;</span>)) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (opt) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;s&#x27;</span>:</span><br><span class=\"line\">        unix_socket_path = optarg;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;p&#x27;</span>:</span><br><span class=\"line\">        server_port = <span class=\"built_in\">atoi</span>(optarg);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;h&#x27;</span>:</span><br><span class=\"line\">        server_host = optarg;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["linux"]},{"title":"glog","url":"/2023/05/31/cpp/glog_learn/","content":"<h1 id=\"glog\">glog</h1>\n<p>glog是谷歌开源的C++日志库，这里对glog进行一个简单的学习记录。</p>\n<span id=\"more\"></span>\n<p>c</p>\n<h1 id=\"在cmake中添加glog\">在CMake中添加glog</h1>\n<p>CMakeLists.txt</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.16</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(glog_learn VERSION <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_STANDARD <span class=\"number\">14</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(glog_main main.cpp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用FetchContent添加github外部库</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(FetchContent)</span><br><span class=\"line\"></span><br><span class=\"line\">FetchContent_Declare(glog</span><br><span class=\"line\">        GIT_REPOSITORY https://github.com/google/glog</span><br><span class=\"line\">        GIT_TAG v0.<span class=\"number\">6.0</span>)</span><br><span class=\"line\">FetchContent_MakeAvailable(glog)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加外部库</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(glog_main glog::glog)</span><br></pre></td></tr></table></figure>\n<p>main.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glog/logging.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  FLAGS_log_dir = <span class=\"string\">&quot;~/project/cpp_project/glog_learn/build/log&quot;</span>;</span><br><span class=\"line\">  google::<span class=\"built_in\">InitGoogleLogging</span>(<span class=\"string\">&quot;glog_learn&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">LOG</span>(INFO) &lt;&lt; <span class=\"string\">&quot;Starting&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello world\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多详细信息见<a href=\"https://github.com/google/glog\">官网</a></p>\n<h1 id=\"注意事项\">注意事项</h1>\n<p>不能在conda环境中编译，否则会报错：<code>/usr/bin/ld: CMakeFiles/cleanup_with_absolute_prefix_unittest.dir/src/cleanup_with_absolute_prefix_unittest.cc.oo:(.data.rel.ro._ZTI47CleanImmediatelyWithAbsolutePrefix_logging_Test[_ZTI47CleanImmediatelyWithAbsolutePrefix_logging_Test]+0x10): undefined reference totypeinfo for testing::Test</code>。</p>\n<p>退出conda环境:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda deactivate</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["linux"]},{"title":"locks","url":"/2023/12/13/cpp/locks/","content":"<h1 id=\"x00-背景介绍\">0x00 背景介绍</h1>\n<p>多个线程访问同一个互斥资源的时候，需要保证数据的正确性，其中一个方案就是加锁。spinlock(自旋锁)尽可能的减少线程的阻塞，这对于锁的竞争不激烈，且占用锁时间非常短的代码块来说性能能大幅度的提升，因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗，这些操作会导致线程发生两次上下文切换！</p>\n<p>但是如果锁的竞争激烈，或者持有锁的线程需要长时间占用锁执行同步块，这时候就不适合使用自旋锁了，因为自旋锁在获取锁前一直都是占用\ncpu\n做无用功，同时有大量线程在竞争一个锁，会导致获取锁的时间很长，线程自旋的消耗大于线程阻塞挂起操作的消耗，其它需要\ncpu 的线程又不能获取到 cpu，造成 cpu\n的浪费。所以这种情况下我们要关闭自旋锁。</p>\n<span id=\"more\"></span>\n<h1 id=\"x01-naive-spinlock\">0x01 Naive Spinlock</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpinLock</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">bool</span>&gt; lockFlag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">SpinLock</span>() : <span class=\"built_in\">lockFlag</span>(<span class=\"literal\">false</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> expected = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 使用atomic的compare_exchange_strong来设置锁的状态</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果lockFlag是false（即未被锁定），则设置为true（锁定状态）</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果lockFlag已经是true，则循环等待</span></span><br><span class=\"line\">        <span class=\"comment\">// compare_exchange_strong成功会将新值赋值给lockFlag，失败会将新值赋值给旧值(expected)</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!lockFlag.<span class=\"built_in\">compare_exchange_strong</span>(expected, <span class=\"literal\">true</span>, std::memory_order_acquire)) &#123;</span><br><span class=\"line\">            expected = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里可以添加一些策略来减少CPU的忙等，例如让出CPU时间片</span></span><br><span class=\"line\">            std::this_thread::<span class=\"built_in\">yield</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置锁的状态为false，表示锁已经被释放</span></span><br><span class=\"line\">        lockFlag.<span class=\"built_in\">store</span>(<span class=\"literal\">false</span>, std::memory_order_release);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这种简单的自旋锁有一个问题：<strong>无法保证多线程竞争的公平性</strong>。当多个线程想要获取锁时，谁最先将<code>lockFlag</code>设为<code>false</code>谁就能最先获得锁，这可能会造成某些线程一直都未获取到锁造成<code>线程饥饿</code>。就像我们下课后蜂拥的跑向食堂，下班后蜂拥地挤向地铁不排队。</p>\n<h1 id=\"x02-ticket-lock\">0x02 Ticket Lock</h1>\n<p>就像票据队列管理系统一样。面包店或者服务机构(例如银行)都会使用这种方式来为每个先到达的顾客记录其到达的顺序，而不用每次都进行排队。通常，这种地点都会有一个分配器(叫号器，挂号器等等都行)，先到的人需要在这个机器上取出自己现在排队的号码，这个号码是按照自增的顺序进行的，旁边还会有一个标牌显示的是正在服务的标志，这通常是代表目前正在服务的队列号，当前的号码完成服务后，标志牌会显示下一个号码可以去服务了。ticket\nlock是基于先进先出(FIFO) 队列的机制。它增加了锁的公平性</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TicketLock</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 取票机器，递增序号</span></span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">unsigned</span>&gt; ticket;</span><br><span class=\"line\">    <span class=\"comment\">// 叫号机器</span></span><br><span class=\"line\">    std::atomic&lt;<span class=\"type\">unsigned</span>&gt; nowServing;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">TicketLock</span>() : <span class=\"built_in\">ticket</span>(<span class=\"number\">0</span>), <span class=\"built_in\">nowServing</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> myTicket = ticket.<span class=\"built_in\">fetch_add</span>(<span class=\"number\">1</span>, std::memory_order_relaxed);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (myTicket != nowServing.<span class=\"built_in\">load</span>(std::memory_order_relaxed)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 自旋等待，直到myTicket等于nowServing</span></span><br><span class=\"line\">            std::this_thread::<span class=\"built_in\">yield</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> newServing = nowServing.<span class=\"built_in\">load</span>(std::memory_order_relaxed) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        nowServing.<span class=\"built_in\">store</span>(newServing, std::memory_order_relaxed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>TicketLock\n虽然解决了公平性的问题，但是多处理器系统上，每个进程/线程占用的处理器都在读写同一个变量<code>ticket</code>取号\n，每次读写操作都必须在多个处理器缓存之间进行缓存同步，这会导致繁重的系统总线和内存的流量，大大降低系统整体的性能。</p>\n<h1 id=\"x03-clh-lock\">0x03 CLH Lock</h1>\n<p>上面说到Ticket Lock 是基于队列的，那么 CLH Lock\n就是基于链表设计的，CLH的发明人是：Craig，Landin and\nHagersten，用它们各自的字母开头命名。CLH\n是一种基于链表的可扩展，高性能，公平的自旋锁，申请线程只能在本地变量上自旋，它会不断轮询前驱的状态，如果发现前驱释放了锁就结束自旋。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CLHLock</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">        std::atomic&lt;<span class=\"type\">bool</span>&gt; locked;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::atomic&lt;Node*&gt; tail;</span><br><span class=\"line\">    <span class=\"comment\">// thread_local表示每个线程都有一个这样的副本</span></span><br><span class=\"line\">    <span class=\"keyword\">thread_local</span> <span class=\"type\">static</span> Node* myNode;</span><br><span class=\"line\">    <span class=\"keyword\">thread_local</span> <span class=\"type\">static</span> Node* myPred;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CLHLock</span>() &#123;</span><br><span class=\"line\">        tail.<span class=\"built_in\">store</span>(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        myNode = <span class=\"keyword\">new</span> Node&#123;<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">        myNode-&gt;locked.<span class=\"built_in\">store</span>(<span class=\"literal\">true</span>, std::memory_order_relaxed);</span><br><span class=\"line\">        myPred = tail.<span class=\"built_in\">exchange</span>(myNode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myPred != null) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 前驱节点不为null表示当锁被其他线程占用，通过不断轮询判断前驱节点的锁标志位等待前驱节点释放锁</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (myPred-&gt;locked.<span class=\"built_in\">load</span>(std::memory_order_acquire)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 自旋等待</span></span><br><span class=\"line\">                std::this_thread::<span class=\"built_in\">yield</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不存在前驱节点，表示该锁没有被其他线程占用，则当前线程获得锁</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> tmp = myNode;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前myNode不是尾节点，将当前的locked状态设置为0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!tail.<span class=\"built_in\">compare_exchange_strong</span>(tmp, <span class=\"literal\">nullptr</span>, std::memory_order_acquire)) &#123;</span><br><span class=\"line\">            myNode-&gt;locked.<span class=\"built_in\">store</span>(<span class=\"literal\">false</span>, std::memory_order_release);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> myNode;</span><br><span class=\"line\">        myNode = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">thread_local</span> CLHLock::Node* CLHLock::myNode = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"keyword\">thread_local</span> CLHLock::Node* CLHLock::myPred = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"x04-mcs-lock\">0x04 MCS Lock</h1>\n<p>MCS Spinlock\n是一种基于链表的可扩展、高性能、公平的自旋锁，申请线程只在本地变量上自旋，直接前驱负责通知其结束自旋，从而极大地减少了不必要的处理器缓存同步的次数，降低了总线和内存的开销。MCS\n来自于其发明人名字的首字母：John Mellor-Crummey 和 Michael Scott。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;atomic&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">mcs_node</span> &#123;</span><br><span class=\"line\">    mcs_node *next;</span><br><span class=\"line\">    <span class=\"type\">bool</span> locked;</span><br><span class=\"line\">&#125; mcs_node;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">mcs_lock</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">mcs_lock</span>():<span class=\"built_in\">tail</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      std::cout &lt;&lt; <span class=\"string\">&quot;lock\\n&quot;</span>;</span><br><span class=\"line\">      <span class=\"comment\">/* Atomically place ourselves at the end of the queue: */</span></span><br><span class=\"line\">      qnode.locked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      qnode.next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">      <span class=\"type\">const</span> <span class=\"keyword\">auto</span> predecessor = tail.<span class=\"built_in\">exchange</span>(&amp;qnode);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * If tail was nullptr, predecesor is nullptr, thus nobody has been waiting,</span></span><br><span class=\"line\"><span class=\"comment\">       * and we&#x27;ve acquired the lock.</span></span><br><span class=\"line\"><span class=\"comment\">       * Otherwise, we need to place ourselves in the queue, and spin:</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (predecessor != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">           * If the lock is taken, there&#x27;s two cases:</span></span><br><span class=\"line\"><span class=\"comment\">           * 1. Either there is nobody waiting on the lock, and *tail == this.qnode (more</span></span><br><span class=\"line\"><span class=\"comment\">           *    on this later)</span></span><br><span class=\"line\"><span class=\"comment\">           * 2. One or more CPUs are waiting on the lock, and *tail is the tail of the queue</span></span><br><span class=\"line\"><span class=\"comment\">           * Either way, we mark the lock is taken:</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">/* Link ourselves to the tail of the queue: */</span></span><br><span class=\"line\">          predecessor-&gt;next = &amp;qnode;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">/* Now we can spin on a local variable: */</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (qnode.locked) &#123;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* We are holding the lock, therefore qnode.next is our successor: */</span></span><br><span class=\"line\">      <span class=\"keyword\">auto</span> *successor = qnode.next;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (successor == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">auto</span> *expcted = &amp;qnode;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (tail.<span class=\"built_in\">compare_exchange_strong</span>(expcted, <span class=\"literal\">nullptr</span>, std::memory_order_acquire)) &#123;</span><br><span class=\"line\">              <span class=\"comment\">/* No CPUs were waiting for the lock, set it to nullptr: */</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * We could not set our successor to nullptr, therefore qnode.next is out of sync with tail,</span></span><br><span class=\"line\"><span class=\"comment\">       * therefore another CPU is in the middle of `enter`, prior to linking themselves in the queue.</span></span><br><span class=\"line\"><span class=\"comment\">       * We wait for that to happen:</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (successor == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里非常关键。可能出现的情况是在赋值的那一刻后继节点为空，但是立刻有新的节点进入了，这样就会导致死循环</span></span><br><span class=\"line\">        successor = qnode.next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* The other CPU has linked themselves, all we need to do is wake it up as the next-in-line: */</span></span><br><span class=\"line\">      successor-&gt;locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::atomic&lt;<span class=\"keyword\">struct</span> <span class=\"title class_\">mcs_node</span> *&gt; tail;</span><br><span class=\"line\">    <span class=\"keyword\">thread_local</span> <span class=\"type\">static</span> mcs_node qnode;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">thread_local</span> mcs_node mcs_lock::qnode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  mcs_lock lock;</span><br><span class=\"line\">  <span class=\"type\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;hello&quot;</span> &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">pragma</span> omp parallel for default(none) shared(lock, counter)</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">    lock.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">    ++counter;</span><br><span class=\"line\">    lock.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;counter=&quot;</span> &lt;&lt; counter &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>都是基于链表，不同的是CLH\nLock是基于隐式链表，没有真正的后续节点属性，MCS\nLock是显示链表，有一个指向后续节点的属性。</li>\n<li>将获取锁的线程状态借助节点(node)保存,每个线程都有一份独立的节点，这样就解决了Ticket\nLock多处理器缓存同步的问题。</li>\n</ul>\n","categories":["cpp"],"tags":["C++"]},{"title":"malloc详解","url":"/2024/07/28/cpp/malloc%E8%AF%A6%E8%A7%A3/","content":"<h1 id=\"procpid\">/proc/pid</h1>\n<p>对于每个进程，<code>/proc</code>都有一个以进程ID（PID）命名的子目录，如<code>/proc/1863</code>，其中包含了特定于该进程的信息。</p>\n<p>以<code>/proc/1863</code>为例，这是一个特定于PID为1863的进程的目录。下面是<code>/proc/[pid]</code>目录中一些重要文件或子目录的作用：</p>\n<span id=\"more\"></span>\n<ul>\n<li><code>cmdline</code>：包含了启动该进程的命令行命令。</li>\n<li><code>cwd</code>：是一个符号链接，指向该进程的当前工作目录。</li>\n<li><code>environ</code>：包含了进程的环境变量列表。</li>\n<li><code>exe</code>：是一个符号链接，指向启动该进程的可执行文件。</li>\n<li><code>fd</code>：是一个目录，包含了该进程打开的所有文件描述符的符号链接。</li>\n<li><code>maps</code>：提供了内存映射信息，包括库文件等。</li>\n<li><code>mem</code>：提供了对该进程虚拟内存的访问。</li>\n<li><code>status</code>：包含了该进程的状态信息，如进程ID、线程数、内存使用等。\n<ul>\n<li>VmPeak /\nVmSize：最大/当前进程正在占用的内存总大小。听起来不错，但实际上，这并不是一个好的评估内存的数据的办法。因为它包含了\n1）申请但实际上未使用的内存。（malloc一段地址空间，但不使用它）\n2）共享库使用的代码段地址空间，会被多个进程的VmSize同时统计。即存在重复统计的问题。</li>\n<li>VmHWM /\nVmRss：最大时/当前应用程序正在使用的物理内存的大小。没有被交换到swap的内存。是评估进程内存使用量的重要依据。</li>\n<li>VmData：包含initialized\ndata+bss+heap。通常不准确，原因是heap的大小不准确。系统常常出于优化性能的考虑，多申请栈空间。</li>\n<li>VmExe：代码段中不包含lib的部分，即进程可执行文件的部分</li>\n<li>VmLib： 代码段中lib的部分。</li>\n</ul></li>\n<li><code>task</code>：是一个目录，包含了该进程所有线程的信息，每个线程都有自己的PID目录。</li>\n</ul>\n<h1 id=\"内存申请\">内存申请</h1>\n<p>当我们使用 C/C++ 编写程序时，如果需要使用内存，就必须先调用\n<code>malloc</code> 函数来申请一块内存。但是，<code>malloc</code>\n真的是申请了内存吗？</p>\n<p>我们通过下面例子来观察 <code>malloc</code>\n到底是不是真的申请了内存：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">void</span> *ptr;</span><br><span class=\"line\">    ptr = <span class=\"built_in\">malloc</span>(<span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>); <span class=\"comment\">// malloc 1GB</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"https://img.singhe.art/image-20240410151830672.png\"\nalt=\"image-20240410151830672\" />\n<figcaption aria-hidden=\"true\">image-20240410151830672</figcaption>\n</figure>\n<p>图中的 <code>VmRSS</code>\n表示进程使用的物理内存大小，但我们明明申请了 1GB\n的内存，为什么只显示使用 404KB 的内存呢？这里就涉及到\n<code>虚拟内存</code> 和 <code>物理内存</code> 的概念了。</p>\n<h1 id=\"物理内存与虚拟内存\">物理内存与虚拟内存</h1>\n<p>下面先来介绍一下 <code>物理内存</code> 与 <code>虚拟内存</code>\n的概念：</p>\n<ul>\n<li><code>物理内存</code>：也就是安装在计算机中的内存条，比如安装了 2GB\n大小的内存条，那么物理内存地址的范围就是 0 ~ 2GB。</li>\n<li><code>虚拟内存</code>：虚拟的内存地址。由于 CPU\n只能使用物理内存地址，所以需要将虚拟内存地址转换为物理内存地址才能被 CPU\n使用，这个转换过程由\n<code>MMU（Memory Management Unit，内存管理单元）</code>\n来完成。<code>虚拟内存</code> 大小不受 <code>物理内存</code>\n大小的限制，在 32 位的操作系统中，每个进程的虚拟内存空间大小为 0 ~\n4GB。</li>\n</ul>\n<p>程序中使用的内存地址都是虚拟内存地址，也就是说，我们通过\n<code>malloc</code>\n函数申请的内存都是虚拟内存。实际上，内核会为每个进程管理其虚拟内存空间，并且会把虚拟内存空间划分为多个区域，如图所示：</p>\n<figure>\n<img\nsrc=\"https://pic4.zhimg.com/80/v2-4710dcd77e35523345965f9d3aba0dab_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>我们来分析一下这些区域的作用：</p>\n<ul>\n<li><code>代码段</code>：用于存放程序的可执行代码。</li>\n<li><code>数据段</code>：用于存放程序的全局变量和静态变量。</li>\n<li><code>堆空间</code>：用于存放由 <code>malloc</code>\n申请的内存。</li>\n<li><code>栈空间</code>：用于存放函数的参数和局部变量。</li>\n<li><code>内核空间</code>：存放 Linux 内核代码和数据。</li>\n</ul>\n<h1 id=\"brk指针\">brk指针</h1>\n<p>由此可知，通过 <code>malloc</code> 函数申请的内存地址是由\n<code>堆空间</code> 分配的（其实还有可能从 <code>mmap</code>\n区分配，这种情况暂时忽略）。在内核中，使用一个名为 <code>brk</code>\n的指针来表示进程的 <code>堆空间</code> 的顶部，如图所示：</p>\n<figure>\n<img\nsrc=\"https://pic3.zhimg.com/80/v2-f84c20dd688accf3608532a5904dbf76_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>所以，通过移动 <code>brk</code>\n指针就可以达到申请（向上移动）和释放（向下移动）堆空间的内存。例如申请\n1024 字节时，只需要把 <code>brk</code> 向上移动 1024\n字节即可，如图所示：</p>\n<figure>\n<img\nsrc=\"https://pic4.zhimg.com/80/v2-9e3484ac80904eafbf0cfb4758767a4f_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>事实上，<code>malloc</code> 函数就是通过移动 <code>brk</code>\n指针来实现申请和释放内存的，Linux 提供了一个名为 <code>brk()</code>\n的系统调用来移动 <code>brk</code> 指针。</p>\n<h1 id=\"内存映射\">内存映射</h1>\n<p>现在我们知道，<code>malloc</code> 函数只是移动 <code>brk</code>\n指针，但并没有申请物理内存。前面我们介绍虚拟内存和物理内存的时候介绍过，虚拟内存地址必须映射到物理内存地址才能被使用。如\n图所示：</p>\n<figure>\n<img\nsrc=\"https://pic2.zhimg.com/80/v2-51615028ceb171463172ff50c8ec0d0d_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>如果对没有进行映射的虚拟内存地址进行读写操作，那么将会发生\n<code>缺页异常</code>。Linux 内核会对 <code>缺页异常</code>\n进行修复，修复过程如下：</p>\n<ul>\n<li>获取触发 <code>缺页异常</code>\n的虚拟内存地址（读写哪个虚拟内存地址导致的）。</li>\n<li>查看此虚拟内存地址是否被申请（是否在 <code>brk</code>\n指针内），如果不在 <code>brk</code> 指针内，将会导致 Segmention Fault\n错误（也就是常见的coredump），进程将会异常退出。</li>\n<li>如果虚拟内存地址在 <code>brk</code>\n指针内，那么将此虚拟内存地址映射到物理内存地址上，完成\n<code>缺页异常</code> 修复过程，并且返回到触发异常的地方进行运行。</li>\n</ul>\n<p>从上面的过程可以看出，不对申请的虚拟内存地址进行读写操作是不会触发申请新的物理内存。所以，这就解释了为什么申请\n1GB 的内存，但实际上只使用了 404 KB 的物理内存。</p>\n","categories":["cpp"],"tags":["cpp"]},{"title":"mutex实现","url":"/2022/04/04/cpp/mutex%E5%AE%9E%E7%8E%B0/","content":"<blockquote>\n<p>参考</p>\n<ul>\n<li><a\nhref=\"https://blog.csdn.net/tlxamulet/article/details/79047717\">pthread包的mutex实现分析___pthread_mutex_s-CSDN博客</a></li>\n<li><a\nhref=\"https://www.cnblogs.com/HeyLUMouMou/p/17481385.html\">从C++mutex到futex\n- 别杀那头猪 - 博客园 (cnblogs.com)</a></li>\n</ul>\n</blockquote>\n<p>理论上讲，mutex可用初始值=1的信号量表示，只需一个整数表示其状态：0表示未占用，1表示占用。那么，mutex的资源占用就只是一个int型了？</p>\n<span id=\"more\"></span>\n<p>当然不是，我们可以看一下pthread包中mutex的定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> <span class=\"title class_\">__pthread_mutex_s</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> __lock;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> __count;</span><br><span class=\"line\">    <span class=\"type\">int</span> __owner;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> __nusers;</span><br><span class=\"line\">    <span class=\"comment\">/* KIND must stay at this position in the structure to maintain</span></span><br><span class=\"line\"><span class=\"comment\">       binary compatibility.  */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> __kind;</span><br><span class=\"line\">    <span class=\"type\">int</span> __spins;</span><br><span class=\"line\">    <span class=\"type\">__pthread_list_t</span> __list;</span><br><span class=\"line\">  &#125; __data;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125; <span class=\"type\">pthread_mutex_t</span>;</span><br></pre></td></tr></table></figure>\n<p>这是x86-64处理器下的mutex定义（32位处理器下的定义基本类似），占用32字节的空间。几个比较关键的成员定义如下：\n<code>__lock mutex</code>：锁状态，0表示未占用，1表示占用\n<code>__count</code> : 用于可重入锁，记录owner线程持有锁的次数\n<code>__owner owner</code>: 线程ID <code>__kind</code>:\n记录mutex的类型，有以下几个取值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">　PTHREAD_MUTEX_TIMED_NP，这是缺省值，也就是普通锁。</span><br><span class=\"line\"></span><br><span class=\"line\">　PTHREAD_MUTEX_RECURSIVE_NP，可重入锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁。</span><br><span class=\"line\"></span><br><span class=\"line\">　PTHREAD_MUTEX_ERRORCHECK_NP，检错锁，如果同一个线程重复请求同一个锁，则返回EDEADLK，否则与PTHREAD_MUTEX_TIMED_NP类型相同。</span><br><span class=\"line\"></span><br><span class=\"line\">　PTHREAD_MUTEX_ADAPTIVE_NP，自适应锁，自旋锁与普通锁的混合。</span><br></pre></td></tr></table></figure>\n<p>pthread_mutex_init就是初始化上述的pthread_mutex_t内存结构。</p>\n<p>pthread_mutex_lock处理了几种类型的mutex，细节请看https://github.com/lattera/glibc/blob/master/nptl/pthread_mutex_lock.c。先看普通锁，就是调用LLL_MUTEX_LOCK宏获得锁。LLL_MUTEX_LOCK宏定义我们稍后再看。：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (__builtin_expect (type, PTHREAD_MUTEX_TIMED_NP)</span><br><span class=\"line\">      == PTHREAD_MUTEX_TIMED_NP)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    simple:</span><br><span class=\"line\">      <span class=\"comment\">/* Normal mutex.  */</span></span><br><span class=\"line\">      <span class=\"built_in\">LLL_MUTEX_LOCK</span> (mutex);</span><br><span class=\"line\">      <span class=\"built_in\">assert</span> (mutex-&gt;__data.__owner == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这是可重入锁：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (__builtin_expect (type == PTHREAD_MUTEX_RECURSIVE_NP, <span class=\"number\">1</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* Recursive mutex.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Check whether we already hold the mutex.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mutex-&gt;__data.__owner == id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* Just bump the counter.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (__builtin_expect (mutex-&gt;__data.__count + <span class=\"number\">1</span> == <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"comment\">/* Overflow of the counter.  */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> EAGAIN;</span><br><span class=\"line\"></span><br><span class=\"line\">      ++mutex-&gt;__data.__count;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We have to get the mutex.  */</span></span><br><span class=\"line\">      <span class=\"built_in\">LLL_MUTEX_LOCK</span> (mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">assert</span> (mutex-&gt;__data.__owner == <span class=\"number\">0</span>);</span><br><span class=\"line\">      mutex-&gt;__data.__count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>当发现owner就是自身，只是简单的自增__count成员即返回。否则，调用LLL_MUTEX_LOCK宏获得锁，若能成功获得，设置__count\n= 1，否则挂起。</p>\n<p>这是检错锁，会侦测一个线程重复申请锁的情况，如遇到，报EDEADLK，从而避免这种最简单的死锁情形。若无死锁情形，goto\nsimple语句会跳到普通锁的处理流程。：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">assert</span> (type == PTHREAD_MUTEX_ERRORCHECK_NP);</span><br><span class=\"line\">      <span class=\"comment\">/* Check whether we already hold the mutex.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (__builtin_expect (mutex-&gt;__data.__owner == id, <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EDEADLK;</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> simple;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这是自适应锁：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (__builtin_expect (type == PTHREAD_MUTEX_ADAPTIVE_NP, <span class=\"number\">1</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (! __is_smp)</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> simple;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">LLL_MUTEX_TRYLOCK</span> (mutex) != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> max_cnt = <span class=\"built_in\">MIN</span> (MAX_ADAPTIVE_COUNT,</span><br><span class=\"line\">                 mutex-&gt;__data.__spins * <span class=\"number\">2</span> + <span class=\"number\">10</span>);</span><br><span class=\"line\">      <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cnt++ &gt;= max_cnt)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"built_in\">LLL_MUTEX_LOCK</span> (mutex);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> BUSY_WAIT_NOP</span></span><br><span class=\"line\">          BUSY_WAIT_NOP;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">LLL_MUTEX_TRYLOCK</span> (mutex) != <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      mutex-&gt;__data.__spins += (cnt - mutex-&gt;__data.__spins) / <span class=\"number\">8</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      <span class=\"built_in\">assert</span> (mutex-&gt;__data.__owner == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>从代码看，这种锁分两个阶段。第一阶段是自旋锁（spin\nlock），忙等待一段时间后，若还不能获得锁，则转变成普通锁。\n所谓“忙等待”，在x86处理器下是重复执行nop指令，nop是x86的小延迟函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Delay in spinlock loop.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BUSY_WAIT_NOP   asm (<span class=\"string\">&quot;rep; nop&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n<p>获取锁的核心是LLL_MUTEX_LOCK宏，我们来看其定义：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> LLL_MUTEX_LOCK(mutex) \\</span></span><br><span class=\"line\"><span class=\"meta\">  lll_lock ((mutex)-&gt;__data.__lock, PTHREAD_MUTEX_PSHARED (mutex))</span></span><br></pre></td></tr></table></figure>\n<p>PTHREAD_MUTEX_PSHARED宏表示该锁是进程锁还是线程锁，0表示线程锁，128表示进程锁，因mutex使用的核心算法既可适用于进程也可适用于线程。\n从宏定义可知，获取锁的动作就是尝试修改锁的状态字段：__lock</p>\n<p>lll_lock定义如下，我们只看线程锁部分的代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lll_lock(futex, private) \\</span></span><br><span class=\"line\"><span class=\"meta\">  (void)                                      \\</span></span><br><span class=\"line\"><span class=\"meta\">    (&#123; int ignore1, ignore2;                              \\</span></span><br><span class=\"line\"><span class=\"meta\">       <span class=\"keyword\">if</span> (__builtin_constant_p (private) &amp;&amp; (private) == LLL_PRIVATE)        \\</span></span><br><span class=\"line\"><span class=\"meta\">     __asm __volatile (<span class=\"string\">&quot;cmpxchgl %1, %2\\n\\t&quot;</span>                   \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;jnz _L_lock_%=\\n\\t&quot;</span>                   \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;.subsection 1\\n\\t&quot;</span>                    \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;.type _L_lock_%=,@function\\n&quot;</span>             \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;_L_lock_%=:\\n&quot;</span>                    \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;1:\\tleal %2, %%ecx\\n&quot;</span>                 \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;2:\\tcall __lll_lock_wait_private\\n&quot;</span>           \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;3:\\tjmp 18f\\n&quot;</span>                    \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;4:\\t.size _L_lock_%=, 4b-1b\\n\\t&quot;</span>              \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;.previous\\n&quot;</span>                      \\</span></span><br><span class=\"line\"><span class=\"meta\">               LLL_STUB_UNWIND_INFO_3                 \\</span></span><br><span class=\"line\"><span class=\"meta\">               <span class=\"string\">&quot;18:&quot;</span>                          \\</span></span><br><span class=\"line\"><span class=\"meta\">               : <span class=\"string\">&quot;=a&quot;</span> (ignore1), <span class=\"string\">&quot;=c&quot;</span> (ignore2), <span class=\"string\">&quot;=m&quot;</span> (futex)     \\</span></span><br><span class=\"line\"><span class=\"meta\">               : <span class=\"string\">&quot;0&quot;</span> (0), <span class=\"string\">&quot;1&quot;</span> (1), <span class=\"string\">&quot;m&quot;</span> (futex),           \\</span></span><br><span class=\"line\"><span class=\"meta\">                 <span class=\"string\">&quot;i&quot;</span> (MULTIPLE_THREADS_OFFSET)            \\</span></span><br><span class=\"line\"><span class=\"meta\">               : <span class=\"string\">&quot;memory&quot;</span>);                       \\</span></span><br><span class=\"line\"><span class=\"meta\">       <span class=\"keyword\">else</span> </span></span><br></pre></td></tr></table></figure>\n<dl>\n<dt>这是gcc里嵌入汇编的语法，其中：</dt>\n<dd>\n“=a” (ignore1), “=c” (ignore2), “=m” (futex)\n是输出的寄存器列表，这里的意思表示ignore1使用EAX寄存器，ignore2使用ECX寄存器，futex使用的存储器。\n另外，每个操作数会有一个Number与之对应。如果我们一共使用了n个操作数，那么输出操作里的第一个操作数就是0号，之后递增，所以，%0代表ignore1，%1代表ignore2，%2代表futex。\n</dd>\n<dd>\n<p>“0” (0), “1” (1), “m” (futex)\n是输入寄存器，”0”表示%0操作数，其值为0，亦即设置ignore1=0，同理ignore2=1</p>\n</dd>\n</dl>\n<p>这样cmpxchgl %1, %2等价于： cmpxchgl ignore2 futex\nignore2就是CAS里的新值N，N=1，futex是当前值V，但E又是什么呢？原来cmpxchgl使用了一个隐藏参数EAX代表E，前面已分析出来，EAX是ignore1，其值为0。则现在一切都清晰了，cmpxchgl检查futex（也就是__lock成员）是否为0（表示锁未占用），如是，赋值1（表示锁被占用），同时ZF标志位设置为1（ZF=1，JZ跳转，JNZ不跳转）；否则（说明锁已被占用），ZF标志位为0，JNZ跳转。</p>\n<p>归纳起来就是：先使用CAS判断_lock是否占用，若未占用，直接返回。否则，通过__lll_lock_wait_private调用SYS_futex系统调用迫使线程进入沉睡。\n上述过程就是所谓的FUTEX同步机制，CAS是用户态的指令，若无竞争，简单修改锁状态即返回，非常高效，只有发现竞争，才通过系统调用陷入内核态。所以，FUTEX是一种用户态和内核态混合的同步机制，它保证了低竞争情况下的锁获取效率。</p>\n","categories":["cpp"],"tags":["cpp"]},{"title":"rvalue_and_std::move","url":"/2022/08/03/cpp/rvalue-and-std-move/","content":"<blockquote>\n<p>参考文章<a\nhref=\"https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html\">https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html</a></p>\n</blockquote>\n<h1 id=\"问题引出\">问题引出</h1>\n<span id=\"more\"></span>\n<h2 id=\"一个例子\">一个例子</h2>\n<p><code>problem.cc</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">String</span>(<span class=\"type\">const</span> <span class=\"type\">char</span> *s) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;initlize\\n&quot;</span>;</span><br><span class=\"line\">    size_ = <span class=\"built_in\">strlen</span>(s) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    data_ = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[size_];</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(data_, s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ~<span class=\"built_in\">String</span>() &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;call deconstructor\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> []data_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// copy</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span>(<span class=\"type\">const</span> String &amp;s) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;call copy constructor\\n&quot;</span>;</span><br><span class=\"line\">    size_ = s.size_;</span><br><span class=\"line\">    data_ = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[size_];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data_, s.data_, size_);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; out, <span class=\"type\">const</span> String &amp;s) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.size_ == <span class=\"number\">0</span> || s.data_ == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out &lt;&lt; s.data_;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"type\">int</span> size_;</span><br><span class=\"line\">  <span class=\"type\">char</span> *data_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;hello&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    String s = <span class=\"built_in\">test</span>();</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;in main function\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让我们编译运行一下：</p>\n<blockquote>\n<p>需要注意使用编译选项 -fno-elide-constructors关闭RVO(Return Value\nOptimization)，否则现在的编译器会给你自动优化</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++ problem.cc -o a.out -fno-elide-constructors</span><br></pre></td></tr></table></figure>\n<p>运行的结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">第一行 initlize</span><br><span class=\"line\">第二行 call copy constructor</span><br><span class=\"line\">第三行 call deconstructor</span><br><span class=\"line\">第四行 call copy constructor</span><br><span class=\"line\">第五行 call deconstructor</span><br><span class=\"line\">第六行 in main function</span><br><span class=\"line\">第七行 call deconstructo</span><br></pre></td></tr></table></figure>\n<p>我们可以看到该程序调用了两次拷贝构造函数和三次析构函数。那么这个程序的流程是怎么样的呢？下面作者将对每一行输出做出解释。</p>\n<h2 id=\"输出解释\">输出解释</h2>\n<h3 id=\"第一行\">第一行</h3>\n<p>在调用<code>test</code>函数之后，<code>String str(\"hello\")</code>会调用构造函数构造对象<code>str</code>\n，对应输出的结果<code>initlize</code>。</p>\n<h3 id=\"第二行\">第二行</h3>\n<p>当<code>test</code>函数返回str的时候，它返回的是一个临时对象，这个临时对象是通过对<code>str</code>拷贝而构造的，而不是直接返回的<code>str</code>本身。因为<code>str</code>只是<code>test</code>函数中的局部变量，它的作用域只在<code>test</code>函数间，不可能跳到函数外再传给主函数中的<code>s</code>，因此<code>test</code>函数返回的只是一个临时变量。</p>\n<h3 id=\"第三行\">第三行</h3>\n<p>上面已经阐明，<code>test</code>函数返回的只是一个临时变量。所以当<code>test</code>函数退出的时候，局部变量<code>str</code>将会被析构。对应第三行的输出。</p>\n<h3 id=\"第四行\">第四行</h3>\n<p>在<code>main</code>函数中，<code>test</code>返回的临时变量会通过拷贝构造函数赋值给<code>s</code>，因此对应第四行中的拷贝构造函数。</p>\n<h3 id=\"第五行\">第五行</h3>\n<p>当临时变量复制给<code>s</code>之后，这个临时变量也就被析构了。因此对第五行的输出。</p>\n<h3 id=\"第六行\">第六行</h3>\n<p>本行的输出在临时变量析构之后发生，在<code>s</code>析构之前输出。</p>\n<h3 id=\"第七行\">第七行</h3>\n<p><code>main</code>函数中的局部变量<code>s</code>析构。</p>\n<h1 id=\"问题说明\">问题说明</h1>\n<p>我们可以看到，<code>test</code>函数本来应该返回的<code>str</code>，但其实返回的是一个临时变量，这就导致了不必要的拷贝构造。</p>\n<p>那么我们有什么办法来解决这个问题呢？将<code>test</code>函数的返回值变成引用类型<code>String &amp;</code>行不行呢？</p>\n<p>这显然是不行的，因为<code>str</code>只是一个临时变量，当<code>test</code>函数结束的时候就会被释放，如果引用一个将被释放的值可能会出错。</p>\n<p>因此对于临时变量这一问题，<code>C++</code>引入了右值(rvalue)和<code>std::move</code>这两个概念。</p>\n<h1 id=\"右值rvalue和stdmove\">右值(rvalue)和std::move</h1>\n<p>什么是右值呢，它与左值相对于。左值也就是我们的变量之类的，它可以放在等号的左边。而右值可以理解为临时变量，<code>C++</code>使用&amp;&amp;作为右值引用的符号。而std::move可以将左值变为右值。</p>\n<p>算了，不想写了，就这样吧。把代码贴上。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"built_in\">String</span>(<span class=\"type\">const</span> <span class=\"type\">char</span> *s) &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;initlize\\n&quot;</span>;</span><br><span class=\"line\">    size_ = <span class=\"built_in\">strlen</span>(s) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    data_ = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[size_];</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(data_, s);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ~<span class=\"built_in\">String</span>() &#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;deallocate string:&quot;</span> &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> []data_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// copy</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span>(<span class=\"type\">const</span> String &amp;s) &#123;</span><br><span class=\"line\">    size_ = s.size_;</span><br><span class=\"line\">    data_ = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[size_];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data_, s.data_, size_);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;allocate and copy string\\n&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// move</span></span><br><span class=\"line\">  <span class=\"built_in\">String</span>(String &amp;&amp;s) &#123;</span><br><span class=\"line\">    size_ = s.size_;</span><br><span class=\"line\">    data_ = s.data_;</span><br><span class=\"line\">    s.size_ = <span class=\"number\">0</span>;</span><br><span class=\"line\">    s.data_ = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">friend</span> std::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(std::ostream&amp; out, <span class=\"type\">const</span> String &amp;s) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.size_ == <span class=\"number\">0</span> || s.data_ == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out &lt;&lt; s.data_;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"type\">int</span> size_;</span><br><span class=\"line\">  <span class=\"type\">char</span> *data_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;test&quot;</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">s</span><span class=\"params\">(<span class=\"string\">&quot;hello&quot;</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 调用move constructor</span></span><br><span class=\"line\">  String b = std::<span class=\"built_in\">move</span>(s);</span><br><span class=\"line\">  <span class=\"comment\">// s的内容被移走了</span></span><br><span class=\"line\">  std::cout &lt;&lt; b &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; s &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// std::string也同样实现了move constructor</span></span><br><span class=\"line\">  std::string ss = <span class=\"string\">&quot;hle&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\">std::string <span class=\"title\">bb</span><span class=\"params\">(std::move(ss))</span></span>;</span><br><span class=\"line\">  std::cout &lt;&lt; bb &lt;&lt; std::endl;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">a</span><span class=\"params\">(<span class=\"string\">&quot;hello&quot;</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["cpp"]},{"title":"std::future","url":"/2023/02/22/cpp/std-future/","content":"<p>参考：<a\nhref=\"https://blog.csdn.net/lizhichao410/article/details/123732787\">https://blog.csdn.net/lizhichao410/article/details/123732787</a></p>\n<h1 id=\"使用背景\">使用背景</h1>\n<p>在C++中使用std::thread可创建一个线程，使用互斥量std::mutex来确保多个线程对共享数据的读写操作同步问题;使用std::condition_variable来解决线程执行顺序的同步问题。那么多个线程之间怎么传递数据呢？其中一种做法是使用一个全局变量，然后让线程之间互斥的访问就可以传递数据，还有一种做法就是使用std::future和std::async。</p>\n<span id=\"more\"></span>\n<h1 id=\"同步操作和异步操作\">同步操作和异步操作</h1>\n<p>同步操作：在函数调用时，在没有得到结果之前该调用不返回，由调用者主动等待这个调用的结果。</p>\n<p>异步操作：在函数调用之后，这个调用就直接返回了，没有返回结果。即当一个异步过程调用发出后，调用者不会立刻得到结果。</p>\n<h1 id=\"stdfuture\">std::future</h1>\n<p>std::future是一个类模板，用来保存一个异步操作的结果，即这是一个未来值，只能在未来某个时候进行获取。</p>\n<ul>\n<li>get()：等待异步执行结果并返回结果，若得不到结果就会一直等待。</li>\n<li>wait():用于等待异步操作执行结束，但并不返回结果</li>\n<li>wait_for():阻塞当前进程，等待异步任务运行一段时间后返回其状态std::future_status，状态是枚举类型：\n<ul>\n<li>std::future_status::deferred:异步操作还没有开始</li>\n<li>std::future_status::ready:异步操作已经完成</li>\n<li>std::future_status::timeout:异步操作超时</li>\n</ul></li>\n</ul>\n<h1 id=\"stdasync\">std::async</h1>\n<p>std::async是一个函数模板，用来启动一个异步任务，和std::thread类似，但std::async是更高级的抽象，异步返回结果保存在std::future中，使用者可以不必进行线程细节的管理。std::async有两种启动策略：</p>\n<ul>\n<li>std::launch::async : 函数必须以异步方式运行，即创建新的线程。</li>\n<li>std::launch::deferred:\n函数只有在std::async所返回的std::future进行get()或wait()调用时才执行，并且调用方会阻塞至运行结束，否则不执行。</li>\n</ul>\n<p>若没有指定策略，则会执行默认策略，将会由操作系统决定是否启动新的线程。</p>\n<h1 id=\"代码示例\">代码示例</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;future&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getDataDemo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;start data query, &quot;</span> &lt;&lt; <span class=\"string\">&quot;threadID: &quot;</span> &lt;&lt; std::this_thread::<span class=\"built_in\">get_id</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">  std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">5</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;execute data query, &quot;</span> &lt;&lt; <span class=\"string\">&quot;threadID: &quot;</span> &lt;&lt; std::this_thread::<span class=\"built_in\">get_id</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">  std::future&lt;<span class=\"type\">int</span>&gt; m_future = std::<span class=\"built_in\">async</span>(std::launch::async, getDataDemo);</span><br><span class=\"line\">  std::future_status m_status;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    m_status = m_future.<span class=\"built_in\">wait_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (m_status) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> std::future_status::ready:</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;data query complete, &quot;</span> &lt;&lt; <span class=\"string\">&quot;threadID: &quot;</span> &lt;&lt; std::this_thread::<span class=\"built_in\">get_id</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> std::future_status::timeout:</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;data query is running, &quot;</span> &lt;&lt; <span class=\"string\">&quot;threadID: &quot;</span> &lt;&lt; std::this_thread::<span class=\"built_in\">get_id</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> std::future_status::deferred:</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;data query delay, &quot;</span> &lt;&lt; <span class=\"string\">&quot;threadID: &quot;</span> &lt;&lt; std::this_thread::<span class=\"built_in\">get_id</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">        m_future.<span class=\"built_in\">wait</span>();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (m_status != std::future_status::ready);</span><br><span class=\"line\">  <span class=\"type\">int</span> ret = m_future.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;data query result, &quot;</span> &lt;&lt; ret &lt;&lt; <span class=\"string\">&quot;threadID: &quot;</span> &lt;&lt; std::this_thread::<span class=\"built_in\">get_id</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["cpp"]},{"title":"std::list详解","url":"/2022/05/31/cpp/std-list%E8%AF%A6%E8%A7%A3/","content":"<blockquote>\n<p>本文转载自<a\nhref=\"https://blog.csdn.net/u014779536/article/details/111301635\">CSDN超级大洋葱806</a></p>\n</blockquote>\n<h1 id=\"stdlist简介\">std::list简介</h1>\n<figure>\n<img src=\"http://img.singhe.art/std::lilst.jpeg\" alt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><code>std::list</code>的定义在头文件<code>&lt;list&gt;</code>中。</p>\n<p>模板类list是一个容器，list是由双向链表来实现的，每个节点存储1个元素。list支持前后两种移动方向。</p>\n<p>优势： 任何位置执行插入和删除动作都非常快。</p>\n<span id=\"more\"></span>\n<p>list与vector的区别：</p>\n<ul>\n<li>list不支持随机存取;</li>\n<li>在list的任何位置执行插入和移除都非常快.插入和删除动作不影响指向其它元素的指针,引用,迭代器,不会造成失效;</li>\n<li>list不支持随机存取,不提供下标操作符和at()函数;</li>\n<li>list没有提供容量,空间重新分配等操作函数,每个元素都有自己的内存;</li>\n<li>list也提供了特殊成员函数,专门用于移动元素.</li>\n</ul>\n<h1 id=\"stdlist-定义对象\">std::list 定义对象</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">list&lt;A&gt; listname;</span><br><span class=\"line\"><span class=\"function\">list&lt;A&gt; <span class=\"title\">listname</span><span class=\"params\">(size)</span></span>;</span><br><span class=\"line\"><span class=\"function\">list&lt;A&gt; <span class=\"title\">listname</span><span class=\"params\">(size,value)</span></span>;</span><br><span class=\"line\"><span class=\"function\">list&lt;A&gt; <span class=\"title\">listname</span><span class=\"params\">(elselist)</span></span>;</span><br><span class=\"line\"><span class=\"function\">list&lt;A&gt; <span class=\"title\">listname</span><span class=\"params\">(first, last)</span></span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"stdlist添加元素\">std::list添加元素</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; x)</span></span>;\t<span class=\"comment\">// 头部添加</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; x)</span></span>;\t\t<span class=\"comment\">// 尾部添加</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"stdlist删除元素\">std::list删除元素</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span></span>;\t\t<span class=\"comment\">// 头部删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span>;\t\t<span class=\"comment\">// 尾部删除</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"stdlist容器容量\">std::list容器容量</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t\t<span class=\"comment\">// 返回元素个数</span></span><br><span class=\"line\"><span class=\"function\">size_type <span class=\"title\">max_size</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;\t\t\t<span class=\"comment\">// 返回list对象最大允许容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resize</span><span class=\"params\">(size_type n, T x=T())</span></span>;\t<span class=\"comment\">// 调整list对象的大小</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"stdlist迭代器\">std::list迭代器</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">begin</span>()\t\t<span class=\"comment\">// 返回指向容器中第一个元素的双向迭代器。</span></span><br><span class=\"line\"><span class=\"built_in\">end</span>()\t\t<span class=\"comment\">// 返回指向容器中最后一个元素所在位置的下一个位置的双向迭代器。</span></span><br><span class=\"line\"><span class=\"built_in\">rbegin</span>()\t<span class=\"comment\">// 返回指向最后一个元素的反向双向迭代器。</span></span><br><span class=\"line\"><span class=\"built_in\">rend</span>()\t\t<span class=\"comment\">// 返回指向第一个元素所在位置前一个位置的反向双向迭代器。</span></span><br><span class=\"line\"><span class=\"built_in\">cbegin</span>()\t<span class=\"comment\">// 和 begin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</span></span><br><span class=\"line\"><span class=\"built_in\">cend</span>()\t\t<span class=\"comment\">// 和 end() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</span></span><br><span class=\"line\"><span class=\"built_in\">crbegin</span>()\t<span class=\"comment\">// 和 rbegin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</span></span><br><span class=\"line\"><span class=\"built_in\">crend</span>()\t\t<span class=\"comment\">// \t和 rend() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改元素。</span></span><br></pre></td></tr></table></figure>\n<p>程序示例如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable:4786)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &lt;iomanip.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot;;&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 格式化输出</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Print_D</span><span class=\"params\">(<span class=\"type\">double</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout.<span class=\"built_in\">width</span>(<span class=\"number\">5</span>);\t\t\t<span class=\"comment\">// 宽度5</span></span><br><span class=\"line\">\tcout.<span class=\"built_in\">precision</span>(<span class=\"number\">1</span>);\t\t<span class=\"comment\">// 保留1位小数</span></span><br><span class=\"line\">\tcout&lt;&lt;std::fixed&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot;, &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Print_I</span><span class=\"params\">(<span class=\"type\">int</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot;,  &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//上定义双向队列</span></span><br><span class=\"line\">\tlist&lt;string&gt;mylist_string;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;<span class=\"built_in\">mylist_double</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//---------初始化mylist_string</span></span><br><span class=\"line\">\tmylist_string.<span class=\"built_in\">push_front</span>(<span class=\"string\">&quot;1:  Jack&quot;</span>);</span><br><span class=\"line\">\tmylist_string.<span class=\"built_in\">push_front</span>(<span class=\"string\">&quot;2:  Tom&quot;</span>);</span><br><span class=\"line\">\tmylist_string.<span class=\"built_in\">push_front</span>(<span class=\"string\">&quot;3:  Mike&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//---------初始化mylist_double</span></span><br><span class=\"line\">\tmylist_double.<span class=\"built_in\">push_front</span>(<span class=\"number\">10.0</span>);</span><br><span class=\"line\">\tmylist_double.<span class=\"built_in\">push_front</span>(<span class=\"number\">20.0</span>);</span><br><span class=\"line\">\tmylist_double.<span class=\"built_in\">push_front</span>(<span class=\"number\">30.0</span>);</span><br><span class=\"line\">\tmylist_double.<span class=\"built_in\">push_front</span>(<span class=\"number\">40.0</span>);</span><br><span class=\"line\">\tmylist_double.<span class=\"built_in\">push_front</span>(<span class=\"number\">50.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//下述是三种容器定义形式</span></span><br><span class=\"line\">\t<span class=\"function\">list&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mylist_int</span><span class=\"params\">(<span class=\"number\">6</span>,<span class=\"number\">0</span>)</span></span>;\t\t\t<span class=\"comment\">// 6个0：0 0 0 0 0 0</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;<span class=\"built_in\">mylist_double2</span>(<span class=\"number\">6</span>,<span class=\"number\">0.0</span>);\t<span class=\"comment\">// 6个0.0：0.0 0.0 0.0 0.0 0.0 0.0</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt;<span class=\"built_in\">elselist</span>(mylist_int);\t\t<span class=\"comment\">// 以其它双向队列初始化</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;<span class=\"built_in\">Iterlist</span>(mylist_double.<span class=\"built_in\">begin</span>(),mylist_double.<span class=\"built_in\">end</span>());\t<span class=\"comment\">// 以其他队列初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//----输出各个容器中的元素</span></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_string:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tlist&lt;string&gt;::iterator iter_String;\t<span class=\"comment\">// 迭代器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(iter_String=mylist_string.<span class=\"built_in\">begin</span>();iter_String!=mylist_string.<span class=\"built_in\">end</span>();iter_String++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstring temp=*iter_String;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(temp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(mylist_double.<span class=\"built_in\">begin</span>(),mylist_double.<span class=\"built_in\">end</span>(),Print_D);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double2:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(mylist_double2.<span class=\"built_in\">begin</span>(),mylist_double2.<span class=\"built_in\">end</span>(),Print_D);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 Iterlist:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(Iterlist.<span class=\"built_in\">begin</span>(),Iterlist.<span class=\"built_in\">end</span>(),Print_D);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_int:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(mylist_int.<span class=\"built_in\">begin</span>(),mylist_int.<span class=\"built_in\">end</span>(),Print_I);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 elselist:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\"> \tfor_each(elselist.<span class=\"built_in\">begin</span>(),elselist.<span class=\"built_in\">end</span>(),Print_I);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//各容器的容量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> size=mylist_string.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> maxsize=mylist_string.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tmylist_string.<span class=\"built_in\">resize</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsize=mylist_double.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tmaxsize=mylist_double.<span class=\"built_in\">max_size</span>();</span><br><span class=\"line\">\tmylist_double.<span class=\"built_in\">resize</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsize=mylist_double2.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tmaxsize=mylist_double2.<span class=\"built_in\">max_size</span>();</span><br><span class=\"line\">\tmylist_double2.<span class=\"built_in\">resize</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsize=Iterlist.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tmaxsize=Iterlist.<span class=\"built_in\">max_size</span>();</span><br><span class=\"line\">\tIterlist.<span class=\"built_in\">resize</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsize=mylist_int.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tmaxsize=mylist_int.<span class=\"built_in\">max_size</span>();</span><br><span class=\"line\">\tmylist_int.<span class=\"built_in\">resize</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsize=elselist.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tmaxsize=elselist.<span class=\"built_in\">max_size</span>();</span><br><span class=\"line\">\telselist.<span class=\"built_in\">resize</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//----再次输出各个容器中的元素</span></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_string:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t\t\t     <span class=\"keyword\">for</span>(iter_String=mylist_string.<span class=\"built_in\">begin</span>();iter_String!=mylist_string.<span class=\"built_in\">end</span>();iter_String++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstring temp=*iter_String;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(temp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(mylist_double.<span class=\"built_in\">begin</span>(),mylist_double.<span class=\"built_in\">end</span>(),Print_D);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double2:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(mylist_double2.<span class=\"built_in\">begin</span>(),mylist_double2.<span class=\"built_in\">end</span>(),Print_D);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 Iterlist:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(Iterlist.<span class=\"built_in\">begin</span>(),Iterlist.<span class=\"built_in\">end</span>(),Print_D);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_int:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(mylist_int.<span class=\"built_in\">begin</span>(),mylist_int.<span class=\"built_in\">end</span>(),Print_I);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 elselist:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\"> \tfor_each(elselist.<span class=\"built_in\">begin</span>(),elselist.<span class=\"built_in\">end</span>(),Print_I);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用迭代器相关的函数</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;::iterator Iter_D;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;::reverse_iterator Iter_rD;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double 所有元素：&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(mylist_double.<span class=\"built_in\">begin</span>(),mylist_double.<span class=\"built_in\">end</span>(),Print_D);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">double</span> tmp=<span class=\"number\">0.0</span>;</span><br><span class=\"line\">\tIter_D=mylist_double.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\ttmp=*Iter_D;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double 的 begin:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;tmp&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tIter_rD=mylist_double.<span class=\"built_in\">rbegin</span>();</span><br><span class=\"line\">\ttmp=*Iter_rD;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;\\r\\n打印 mylist_double 的 rbegin:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;tmp&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tIter_D=mylist_double.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">\tIter_D--; <span class=\"comment\">// 必须--，end为指向最后一个元素所在位置后一个位置</span></span><br><span class=\"line\">\ttmp=*Iter_D;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double 的 end:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;tmp&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tIter_rD=mylist_double.<span class=\"built_in\">rend</span>();</span><br><span class=\"line\">\tIter_rD--; <span class=\"comment\">// 必须--，rend为指向第一个元素所在位置前一个位置</span></span><br><span class=\"line\">\ttmp=*Iter_rD;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double 的 rend:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;tmp&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"> \ttmp=mylist_double.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double 的 front:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;tmp&lt;&lt;endl; <span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">//cout&lt;&lt;mylist_double.front()&lt;&lt;endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \ttmp=mylist_double.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 mylist_double 的 back:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;tmp&lt;&lt;endl; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/9233fcf0f7dfd3bb4834f7192cadabf0.png\"\nalt=\"image-20201216190325162\" />\n<figcaption aria-hidden=\"true\">image-20201216190325162</figcaption>\n</figure>\n<h1 id=\"stdlist判断是否为空\">std::list判断是否为空</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"stdlist元素的存取和访问\">std::list元素的存取和访问</h1>\n<p>list型容器不提供成员函数at()和操作符operator[],可以使用迭代器进行元素的访问.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">double</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot; ,&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化list</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;mylist;</span><br><span class=\"line\">\tmylist.<span class=\"built_in\">push_back</span>(<span class=\"number\">11.1</span>);</span><br><span class=\"line\">\tmylist.<span class=\"built_in\">push_back</span>(<span class=\"number\">21.5</span>);</span><br><span class=\"line\">\tmylist.<span class=\"built_in\">push_back</span>(<span class=\"number\">31.6</span>);</span><br><span class=\"line\">\tmylist.<span class=\"built_in\">push_back</span>(<span class=\"number\">41.7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> count=mylist.<span class=\"built_in\">size</span>();\t<span class=\"comment\">// 获取大小</span></span><br><span class=\"line\">\tfor_each(mylist.<span class=\"built_in\">begin</span>(),mylist.<span class=\"built_in\">end</span>(),print); <span class=\"comment\">// 遍历打印</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;::iterator Iter_S;</span><br><span class=\"line\">\tIter_S=mylist.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;The third element is &quot;</span>&lt;&lt;*(++(++(++Iter_S)))&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"stdlist元素重置\">std::list元素重置</h1>\n<p>list型容器提供了可以重置元素值的成员函数assign(),原型如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assign</span><span class=\"params\">(const_iterator first, const_iterator last)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">assign</span><span class=\"params\">(size_type n, <span class=\"type\">const</span> T&amp; x=T())</span></span>;</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印队列所有元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(list&lt;<span class=\"type\">double</span>&gt;&amp; mylist)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;::iterator Iter;</span><br><span class=\"line\">\tmylist.<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(Iter=mylist.<span class=\"built_in\">begin</span>();Iter!=mylist.<span class=\"built_in\">end</span>();Iter++)</span><br><span class=\"line\">\t&#123;   </span><br><span class=\"line\">\t\tcout&lt;&lt;*Iter&lt;&lt;<span class=\"string\">&quot;,  &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt; list_One,list_Two, list_Three;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 list_One</span></span><br><span class=\"line\">\t<span class=\"type\">double</span> Ele=<span class=\"number\">0.0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t&#123; </span><br><span class=\"line\">\t\tEle=i+i/<span class=\"number\">10.0</span>;</span><br><span class=\"line\">\t\tlist_One.<span class=\"built_in\">push_front</span>(Ele);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_One);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 list_Two</span></span><br><span class=\"line\">\tlist_Two.<span class=\"built_in\">assign</span>(<span class=\"number\">5</span>,<span class=\"number\">5.6</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_Two);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 list_Three</span></span><br><span class=\"line\">\tlist_Three.<span class=\"built_in\">assign</span>(list_One.<span class=\"built_in\">begin</span>(),list_One.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_Three);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/912f190bce61a0315b31efcd441d3df7.png\"\nalt=\"image-20201216191556579\" />\n<figcaption aria-hidden=\"true\">image-20201216191556579</figcaption>\n</figure>\n<h1 id=\"stdlist-交换两个容器的内容\">std::list 交换两个容器的内容</h1>\n<p>list提供了成员函数swap().</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(list&lt;<span class=\"type\">double</span>&gt;&amp; mylist)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt;::iterator Iter;</span><br><span class=\"line\">\tmylist.<span class=\"built_in\">reverse</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Iter = mylist.<span class=\"built_in\">begin</span>(); Iter != mylist.<span class=\"built_in\">end</span>(); Iter++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; *Iter &lt;&lt; <span class=\"string\">&quot;,  &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">double</span>&gt; list_One, list_Two, list_Three;</span><br><span class=\"line\">\t<span class=\"type\">double</span> Ele = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tEle = i + i / <span class=\"number\">10.0</span>;</span><br><span class=\"line\">\t\tlist_One.<span class=\"built_in\">push_front</span>(Ele);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;List_One 输出:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_One);</span><br><span class=\"line\"></span><br><span class=\"line\">\tlist_Two.<span class=\"built_in\">assign</span>(<span class=\"number\">5</span>, <span class=\"number\">5.6</span>);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;List_Two 输出:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_Two);</span><br><span class=\"line\"></span><br><span class=\"line\">\tlist_Three.<span class=\"built_in\">assign</span>(list_One.<span class=\"built_in\">begin</span>(), list_One.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;list_Three 输出:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_Three);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/******** list_One与list_Two交换 **********/</span></span><br><span class=\"line\">\tlist_One.<span class=\"built_in\">swap</span>(list_Two);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;list_one和list_Two交换之后：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;List_One 输出:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_One);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;List_Two 输出:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_Two);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/******** list_One与list_Three交换 **********/</span></span><br><span class=\"line\">\t<span class=\"built_in\">swap</span>(list_One, list_Three);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;list_one和list_Three交换之后：&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;List_One 输出:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_One);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;list_Three 输出:&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(list_Three);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/1036bd24b55658aaee6ad05a9d77a865.png\"\nalt=\"image-20201216192040361\" />\n<figcaption aria-hidden=\"true\">image-20201216192040361</figcaption>\n</figure>\n<h1 id=\"stdlist元素的插入和删除\">std::list元素的插入和删除</h1>\n<figure>\n<img src=\"http://img.singhe.art/58c676ef00065ffc52ca57e70399d1b4.png\"\nalt=\"image-20201216192229458\" />\n<figcaption aria-hidden=\"true\">image-20201216192229458</figcaption>\n</figure>\n<p>insert()的原型：</p>\n<figure>\n<img src=\"http://img.singhe.art/f617ee57d8060ac636b498a14c5a00fe.png\"\nalt=\"image-20201216192328148\" />\n<figcaption aria-hidden=\"true\">image-20201216192328148</figcaption>\n</figure>\n<p>erase()的原型</p>\n<figure>\n<img src=\"http://img.singhe.art/785ab42427d3a947997df64b42c450a6.png\"\nalt=\"image-20201216192405875\" />\n<figcaption aria-hidden=\"true\">image-20201216192405875</figcaption>\n</figure>\n<p>使用示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">OutToScreen</span><span class=\"params\">(<span class=\"type\">int</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot;, &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化mylt</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; mylt;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">\t\tmylt.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印</span></span><br><span class=\"line\">\tfor_each(mylt.<span class=\"built_in\">begin</span>(),mylt.<span class=\"built_in\">end</span>(),OutToScreen);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;---------------------------&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 从尾部删除：</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!mylt.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmylt.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">\t\tfor_each(mylt.<span class=\"built_in\">begin</span>(),mylt.<span class=\"built_in\">end</span>(),OutToScreen);</span><br><span class=\"line\">\t\tcout&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 重新初始化</span></span><br><span class=\"line\">\tmylt.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)</span><br><span class=\"line\">\t\tmylt.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印</span></span><br><span class=\"line\">\tfor_each(mylt.<span class=\"built_in\">begin</span>(),mylt.<span class=\"built_in\">end</span>(),OutToScreen);</span><br><span class=\"line\"> \tcout&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;---------------------------&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 从头部删除</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!mylt.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tmylt.<span class=\"built_in\">erase</span>(mylt.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\t\tfor_each(mylt.<span class=\"built_in\">begin</span>(),mylt.<span class=\"built_in\">end</span>(),OutToScreen);</span><br><span class=\"line\">\t\tcout&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/fcb1102181c68dcf5d141a88cd51e9b1.png\"\nalt=\"image-20201216192606245\" />\n<figcaption aria-hidden=\"true\">image-20201216192606245</figcaption>\n</figure>\n<h1 id=\"stdlist运算符函数\">std::list运算符函数</h1>\n<ul>\n<li>operator ==:判断两个list是否相等</li>\n<li>operator &lt;:判断两个list容器是否\"前者小于后者\"</li>\n<li>operator !=:判断两个list容器是否不相等</li>\n<li>operator &lt;=:判断两个list容器是否\"前者小于或等于后者\"</li>\n<li>operator &gt;:依次类推</li>\n<li>operator &gt;=:依次类推</li>\n</ul>\n<p><strong>使用示例:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">\tcout &lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化L1,L2</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; L1,L2;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tL2.<span class=\"built_in\">assign</span>(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 list L1: &quot;</span>;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 list L2: &quot;</span>;</span><br><span class=\"line\"> \tfor_each(L2.<span class=\"built_in\">begin</span>(),L2.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断是否相等</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L1==L2)</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;L1 和 L2 相等!&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tL2.<span class=\"built_in\">push_back</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 list L1: &quot;</span>;</span><br><span class=\"line\"> \tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;打印 list L2: &quot;</span>;</span><br><span class=\"line\"> \tfor_each(L2.<span class=\"built_in\">begin</span>(),L2.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L1&lt;L2)</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;L1 小于 L2.&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\"> \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(L1&gt;L2)</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;L1 大于 L2.&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L1!=L2)</span><br><span class=\"line\">\t\tcout&lt;&lt;<span class=\"string\">&quot;L1 不等于 L2.&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/1560ec1c2fbc1d7ea2d166a287b40734.png\"\nalt=\"image-20201216193300692\" />\n<figcaption aria-hidden=\"true\">image-20201216193300692</figcaption>\n</figure>\n<h1 id=\"stdlist-merge和sort\">std::list merge()和sort()</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(list&amp; x)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(list&amp; x, greater&lt;T&gt; pr)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sort</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sort</span><span class=\"params\">(greater&lt;T&gt;pr)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>使用示例:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化L1,L2,L3</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; L1,L2,L3;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt;::iterator I1,I2,I3;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tL2.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tL2.<span class=\"built_in\">push_back</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tL3.<span class=\"built_in\">push_back</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">\tL3.<span class=\"built_in\">push_back</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印 L1,L2,L3</span></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L1 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L2 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L2.<span class=\"built_in\">begin</span>(),L2.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L3 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L3.<span class=\"built_in\">begin</span>(),L3.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L1 合并 L2 和 L3 :&quot;</span>;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">merge</span>(L2);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">merge</span>(L3);</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);  <span class=\"comment\">//可知，在list合并之后，所有元素自动按从小到大排序</span></span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tL1.<span class=\"built_in\">sort</span>(<span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());\t\t      <span class=\"comment\">//所有元素自动按从大到小排序</span></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L1 (从大到小排序): &quot;</span>;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);  </span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tL1.<span class=\"built_in\">sort</span>();                            <span class=\"comment\">//默认按从小到大排序</span></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L1 (从小到大排序): &quot;</span>;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);  <span class=\"comment\">//所有元素自动按从大到小排序</span></span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/5cb4e9ab5fa6b91786081297719a34ec.png\"\nalt=\"image-20201216193557273\" />\n<figcaption aria-hidden=\"true\">image-20201216193557273</figcaption>\n</figure>\n<h1 id=\"stdlist-remove-和-remove_if\">std::list remove() 和\nremove_if()</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">const</span> Type&amp; _Val)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">Pred</span>&gt; <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove_if</span><span class=\"params\">(Pred pr)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>使用示例:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot;,  &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否为偶数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_Even</span><span class=\"params\">(<span class=\"type\">int</span> &amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (Ele%<span class=\"number\">2</span>==<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化列表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Origin</span><span class=\"params\">(list&lt;<span class=\"type\">int</span>&gt;&amp; L, <span class=\"type\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp;</span><br><span class=\"line\">\tL.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;num;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttemp=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tL.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor_each(L.<span class=\"built_in\">begin</span>(),L.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; L1;</span><br><span class=\"line\">\t<span class=\"built_in\">Origin</span>(L1,<span class=\"number\">9</span>);\t<span class=\"comment\">// 1 2 3 4 5 6 7 8 9</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加一个9</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> temp;</span><br><span class=\"line\">\ttemp=<span class=\"number\">9</span>;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加一个8</span></span><br><span class=\"line\">\ttemp=<span class=\"number\">8</span>;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;Ouput the list \\&#x27;L1\\&#x27;:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除9</span></span><br><span class=\"line\">\tL1.<span class=\"built_in\">remove</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;Ouput the list \\&#x27;L1\\&#x27;:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除非偶数</span></span><br><span class=\"line\">\tL1.<span class=\"built_in\">remove_if</span>(is_Even);</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;Ouput the list \\&#x27;L1\\&#x27;:&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/b65d6f7f3dac196310842ad1dd3de5b2.png\"\nalt=\"image-20201216194414167\" />\n<figcaption aria-hidden=\"true\">image-20201216194414167</figcaption>\n</figure>\n<h1 id=\"stdlist-splice\">std::list splice()</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// entire list (1)\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splice</span> <span class=\"params\">(const_iterator position, list&amp; x)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splice</span> <span class=\"params\">(const_iterator position, list&amp;&amp; x)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// single element (2)\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splice</span> <span class=\"params\">(const_iterator position, list&amp; x, const_iterator i)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splice</span> <span class=\"params\">(const_iterator position, list&amp;&amp; x, const_iterator i)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// element range (3)\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splice</span> <span class=\"params\">(const_iterator position, list&amp; x,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             const_iterator first, const_iterator last)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">splice</span> <span class=\"params\">(const_iterator position, list&amp;&amp; x,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             const_iterator first, const_iterator last)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>使用示例</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化L1,L2,L3,L0</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt; L1,L2,L3,L0;</span><br><span class=\"line\">\t<span class=\"comment\">//list&lt;int&gt;::iterator I1,I2,I3;</span></span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tL2.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tL2.<span class=\"built_in\">push_back</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tL3.<span class=\"built_in\">push_back</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\"> \tL3.<span class=\"built_in\">push_back</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"> \tL0.<span class=\"built_in\">push_back</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\"> \tL0.<span class=\"built_in\">push_back</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印 L1,L2,L3,L0</span></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L1 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"> \tcout&lt;&lt;<span class=\"string\">&quot;L2 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L2.<span class=\"built_in\">begin</span>(),L2.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L3 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L3.<span class=\"built_in\">begin</span>(),L3.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L0 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L0.<span class=\"built_in\">begin</span>(),L0.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tcout&lt;&lt;<span class=\"string\">&quot;L1 合并 L2:&quot;</span>;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">splice</span>(L1.<span class=\"built_in\">end</span>(),L2);</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tcout&lt;&lt;<span class=\"string\">&quot;L2 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L2.<span class=\"built_in\">begin</span>(),L2.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tcout&lt;&lt;<span class=\"string\">&quot;L1 合并 L0 :&quot;</span>;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">splice</span>(L1.<span class=\"built_in\">end</span>(),L0,(++L0.<span class=\"built_in\">begin</span>()));</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tcout&lt;&lt;<span class=\"string\">&quot;L0 : &quot;</span>;</span><br><span class=\"line\"> \tfor_each(L0.<span class=\"built_in\">begin</span>(),L0.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\"> \tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tcout&lt;&lt;<span class=\"string\">&quot;L1 合并 L3 :&quot;</span>;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">splice</span>(L1.<span class=\"built_in\">end</span>(),L3,L3.<span class=\"built_in\">begin</span>(),L3.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);  <span class=\"comment\">//可知，在list合并之后，所有元素自动按从小到大排序</span></span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L3 : &quot;</span>;</span><br><span class=\"line\">\tfor_each(L3.<span class=\"built_in\">begin</span>(),L3.<span class=\"built_in\">end</span>(),print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tL1.<span class=\"built_in\">sort</span>(<span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());\t\t      <span class=\"comment\">//所有元素自动按从大到小排序</span></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L1 (从大到小排序): &quot;</span>;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);  </span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tL1.<span class=\"built_in\">sort</span>();                            <span class=\"comment\">//默认按从小到大排序</span></span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;L1 (从小到大排序): &quot;</span>;</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),print);  <span class=\"comment\">//所有元素自动按从大到小排序</span></span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/f5ff3457d4f756bb71f1c79287ea62b6.png\"\nalt=\"image-20201216194908034\" />\n<figcaption aria-hidden=\"true\">image-20201216194908034</figcaption>\n</figure>\n<h1 id=\"stdlist-uniqe\">std::list uniqe()</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Print</span><span class=\"params\">(<span class=\"type\">int</span>&amp; Ele)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout&lt;&lt;Ele&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化L1,L2</span></span><br><span class=\"line\">\tlist&lt;<span class=\"type\">int</span>&gt;L1,L2;</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\tL1.<span class=\"built_in\">push_back</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">\tL2.<span class=\"built_in\">assign</span>(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印 L1,L2</span></span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),Print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">\tfor_each(L2.<span class=\"built_in\">begin</span>(),L2.<span class=\"built_in\">end</span>(),Print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 对L1进行排序，然后去重</span></span><br><span class=\"line\">\tL1.<span class=\"built_in\">sort</span>();</span><br><span class=\"line\">\tL1.<span class=\"built_in\">unique</span>();</span><br><span class=\"line\">\tfor_each(L1.<span class=\"built_in\">begin</span>(),L1.<span class=\"built_in\">end</span>(),Print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 对L2进行排序，对满足Pred条件的进行删除</span></span><br><span class=\"line\">\tL2.<span class=\"built_in\">sort</span>();</span><br><span class=\"line\">\tnot_equal_to&lt;<span class=\"type\">int</span>&gt; Pred;</span><br><span class=\"line\">\tL2.<span class=\"built_in\">unique</span>(Pred);</span><br><span class=\"line\">\tfor_each(L2.<span class=\"built_in\">begin</span>(),L2.<span class=\"built_in\">end</span>(),Print);</span><br><span class=\"line\">\tcout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"http://img.singhe.art/0cc6a768d4f2f66f587856a83e4aea50.png\"\nalt=\"image-20201216195540038\" />\n<figcaption aria-hidden=\"true\">image-20201216195540038</figcaption>\n</figure>\n<h1 id=\"stdlist-reverse\">std::list reverse()</h1>\n<p>实现将容器中所有元素用原来相反的顺序进行排列;</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["cpp","STL"]},{"title":"std::mutex","url":"/2022/05/31/cpp/std-mutex/","content":"<blockquote>\n<p>本文转载自<a\nhref=\"https://blog.csdn.net/weixin_42570248/article/details/100849100\">CSDN</a></p>\n</blockquote>\n<h1 id=\"stdmutex\">std::mutex</h1>\n<p>互斥量是一个可以处于两态之一的变量:解锁和加锁。这样，只需要一个二进制位表示它，不过实际上，常常使用一个整型量，0表示解锁，而其他所有的值则表示加锁。互斥量使用两个过程。当一个线程(或进程)需要访问临界区时，它调用mutex_lock。如果该互斥量当前是解锁的(即临界区可用)，此调用成功，调用线程可以自由进入该临界区。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::mutex my_mutex;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tmy_mutex.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;hello world!&quot;</span> &lt;&lt; <span class=\"string\">&quot; i love you!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t\tmy_mutex.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ttest t;</span><br><span class=\"line\">\tstd::vector&lt;std::thread&gt; tvec;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttvec.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">thread</span>(&amp;test::function, &amp;t));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter = tvec.<span class=\"built_in\">begin</span>(); iter != tvec.<span class=\"built_in\">end</span>(); ++iter)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (iter-&gt;<span class=\"built_in\">joinable</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\titer-&gt;<span class=\"built_in\">join</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>互斥量的使用可以在各种方面，比如在对共享数据的读写上，倘若我们多个线程共享同一个数据，那么我们要想保证多线程安全，就必须对共享变量的读写上锁，从而保证线程安全。</p>\n<p><strong><em>注意事项：</em></strong></p>\n<p><strong><em>我们在使用mutex时，要时刻注意lock()与unlock()的加锁临界区的范围，不能太大也不能太小，太大了会导致程序运行效率低下，大小了则不能满足我们对程序的控制。并且我们在加锁之后要及时解锁，否则会造成死锁，lock()与unlock()应该是成对出现。</em></strong></p>\n<h1 id=\"stdlock_guard\">std::lock_guard</h1>\n<p><strong>为了防止我们在使用mutex的过程中意外忘记unlock()，引入了std::lock_guard的类模板，有了该类模板，我们就无需自己去控制对互斥量的加锁与解锁。</strong>为了方便起见，我们针对上述代码进行替换，话不多说，放码过来：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">std::mutex my_mutex;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//my_mutex.lock();</span></span><br><span class=\"line\">\t<span class=\"comment\">//std::cout &lt;&lt; &quot;hello world!&quot; &lt;&lt; &quot; i love you!&quot; &lt;&lt; std::endl;</span></span><br><span class=\"line\">\t ... <span class=\"keyword\">do</span> something</span><br><span class=\"line\">\t<span class=\"comment\">//my_mutex.unlock();</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(my_mutex)</span></span>;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;hello world!&quot;</span> &lt;&lt; <span class=\"string\">&quot; i love you!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\t    <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们执行到 \"std::lock_guard<std::mutex> locker(my_mutex);\"\n这条语句时，便创建了locker对象与我们的互斥量my_mutex绑定在一起了。</p>\n<h1 id=\"stdlock\">std::lock()</h1>\n<p>新的问题出现了，当我们在保护临界区时，有时可能需要获取多个互斥量的锁，这个时候便容易产生死锁现象，为了解决这一问题，我们引入了<strong>std::lock()</strong>，通过std::lock()函数我们可以一次性获取多个互斥量的锁，一旦存在获取不到的锁便全部释放，再次尝试获取：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">std::mutex my_mutex1;</span><br><span class=\"line\">std::mutex my_mutex2;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::<span class=\"built_in\">lock</span>(my_mutex1, my_mutex2);</span><br><span class=\"line\">    <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">    my_mutex1.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">    my_mutex2.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"stdadopt_lock\">std::adopt_lock</h1>\n<p>我们观察代码分析发现，问题再次回到了先前的情况：需要手动unlock！那么我们联想一下，能不能结合std::lock()与我们之前的std::lock_guard类模板，答案是肯定的！这里需要引入一个std::lock_guard的参数：<strong>std::adopt_lock</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">std::mutex my_mutex1;</span><br><span class=\"line\">std::mutex my_mutex2;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::<span class=\"built_in\">lock</span>(my_mutex1, my_mutex2);</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">locker1</span><span class=\"params\">(my_mutex1, std::adopt_lock)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">std::lock_guard&lt;std::mutex&gt; <span class=\"title\">locker2</span><span class=\"params\">(my_mutex2, std::adopt_lock)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并且我们通过代码调试发现，lock_guard类模板对象中没有任何成员函数！也就是说，仅有构造函数与析构函数。接下来我们从底层实现的角度来分析一下lock_guard，其实lock_guard并没有我们想象的那么神奇，它只是通过在构造函数中，完成对互斥量的加锁lock()，而在析构函数中完成对互斥量的解锁unlock()，是一种典型的RAII的机制。然后不同的重载构造函数有不同的实现，比如我们可以通过向构造函数参数中引入std::adpot_lock，这样在构造函数中就不会执行对互斥量的加锁lock()啦！这样的话，我们就通过简单的构造与析构，让我们对互斥量的加锁与解锁操作成对成对的出现啦！因此在使用lock_guard时有一个小技巧(一般人我不告诉他)，我们可以通过代码块的概念，来控制我们的临界区范围！</p>\n<h1 id=\"stdunique_lock\">std::unique_lock</h1>\n<p><strong><em>这里给出另一种模板类std::unique_lock，该模板类的特点相较于std::lock_guard而言，更加的灵活，弹性更高，同时也更加的消耗资源。</em></strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">std::unique_lock成员函数:</span><br><span class=\"line\"><span class=\"built_in\">lock</span>()-&gt;加锁</span><br><span class=\"line\"><span class=\"built_in\">unlock</span>()-&gt;解锁</span><br><span class=\"line\"><span class=\"built_in\">try_lock</span>()-&gt;尝试加锁，若拿到锁则返回<span class=\"literal\">true</span>，否则返回<span class=\"built_in\">false</span>(该函数不阻塞)</span><br><span class=\"line\"><span class=\"built_in\">release</span>()-&gt;返回其管理的mutex的指针，并释放所有权</span><br></pre></td></tr></table></figure>\n<p>其中对于std::unique_lock存在这样的一个参数：<strong>std::defer_lock</strong>，当我们在构造unique_lock对象时若引入了该参数，则会保持其关联的mutex的状态:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::mutex my_mutex;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">            <span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(my_mutex, std::defer_lock)</span></span>;    <span class=\"comment\">// 此时保持my_mutex的状态(unlock)</span></span><br><span class=\"line\">            locker.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">            <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">            locker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">            <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">            locker.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">            <span class=\"comment\">// ... do something</span></span><br><span class=\"line\">            locker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ttest t;</span><br><span class=\"line\">\tstd::vector&lt;std::thread&gt; tvec;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttvec.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">thread</span>(&amp;test::function, &amp;t));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter = tvec.<span class=\"built_in\">begin</span>(); iter != tvec.<span class=\"built_in\">end</span>(); ++iter)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (iter-&gt;<span class=\"built_in\">joinable</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\titer-&gt;<span class=\"built_in\">join</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要我们注意的是，我们的unique_lock一般与一个mutex所关联，它时刻记录着该mutex的状态，若该mutex为lock状态，则在其析构时便要完成对其的unlock，若该mutex为unlock状态，我们则可以通过该unique_lock对象去弹性的执行lock()。我们可以通过各种方法去移交unique_lock对象对mutex的控制权，下面给出一段代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::mutex my_mutex;</span><br><span class=\"line\">\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">return_unique_lock</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">locker</span><span class=\"params\">(my_mutex, std::defer_lock)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> locker;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tstd::unique_lock&lt;std::mutex&gt; locker = <span class=\"built_in\">return_unique_lock</span>();</span><br><span class=\"line\">\t\tlocker.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">// ... do something</span></span><br><span class=\"line\">\t\tstd::cout &lt;&lt; <span class=\"string\">&quot;I love China!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">\t\tlocker.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t<span class=\"function\">std::unique_lock&lt;std::mutex&gt; <span class=\"title\">new_locker</span><span class=\"params\">(std::move(locker))</span></span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ... do something</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ttest t;</span><br><span class=\"line\">\tstd::vector&lt;std::thread&gt; tvec;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttvec.<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">thread</span>(&amp;test::function, &amp;t));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> iter = tvec.<span class=\"built_in\">begin</span>(); iter != tvec.<span class=\"built_in\">end</span>(); ++iter)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (iter-&gt;<span class=\"built_in\">joinable</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\titer-&gt;<span class=\"built_in\">join</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>观察上述代码，我们发现存在一个return_unique_lock()函数，该函数内部，创建了一个unique_lock对象与my_mutex互斥量绑定，然后返回该对象，显而易见，我们知道该函数返回的是一个临时值(右值)，此时观察function()函数内部，我们通过return_unique_lock()函数获取到的临时对象来初始化unique_lock对象，其中底层调用了unique_lock的移动构造函数，在该函数中，将临时对象对my_mutex的控制权移交给了function函数当中的locker对象。</p>\n","categories":["cpp"],"tags":["cpp"]},{"title":"usleep和yield","url":"/2022/04/04/cpp/usleep%E5%92%8Cyield/","content":"<p>yield()放弃的是一次时间片，下一次调度还是可以正常运行的，对当前线程的性能影响比较小一点。因此性能敏感的代码可以使用yield()。</p>\n<p>usleep()放弃的是一段时间，当前线程可能在N个时间片之内都不会被调用运行，对当前线程的性能影响比较大一点。性能不敏感的代码可以使用usleep()系列函数。<strong>一般使用sleep()系列函数都是想在没事做的时候主动降低线程CPU占用率。</strong></p>\n<p>另外可能有一些低级OS实现sleep()系列函数时内部采用自旋锁实现，当前线程并没有放弃消耗CPU时间片,而是一直把时间浪费在进行各种条件判断工作的事情上。</p>\n","categories":["cpp"],"tags":["cpp"]},{"title":"zmq和protobuf安装教程","url":"/2022/05/31/cpp/zmq_protobuf/","content":"<h1 id=\"zmq-protobuf安装教程\">zmq + protobuf安装教程</h1>\n<h2 id=\"环境\">环境</h2>\n<ul>\n<li>centos 7.6</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"环境预安装\">环境预安装</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install -y wget gcc-c++ automake autoconf libtool make lsof vim nano boost git</span><br><span class=\"line\">sudo yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel curl-devel boost-devel readline-devel sqlite-devel kernel-devel</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装libsodium\">安装libsodium</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable.tar.gz --no-check-certificate</span><br><span class=\"line\">tar -zxvf libsodium-1.0.18-stable.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> libsodium-stable/</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make check</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装libzmq\">安装libzmq</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/zeromq/libzmq/releases/download/v4.3.4/zeromq-4.3.4.tar.gz</span><br><span class=\"line\">tar -zxvf zeromq-4.3.4.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> zeromq-4.3.4</span><br><span class=\"line\">./configure --with-libsodium=/usr/local</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装zmqpp\">安装zmqpp</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zeromq/zmqpp.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> zmqpp</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试zmq\">测试zmq</h2>\n<p><strong><em>server.cc</em></strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Hello World server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;zmqpp/zmqpp.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> string endpoint = <span class=\"string\">&quot;tcp://*:5555&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// initialize the 0MQ context</span></span><br><span class=\"line\">  zmqpp::context context;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// generate a pull socket</span></span><br><span class=\"line\">  zmqpp::socket_type type = zmqpp::socket_type::reply;</span><br><span class=\"line\">  <span class=\"function\">zmqpp::socket <span class=\"title\">socket</span> <span class=\"params\">(context, type)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// bind to the socket</span></span><br><span class=\"line\">  socket.<span class=\"built_in\">bind</span>(endpoint);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// receive the message</span></span><br><span class=\"line\">    zmqpp::message message;</span><br><span class=\"line\">    <span class=\"comment\">// decompose the message </span></span><br><span class=\"line\">    socket.<span class=\"built_in\">receive</span>(message);</span><br><span class=\"line\">    string text;</span><br><span class=\"line\">    message &gt;&gt; text;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Do some &#x27;work&#x27;</span></span><br><span class=\"line\">    std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Received Hello&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    socket.<span class=\"built_in\">send</span>(<span class=\"string\">&quot;World&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++ server.cc -o server.app -std=c++11 -lzmq -lzmqpp</span><br></pre></td></tr></table></figure>\n<p><strong><em>client.cc</em></strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Hello World client</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;zmqpp/zmqpp.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> string endpoint = <span class=\"string\">&quot;tcp://localhost:5555&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// initialize the 0MQ context</span></span><br><span class=\"line\">  zmqpp::context context;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// generate a push socket</span></span><br><span class=\"line\">  zmqpp::socket_type type = zmqpp::socket_type::req;</span><br><span class=\"line\">  <span class=\"function\">zmqpp::socket <span class=\"title\">socket</span> <span class=\"params\">(context, type)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// open the connection</span></span><br><span class=\"line\">  cout &lt;&lt; <span class=\"string\">&quot;Connecting to hello world server…&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">  socket.<span class=\"built_in\">connect</span>(endpoint);</span><br><span class=\"line\">  <span class=\"type\">int</span> request_nbr;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (request_nbr = <span class=\"number\">0</span>; request_nbr != <span class=\"number\">10</span>; request_nbr++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// send a message</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Sending Hello &quot;</span> &lt;&lt; request_nbr &lt;&lt;<span class=\"string\">&quot;…&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    zmqpp::message message;</span><br><span class=\"line\">    <span class=\"comment\">// compose a message from a string and a number</span></span><br><span class=\"line\">    message &lt;&lt; <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    socket.<span class=\"built_in\">send</span>(message);</span><br><span class=\"line\">    string buffer;</span><br><span class=\"line\">    socket.<span class=\"built_in\">receive</span>(buffer);</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Received World &quot;</span> &lt;&lt; request_nbr &lt;&lt; endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++ client.cc -o client.app -std=c++11 -lzmq -lzmqpp</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装protobuf3\">安装protobuf3</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/protocolbuffers/protobuf/releases/download/v21.5/protobuf-cpp-3.21.5.tar.gz</span><br><span class=\"line\">tar -zxvf protobuf-cpp-3.21.5.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> protobuf-3.21.5/</span><br><span class=\"line\">./configure -prefix=/usr/local/</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"protobuf3例子\">protobuf3例子</h2>\n<blockquote>\n<p>内容转载自<a\nhref=\"https://www.jianshu.com/p/d29913998976\">https://www.jianshu.com/p/d29913998976</a></p>\n</blockquote>\n<p>创建game.proto</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">package</span> pt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">req_login</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">string</span> username = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">string</span> password = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">obj_user_info</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">string</span> nickname    = <span class=\"number\">1</span>;    <span class=\"comment\">//昵称</span></span><br><span class=\"line\">    <span class=\"type\">string</span> icon        = <span class=\"number\">2</span>;    <span class=\"comment\">//头像</span></span><br><span class=\"line\">    <span class=\"type\">int64</span>  coin        = <span class=\"number\">3</span>;    <span class=\"comment\">//金币</span></span><br><span class=\"line\">    <span class=\"type\">string</span> location    = <span class=\"number\">4</span>;    <span class=\"comment\">//所属地</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//游戏数据统计</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">obj_user_game_record</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">string</span> time = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int32</span> kill  = <span class=\"number\">2</span>;        <span class=\"comment\">//击杀数</span></span><br><span class=\"line\">    <span class=\"type\">int32</span> dead  = <span class=\"number\">3</span>;        <span class=\"comment\">//死亡数</span></span><br><span class=\"line\">    <span class=\"type\">int32</span> assist= <span class=\"number\">4</span>;        <span class=\"comment\">//助攻数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">rsp_login</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">enum </span><span class=\"title class_\">RET</span> &#123;</span><br><span class=\"line\">        SUCCESS         = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ACCOUNT_NULL    = <span class=\"number\">1</span>;    <span class=\"comment\">//账号不存在</span></span><br><span class=\"line\">        ACCOUNT_LOCK    = <span class=\"number\">2</span>;    <span class=\"comment\">//账号锁定</span></span><br><span class=\"line\">        PASSWORD_ERROR  = <span class=\"number\">3</span>;    <span class=\"comment\">//密码错误</span></span><br><span class=\"line\">        ERROR           = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int32</span> ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">    obj_user_info user_info = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">repeated</span> obj_user_game_record record = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成<code>.h</code>和<code>.cc</code>文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">protoc ./game.proto --cpp_out=./</span><br></pre></td></tr></table></figure>\n<p>创建main.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;game.pb.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pt::rsp_login rsp&#123;&#125;;</span><br><span class=\"line\">    rsp.<span class=\"built_in\">set_ret</span>(pt::rsp_login_RET_SUCCESS);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> user_info = rsp.<span class=\"built_in\">mutable_user_info</span>();</span><br><span class=\"line\">    user_info-&gt;<span class=\"built_in\">set_nickname</span>(<span class=\"string\">&quot;dsw&quot;</span>);</span><br><span class=\"line\">    user_info-&gt;<span class=\"built_in\">set_icon</span>(<span class=\"string\">&quot;345DS55GF34D774S&quot;</span>);</span><br><span class=\"line\">    user_info-&gt;<span class=\"built_in\">set_coin</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">    user_info-&gt;<span class=\"built_in\">set_location</span>(<span class=\"string\">&quot;zh&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> record = rsp.<span class=\"built_in\">add_record</span>();</span><br><span class=\"line\">        record-&gt;<span class=\"built_in\">set_time</span>(<span class=\"string\">&quot;2017/4/13 12:22:11&quot;</span>);</span><br><span class=\"line\">        record-&gt;<span class=\"built_in\">set_kill</span>(i * <span class=\"number\">4</span>);</span><br><span class=\"line\">        record-&gt;<span class=\"built_in\">set_dead</span>(i * <span class=\"number\">2</span>);</span><br><span class=\"line\">        record-&gt;<span class=\"built_in\">set_assist</span>(i * <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string buff&#123;&#125;;</span><br><span class=\"line\">    rsp.<span class=\"built_in\">SerializeToString</span>(&amp;buff);</span><br><span class=\"line\">    <span class=\"comment\">//------------------解析----------------------</span></span><br><span class=\"line\">    pt::rsp_login rsp2&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rsp2.<span class=\"built_in\">ParseFromString</span>(buff)) &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;parse error\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> temp_user_info = rsp2.<span class=\"built_in\">user_info</span>();</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;nickname:&quot;</span> &lt;&lt; temp_user_info.<span class=\"built_in\">nickname</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;coin:&quot;</span> &lt;&lt; temp_user_info.<span class=\"built_in\">coin</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> m = <span class=\"number\">0</span>; m &lt; rsp2.<span class=\"built_in\">record_size</span>(); m++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> temp_record = rsp2.<span class=\"built_in\">record</span>(m);</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;time:&quot;</span> &lt;&lt; temp_record.<span class=\"built_in\">time</span>() &lt;&lt; <span class=\"string\">&quot; kill:&quot;</span> &lt;&lt; temp_record.<span class=\"built_in\">kill</span>() &lt;&lt; <span class=\"string\">&quot; dead:&quot;</span> &lt;&lt; temp_record.<span class=\"built_in\">dead</span>() &lt;&lt; <span class=\"string\">&quot; assist:&quot;</span> &lt;&lt; temp_record.<span class=\"built_in\">assist</span>() &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译，运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 main.cpp game.pb.cc `pkg-config --cflags --libs protobuf` -lpthread -lprotobuf</span><br><span class=\"line\">./a.out</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["zmq","protobuf"]},{"title":"普通函数和内联函数","url":"/2023/02/10/cpp/%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E5%92%8C%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/","content":"<blockquote>\n<p>本篇文章主要验证普通函数和内联函数的区别</p>\n</blockquote>\n<p>Inline_function.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">__attribute__((always_inline))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == <span class=\"number\">20</span>) j *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>__attribute__((always_inline))</code>告诉编译器强制内联。</p>\n<span id=\"more\"></span>\n<p>outline_function.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> __<span class=\"title\">attribute__</span><span class=\"params\">((noinline))</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == <span class=\"number\">20</span>) j *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"built_in\">func</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>__attribute__((noinline))</code>告诉编译器一定不要内联</p>\n<p>让我们分别编译下并反汇编一下可执行文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">g++ -O0 inline_function.cpp -o inline_out_file.app</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">g++ -O0 outline_function.cpp -o outline_out_file.app</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">objdump -d inline_out_file.app | less</span></span><br><span class=\"line\">0000000100003e50 &lt;_main&gt;:</span><br><span class=\"line\">100003e50: 55                          \tpushq\t%rbp</span><br><span class=\"line\">100003e51: 48 89 e5                    \tmovq\t%rsp, %rbp</span><br><span class=\"line\">100003e54: c7 45 d4 00 00 00 00        \tmovl\t$0, -44(%rbp)</span><br><span class=\"line\">100003e5b: c7 45 dc 00 00 00 00        \tmovl\t$0, -36(%rbp)</span><br><span class=\"line\">100003e62: c7 45 d8 00 00 00 00        \tmovl\t$0, -40(%rbp)</span><br><span class=\"line\">100003e69: 83 7d d8 02                 \tcmpl\t$2, -40(%rbp)</span><br><span class=\"line\">100003e6d: 0f 8d 2a 00 00 00           \tjge\t0x100003e9d &lt;_main+0x4d&gt;</span><br><span class=\"line\">100003e73: 8b 45 dc                    \tmovl\t-36(%rbp), %eax</span><br><span class=\"line\">100003e76: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003e79: 89 45 dc                    \tmovl\t%eax, -36(%rbp)</span><br><span class=\"line\">100003e7c: 83 7d dc 14                 \tcmpl\t$20, -36(%rbp)</span><br><span class=\"line\">100003e80: 0f 85 09 00 00 00           \tjne\t0x100003e8f &lt;_main+0x3f&gt;</span><br><span class=\"line\">100003e86: 8b 45 dc                    \tmovl\t-36(%rbp), %eax</span><br><span class=\"line\">100003e89: c1 e0 01                    \tshll\t$1, %eax</span><br><span class=\"line\">100003e8c: 89 45 dc                    \tmovl\t%eax, -36(%rbp)</span><br><span class=\"line\">100003e8f: 8b 45 d8                    \tmovl\t-40(%rbp), %eax</span><br><span class=\"line\">100003e92: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003e95: 89 45 d8                    \tmovl\t%eax, -40(%rbp)</span><br><span class=\"line\">100003e98: e9 cc ff ff ff              \tjmp\t0x100003e69 &lt;_main+0x19&gt;</span><br><span class=\"line\">100003e9d: c7 45 fc 00 00 00 00        \tmovl\t$0, -4(%rbp)</span><br><span class=\"line\">100003ea4: c7 45 f8 00 00 00 00        \tmovl\t$0, -8(%rbp)</span><br><span class=\"line\">100003eab: 83 7d f8 02                 \tcmpl\t$2, -8(%rbp)</span><br><span class=\"line\">100003eaf: 0f 8d 2a 00 00 00           \tjge\t0x100003edf &lt;_main+0x8f&gt;</span><br><span class=\"line\">100003eb5: 8b 45 fc                    \tmovl\t-4(%rbp), %eax</span><br><span class=\"line\">100003eb8: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003ebb: 89 45 fc                    \tmovl\t%eax, -4(%rbp)</span><br><span class=\"line\">100003ebe: 83 7d fc 14                 \tcmpl\t$20, -4(%rbp)</span><br><span class=\"line\">100003ec2: 0f 85 09 00 00 00           \tjne\t0x100003ed1 &lt;_main+0x81&gt;</span><br><span class=\"line\">100003ec8: 8b 45 fc                    \tmovl\t-4(%rbp), %eax</span><br><span class=\"line\">100003ecb: c1 e0 01                    \tshll\t$1, %eax</span><br><span class=\"line\">100003ece: 89 45 fc                    \tmovl\t%eax, -4(%rbp)</span><br><span class=\"line\">100003ed1: 8b 45 f8                    \tmovl\t-8(%rbp), %eax</span><br><span class=\"line\">100003ed4: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003ed7: 89 45 f8                    \tmovl\t%eax, -8(%rbp)</span><br><span class=\"line\">100003eda: e9 cc ff ff ff              \tjmp\t0x100003eab &lt;_main+0x5b&gt;</span><br><span class=\"line\">100003edf: c7 45 f4 00 00 00 00        \tmovl\t$0, -12(%rbp)</span><br><span class=\"line\">100003ee6: c7 45 f0 00 00 00 00        \tmovl\t$0, -16(%rbp)</span><br><span class=\"line\">100003eed: 83 7d f0 02                 \tcmpl\t$2, -16(%rbp)</span><br><span class=\"line\">100003ef1: 0f 8d 2a 00 00 00           \tjge\t0x100003f21 &lt;_main+0xd1&gt;</span><br><span class=\"line\">100003ef7: 8b 45 f4                    \tmovl\t-12(%rbp), %eax</span><br><span class=\"line\">100003efa: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003efd: 89 45 f4                    \tmovl\t%eax, -12(%rbp)</span><br><span class=\"line\">100003f00: 83 7d f4 14                 \tcmpl\t$20, -12(%rbp)</span><br><span class=\"line\">100003f04: 0f 85 09 00 00 00           \tjne\t0x100003f13 &lt;_main+0xc3&gt;</span><br><span class=\"line\">100003f0a: 8b 45 f4                    \tmovl\t-12(%rbp), %eax</span><br><span class=\"line\">100003f0d: c1 e0 01                    \tshll\t$1, %eax</span><br><span class=\"line\">100003f10: 89 45 f4                    \tmovl\t%eax, -12(%rbp)</span><br><span class=\"line\">100003f13: 8b 45 f0                    \tmovl\t-16(%rbp), %eax</span><br><span class=\"line\">100003f16: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003f19: 89 45 f0                    \tmovl\t%eax, -16(%rbp)</span><br><span class=\"line\">100003f1c: e9 cc ff ff ff              \tjmp\t0x100003eed &lt;_main+0x9d&gt;</span><br><span class=\"line\">100003f21: c7 45 ec 00 00 00 00        \tmovl\t$0, -20(%rbp)</span><br><span class=\"line\">100003f28: c7 45 e8 00 00 00 00        \tmovl\t$0, -24(%rbp)</span><br><span class=\"line\">100003f2f: 83 7d e8 02                 \tcmpl\t$2, -24(%rbp)</span><br><span class=\"line\">100003f33: 0f 8d 2a 00 00 00           \tjge\t0x100003f63 &lt;_main+0x113&gt;</span><br><span class=\"line\">100003f39: 8b 45 ec                    \tmovl\t-20(%rbp), %eax</span><br><span class=\"line\">100003f3c: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003f3f: 89 45 ec                    \tmovl\t%eax, -20(%rbp)</span><br><span class=\"line\">100003f42: 83 7d ec 14                 \tcmpl\t$20, -20(%rbp)</span><br><span class=\"line\">100003f46: 0f 85 09 00 00 00           \tjne\t0x100003f55 &lt;_main+0x105&gt;</span><br><span class=\"line\">100003f4c: 8b 45 ec                    \tmovl\t-20(%rbp), %eax</span><br><span class=\"line\">100003f4f: c1 e0 01                    \tshll\t$1, %eax</span><br><span class=\"line\">100003f52: 89 45 ec                    \tmovl\t%eax, -20(%rbp)</span><br><span class=\"line\">100003f55: 8b 45 e8                    \tmovl\t-24(%rbp), %eax</span><br><span class=\"line\">100003f58: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003f5b: 89 45 e8                    \tmovl\t%eax, -24(%rbp)</span><br><span class=\"line\">100003f5e: e9 cc ff ff ff              \tjmp\t0x100003f2f &lt;_main+0xdf&gt;</span><br><span class=\"line\">100003f63: c7 45 e4 00 00 00 00        \tmovl\t$0, -28(%rbp)</span><br><span class=\"line\">100003f6a: c7 45 e0 00 00 00 00        \tmovl\t$0, -32(%rbp)</span><br><span class=\"line\">100003f71: 83 7d e0 02                 \tcmpl\t$2, -32(%rbp)</span><br><span class=\"line\">100003f75: 0f 8d 2a 00 00 00           \tjge\t0x100003fa5 &lt;_main+0x155&gt;</span><br><span class=\"line\">100003f7b: 8b 45 e4                    \tmovl\t-28(%rbp), %eax</span><br><span class=\"line\">100003f7e: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003f81: 89 45 e4                    \tmovl\t%eax, -28(%rbp)</span><br><span class=\"line\">100003f84: 83 7d e4 14                 \tcmpl\t$20, -28(%rbp)</span><br><span class=\"line\">100003f88: 0f 85 09 00 00 00           \tjne\t0x100003f97 &lt;_main+0x147&gt;</span><br><span class=\"line\">100003f8e: 8b 45 e4                    \tmovl\t-28(%rbp), %eax</span><br><span class=\"line\">100003f91: c1 e0 01                    \tshll\t$1, %eax</span><br><span class=\"line\">100003f94: 89 45 e4                    \tmovl\t%eax, -28(%rbp)</span><br><span class=\"line\">100003f97: 8b 45 e0                    \tmovl\t-32(%rbp), %eax</span><br><span class=\"line\">100003f9a: 83 c0 01                    \taddl\t$1, %eax</span><br><span class=\"line\">100003f9d: 89 45 e0                    \tmovl\t%eax, -32(%rbp)</span><br><span class=\"line\">100003fa0: e9 cc ff ff ff              \tjmp\t0x100003f71 &lt;_main+0x121&gt;</span><br><span class=\"line\">100003fa5: 31 c0                       \txorl\t%eax, %eax</span><br><span class=\"line\">100003fa7: 5d                          \tpopq\t%rbp</span><br><span class=\"line\">100003fa8: c3                          \tretq</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">objdump -d outline_out_file.app | less</span></span><br><span class=\"line\">0000000100003f80 &lt;_main&gt;:</span><br><span class=\"line\">100003f80: 55                           pushq   %rbp</span><br><span class=\"line\">100003f81: 48 89 e5                     movq    %rsp, %rbp</span><br><span class=\"line\">100003f84: 48 83 ec 10                  subq    $16, %rsp</span><br><span class=\"line\">100003f88: c7 45 fc 00 00 00 00         movl    $0, -4(%rbp)</span><br><span class=\"line\">100003f8f: e8 9c ff ff ff               callq   0x100003f30 &lt;__Z4funcv&gt;</span><br><span class=\"line\">100003f94: e8 97 ff ff ff               callq   0x100003f30 &lt;__Z4funcv&gt;</span><br><span class=\"line\">100003f99: e8 92 ff ff ff               callq   0x100003f30 &lt;__Z4funcv&gt;</span><br><span class=\"line\">100003f9e: e8 8d ff ff ff               callq   0x100003f30 &lt;__Z4funcv&gt;</span><br><span class=\"line\">100003fa3: e8 88 ff ff ff               callq   0x100003f30 &lt;__Z4funcv&gt;</span><br><span class=\"line\">100003fa8: 31 c0                        xorl    %eax, %eax</span><br><span class=\"line\">100003faa: 48 83 c4 10                  addq    $16, %rsp</span><br><span class=\"line\">100003fae: 5d                           popq    %rbp</span><br><span class=\"line\">100003faf: c3                           retq</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看出来普通函数都是用<code>call</code>来调用函数，生成的可执行文件比较小。而内联函数则是把函数体复制粘贴，生成的可执行文件比较大</p>\n","categories":["cpp"],"tags":["cpp"]},{"title":"模板类继承模板类，子类看不到父类对象","url":"/2022/04/10/cpp/%E6%A8%A1%E6%9D%BF%E7%B1%BB%E7%BB%A7%E6%89%BF%E6%A8%A1%E6%9D%BF%E7%B1%BB%EF%BC%8C%E5%AD%90%E7%B1%BB%E7%9C%8B%E4%B8%8D%E5%88%B0%E7%88%B6%E7%B1%BB%E5%AF%B9%E8%B1%A1/","content":"<h1 id=\"问题重现\">问题重现</h1>\n<p><code>hello.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    T data_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; data_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>出现以下错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hello.cpp: In member function ‘void B&lt;T&gt;::test()’:</span><br><span class=\"line\">hello.cpp:13:22: error: ‘data_’ was not declared in this scope</span><br><span class=\"line\">         std::cout &lt;&lt; data_;</span><br><span class=\"line\">                      ^~~~~</span><br></pre></td></tr></table></figure>\n<h1 id=\"解决方案\">解决方案</h1>\n<h2 id=\"使用this\">使用this</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    T data_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"keyword\">this</span>-&gt;data_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用父类类名\">使用父类类名</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    T data_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; A&lt;T&gt;::data_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用using\">使用using</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    T data_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">using</span> A&lt;T&gt;::data_;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; data_;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["cpp"],"tags":["cpp"]},{"title":"false sharing","url":"/2023/06/09/linux/false-sharing/","content":"<blockquote>\n<p>本文转载自<a\nhref=\"https://blog.csdn.net/qq_28119741/article/details/102815659\">https://blog.csdn.net/qq_28119741/article/details/102815659</a></p>\n</blockquote>\n<h1 id=\"什么是false-sharing\">什么是false sharing</h1>\n<p>这里需要解决这几个问题</p>\n<p>（1）什么是cpu缓存行</p>\n<p>（2）什么是内存屏障</p>\n<p>（3）什么是伪共享</p>\n<p>（4）如何避免伪共享</p>\n<span id=\"more\"></span>\n<h1 id=\"cpu缓存架构\">CPU缓存架构</h1>\n<p>cpu是计算机的心脏，所有运算和程序最终都要由他来执行。</p>\n<p>主内存RAM是数据存在的地方，CPU和主内存之间有好几级缓存，因为即使直接访问主内存相对来说也是非常慢的。</p>\n<p>如果对一块数据做相同的运算多次，那么在执行运算的时候把它加载到离CPU很近的地方就有意义了，比如一个循环计数，你不想每次循环都到主内存中去取这个数据来增长它吧。</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yOTY5MDYzLWIwYTI2MzVhNDM4ZGZlMDUucG5n\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>越靠近CPU的缓存越快也越小</p>\n<p>所以L1缓存很小但很快，并且紧靠着在使用它的CPU内核。</p>\n<p>L2大一些，但也慢一些，并且仍然只能被一个单独的CPU核使用</p>\n<p>L3在现代多核机器中更普遍，仍然更大，更慢，并且被单个插槽上的所有CPU核共享。</p>\n<p>最后，主内存保存着程序运行的所有数据，它更大，更慢，由全部插槽上的所有CPU核共享。</p>\n<p>当CPU执行运算的时候，它先去L1查找所需的数据，再去L2，然后L3，最后如果这些缓存中都没有，所需的数据就要去主内存拿。</p>\n<p>走得越远，运算耗费的时间就越长。所以如果进行一些很频繁的运算，要确保数据在L1缓存中。</p>\n<h1 id=\"cpu缓存行\">CPU缓存行</h1>\n<p>缓存是由缓存行组成的，通常是64字节（常用处理器的缓存行是64字节的，比较旧的处理器缓存行是32字节的），并且它有效地引用主内存中的一块地址。</p>\n<p>一个java的long类型是8字节，因此在一个缓存行中可以存8个long类型的变量</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yOTY5MDYzLTE3M2RiMTU5ZDdjY2Q5NzYucG5n\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>在程序运行的过程中，缓存每次更新都从主内存中加载连续的64个字节。因此，如果访问一个long类型的数组时，当数组中的一个值被加载到缓存中时，另外7个元素也会被加载到缓存中。但是，如果使用的数据结构中的项在内存中不是彼此相邻的，比如链表，那么将得不到免费缓存加载带来的好处。</p>\n<p>不过，这种免费加载也有一个坏处。设想如果我们有个long类型的变量a，它不是数组的一部分，而是一个单独的变量，并且还有另外一个long类型的变量b紧挨着它，那么当加载a的时候将免费加载b。</p>\n<p>看起来似乎没有什么问题，但是如果一个cpu核心的线程在对a进行修改，另一个cpu核心的线程却在对b进行读取。当前者修改a时，会把a和b同时加载到前者核心的缓存行中，更新完a后其它所有包含a的缓存行都将失效，因为其它缓存中的a不是最新值了。而当后者读取b时，发现这个缓存行已经失效了，需要从主内存中重新加载。</p>\n<p>请记着，我们的缓存都是以缓存行作为一个单位来处理的，所以失效a的缓存的同时，也会把b失效，反之亦然。</p>\n<figure>\n<img\nsrc=\"http://img.singhe.art/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yOTY5MDYzLTIzNDExZTFlYTA3ZDhhMTIucG5n\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>这样就出现了一个问题，b和a完全不相干，每次却要因为a的更新需要从主内存重新读取，它被缓存未命中给拖慢了。这就是传说中的伪共享。</p>\n<h1 id=\"伪共享\">伪共享</h1>\n<p>当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行，就会无意中影响彼此的性能，这就是伪共享。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FalseSharingTest</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> throws InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">testPointer</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Pointer</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">testPointer</span><span class=\"params\">(Pointer pointer)</span> throws InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> start = System.<span class=\"built_in\">currentTimeMillis</span>();</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000000</span>; i++) &#123;</span><br><span class=\"line\">                pointer.x++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000000</span>; i++) &#123;</span><br><span class=\"line\">                pointer.y++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        t1.<span class=\"built_in\">start</span>();</span><br><span class=\"line\">        t2.<span class=\"built_in\">start</span>();</span><br><span class=\"line\">        t1.<span class=\"built_in\">join</span>();</span><br><span class=\"line\">        t2.<span class=\"built_in\">join</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(System.<span class=\"built_in\">currentTimeMillis</span>() - start);</span><br><span class=\"line\">        System.out.<span class=\"built_in\">println</span>(pointer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pointer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这个例子，我们声明了一个Pointer的类，它包含了x和y两个变量（必须声明为volatile，保证可见性，关于内存屏障的东西我们后面再讲），一个线程对x进行自增1亿次，一个线程对y进行自增1亿次。</p>\n<p>可以看到，x和y完全没有任何关系，但是更新x的时候会把其它包含x的缓存行失效，同时y也就失效了，运行这段程序输出的时间为3890ms。</p>\n<h1 id=\"如何避免\">如何避免</h1>\n<p>伪共享的原理我们知道了，一个缓存行是64字节，一个long类型是8个字节，所以避免伪共享也很简单，大概有以下三种方式：</p>\n<p>（1）在两个long类型的变量之间再加7个long类型</p>\n<p>我们把上面的pointer改成下面这个结构</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pointer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> x;</span><br><span class=\"line\">    <span class=\"type\">long</span> p1, p2, p3, p4, p5, p6, p7;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次运行程序，会发现输出时间神奇的缩短为695ms</p>\n<p>（2）重新创建自己的long类型，而不是java自带的long修改Pointer如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pointer</span> &#123;</span><br><span class=\"line\">    MyLong x = <span class=\"keyword\">new</span> <span class=\"built_in\">MyLong</span>();</span><br><span class=\"line\">    MyLong y = <span class=\"keyword\">new</span> <span class=\"built_in\">MyLong</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLong</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> value;</span><br><span class=\"line\">    <span class=\"type\">long</span> p1, p2, p3, p4, p5, p6, p7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时把pointer.x++改为pointer.x.value++;等，再次运行程序发现时间是724ms，这样本质上还是填充。</p>\n<p>（3）使用@sun.misc.Contended注解（java8）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">@sun.misc.Contended</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLong</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认使用这个注解是无效的，需要在JVM启动参数加上-XX:-RestrictContended才会生效,再次运行程序发现时间是718ms。注意，以上三种方式中的前两种是通过加字段的形式实现的（上面go代码里的实现也是这样的），加的字段又没有地方使用，可能会被jvm优化掉，所以建议使用第三种方式。</p>\n<p>内存屏障\n1.volatile是一个类型修饰符，volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略。</p>\n<p>2.volatile的特性：</p>\n<p>（1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其它线程来说是立即可见的-》实现可见性</p>\n<p>（2）禁止进行指令重排序（实现有序性）</p>\n<p>（3）volatile只能保证对单次读写的原子性。i++这种操作不能保证原子性</p>\n<p>3.volatile的实现原理中的可见性就是基于内存屏障实现</p>\n<p>内存屏障（Memory Barrier）：又称内存栅栏，是一个CPU指令。</p>\n<p>在程序运行时，为了提高执行性能，编译器和处理器会对指令进行重排序，JVM为了保证在不同的编译器和CPU上有相同的结果，通过插入特定类型的内存屏障来禁止特定类型的编译器重排序和处理器重排序，插入一条内存屏障会告诉编译器和CPU：不管什么指令都不能和这条内存屏障指令重排序</p>\n<h1 id=\"总结\">总结</h1>\n<p>（1）CPU具有多级缓存，越接近CPU的缓存越小也越快</p>\n<p>（2）CPU缓存中的数据是以缓存行为单位处理的；</p>\n<p>（3）CPU缓存行能带来免费加载数据的好处，所以处理数据性能非常高</p>\n<p>（4）CPU缓存行也带来了弊端，多线程处理不相干的变量时会相互影响，也就是伪共享</p>\n<p>（5）避免伪共享的主要思路就是让不相干的变量不要出现在同一个缓存行中；</p>\n<p>1是每两个变量之间加上7个long类型；2是创建自己的long类型，而不是用原生的；3是使用java8的注解</p>\n","categories":["linux"]},{"title":"gdb取消signal","url":"/2024/06/27/linux/gdb%E5%8F%96%E6%B6%88signal/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) info signal SIGUSR2</span><br><span class=\"line\">Signal        Stop      Print   Pass to program Description</span><br><span class=\"line\">SIGUSR1       Yes       Yes     Yes             User defined signal 1</span><br><span class=\"line\">(gdb) handle SIGUSR2 noprint nostop</span><br><span class=\"line\">Signal        Stop      Print   Pass to program Description</span><br><span class=\"line\">SIGUSR1       No        No      Yes             User defined signal </span><br></pre></td></tr></table></figure>\n","categories":["linux"]},{"title":"gdb调试Java程序崩溃","url":"/2024/06/21/linux/gdb%E8%B0%83%E8%AF%95Java%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83/","content":"<blockquote>\n<p>参考<a\nhref=\"https://senlinzhan.github.io/2017/12/31/coredump/\">在Linux生成core\ndump文件</a></p>\n</blockquote>\n<h1 id=\"x00-背景\">0x00 背景</h1>\n<p>Java程序调用C语言生成的动态链接库(.so)，动态链接库有问题Crash了导致Java程序也Crash了，如何调试动态链接库哪里出现了问题。</p>\n<span id=\"more\"></span>\n<h1 id=\"x01-生成coredump文件\">0x01 生成coredump文件</h1>\n<h2 id=\"设置coredump文件大小\">1.1 设置coredump文件大小</h2>\n<p>如果进程在运行期间发生奔溃，操作系统会为进程生成一个快照文件，这个文件就叫做\ncore dump。之后我们可以对 core dump\n文件进行分析，弄清楚进程为什么会奔溃。由于 core dump\n文件会占据一定的磁盘空间，默认情况下，Linux 不允许生成 core dump\n文件。例如，下面的命令显示，Linux 允许的最大 core dump 文件大小为\n0：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ulimit</span> -a | grep core</span></span><br><span class=\"line\">core file size          (blocks, -c) 0</span><br></pre></td></tr></table></figure>\n<p>可以通过下面设置，允许 Linux 生成 core dump\n文件(这个设置只对当前登录回话有效)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ulimit -c unlimited</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置core-dump-文件的路径\">1.2 设置core dump 文件的路径</h2>\n<p>那么 core dump\n会存放在哪个目录呢？这是由系统参数<code>kernel.core_pattern</code>决定的。例如，在\nUbuntu 16.04 中，它的值如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /proc/sys/kernel/core_pattern</span></span><br><span class=\"line\">|/usr/share/apport/apport %p %s %c %P</span><br></pre></td></tr></table></figure>\n<p>在实践中，更好的做法是自己指定 core dump 目录，以及 core dump\n文件的命名方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo vi /etc/sysctl.conf</span></span><br><span class=\"line\">kernel.core_pattern=/var/crash/%E.%p.%t.%s</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo sysctl -p</span></span><br></pre></td></tr></table></figure>\n<p><strong>%p</strong>:替换为导致核心转储的进程ID（PID）。</p>\n<p><strong>%u</strong>:替换为导致核心转储的实际用户ID（UID）。</p>\n<p><strong>%g</strong>:替换为导致核心转储的实际组ID（GID）。</p>\n<p><strong>%s</strong>:替换为导致核心转储的信号编号（导致程序崩溃的信号）。</p>\n<p><strong>%t</strong>:替换为生成转储的时间戳（自1970年1月1日以来的秒数）。</p>\n<p><strong>%h</strong>:替换为主机名。</p>\n<p><strong>%e</strong>:替换为导致核心转储的程序的可执行文件名（不包含路径）。</p>\n<p><strong>%E</strong>:替换为导致核心转储的程序的可执行文件路径。</p>\n<h1 id=\"x02-gdb调试coredump文件\">0x02 gdb调试coredump文件</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">gdb /usr/lib/libtaos.so /var/crash/core.org.example.Mai.3701</span><br></pre></td></tr></table></figure>\n<p>只需要指定动态链接库的路径以及coredump文件就可以调试了</p>\n","categories":["linux"],"tags":["linux"]},{"title":"MineCraft在linux上开服","url":"/2022/05/31/linux/minecraft_server/","content":"<h1 id=\"环境配置\">环境配置</h1>\n<p>发行版为centos 7.6</p>\n<p>现在更新一下环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum update -y</span><br></pre></td></tr></table></figure>\n<p>然后查看一下是否有<code>screen</code>和<code>java</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">screen -version</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>安装<code>screen</code>和<code>java</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install screen</span><br><span class=\"line\">wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.rpm</span><br><span class=\"line\">rpm -i jdk-17_linux-x64_bin.rpm</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"安装和配置minecraft服务器\">安装和配置MineCraft服务器</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /usr/MinecraftServer</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/MinecraftServer</span><br><span class=\"line\">wget https://mohistmc.com/builds/1.19.2/mohist-1.19.2-50-server.jar</span><br></pre></td></tr></table></figure>\n<p>在同一个目录下，创建启动文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim start.sh</span><br></pre></td></tr></table></figure>\n<p>以下为start.sh的内容,<code>Xmx16G</code>设置最大的堆内存为16G,<code>Xms4G</code>设置初始堆内存为4G，当不够程序运行的时候逐渐增加，最大到16G：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -Xmx16G -Xms4G -jar mohist-1.19.2-50-server.jar</span><br><span class=\"line\">stty echo</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用screen\">使用Screen</h1>\n<p>创建新的Screen会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">screen -S MinecraftServer</span><br></pre></td></tr></table></figure>\n<p>查看screen会话，得到会话ID号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">screen -<span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n<p>进入screen会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">screen -r 25519</span><br></pre></td></tr></table></figure>\n<p>启动server</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span>  +x start.sh</span><br><span class=\"line\">./start.sh</span><br></pre></td></tr></table></figure>\n<p>初次启之后需要同意协议，等待要让同意协议的时候，键入<code>true</code>并按下回车继续</p>\n<p>更改<code>server.properties</code>，让非正版用户能够登陆。将<code>online-mode=true</code>修改为<code>online-mode=false</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">online-mode=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n","categories":["linux"],"tags":["MineCraft"]},{"title":"mmap使用实例","url":"/2023/06/27/linux/mmap%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B/","content":"<h1 id=\"引言\">引言</h1>\n<p>通过mmap，能将file的一段内容映射到一段虚拟地址上，我们就可以在这个虚拟地址上对文件进行更改，操作系统会自动将脏数据刷回到磁盘上。</p>\n<span id=\"more\"></span>\n<h1 id=\"例子\">例子</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">128</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//打开文件</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> fd = open(<span class=\"string\">&quot;testdata&quot;</span>,O_RDWR);</span><br><span class=\"line\">\t<span class=\"comment\">//创建mmap</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> *start = (<span class=\"type\">char</span> *)mmap(<span class=\"literal\">NULL</span>,<span class=\"number\">128</span>,PROT_READ|PROT_WRITE,MAP_SHARED,fd,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//读取文件\t</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(buf,start);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>,buf);</span><br><span class=\"line\">\t<span class=\"comment\">//写入文件</span></span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(start,<span class=\"string\">&quot;Write to file!\\n&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\tmunmap(start,<span class=\"number\">128</span>);</span><br><span class=\"line\">\tclose(fd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"xclip的使用\">xclip的使用</h1>\n<p>顺带讲以下linux下怎么在终端和剪贴板间互动</p>\n<blockquote>\n<p>从<a\nhref=\"https://segmentfault.com/a/1190000024579429\">https://segmentfault.com/a/1190000024579429</a>复制</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 查看剪切板中的内容</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">xclip -o</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">xclip -selection c -o</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 将输出复制至剪贴板</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello xclip&quot;</span> | xclip-selection c</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 将文件中的内容全部复制至剪贴板</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">xclip -selection c remade.md</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 将剪切板中的内容粘贴至文件</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">xclip -selection c -o &gt; remade.md</span></span><br></pre></td></tr></table></figure>\n","categories":["linux"]},{"title":"objdum-readelf-ar简单使用","url":"/2023/06/22/linux/objdum-readelf-ar%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","content":"<h1 id=\"file\">file</h1>\n<p>file能够查看文件的类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ file libadd.so </span><br><span class=\"line\">libadd.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=4f628c334595143b6f98886acebd9f8df5a964fa, not stripped</span><br><span class=\"line\">singheart@FX504GE:~/Project/assembly$ file a.o </span><br><span class=\"line\">a.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"size\">size</h1>\n<p>能够查看ELF文件的代码段、数据段和BSS段的长度(dec表示3个段长度的和的十进制，hex表示长度和的十六进制)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ size SimpleSection.o </span><br><span class=\"line\">   text\t   data\t    bss\t    dec\t    hex\tfilename</span><br><span class=\"line\">    182\t      8\t      8\t    198\t     c6\tSimpleSection.o</span><br></pre></td></tr></table></figure>\n<h1 id=\"objcopy\">objcopy</h1>\n<p>使用objcopy工具，可以将图片、MP3音乐等作为目标文件中的一个段</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">objcopy -I binary -O elf32-i386 image.jpg image.o</span><br><span class=\"line\">objdump -ht image.o</span><br></pre></td></tr></table></figure>\n<h1 id=\"objdump\">objdump</h1>\n<h2 id=\"objdump--h\">objdump -h</h2>\n<p><code>objdump -h</code>能够输出ELF文件中各个段的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ objdump -h SimpleSection.o </span><br><span class=\"line\"></span><br><span class=\"line\">SimpleSection.o：     文件格式 elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\">节：</span><br><span class=\"line\">Idx Name          Size      VMA               LMA               File off  Algn</span><br><span class=\"line\">  0 .text         0000005a  0000000000000000  0000000000000000  00000040  2**0</span><br><span class=\"line\">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE</span><br><span class=\"line\">  1 .data         00000008  0000000000000000  0000000000000000  0000009c  2**2</span><br><span class=\"line\">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class=\"line\">  2 .bss          00000008  0000000000000000  0000000000000000  000000a4  2**2</span><br><span class=\"line\">                  ALLOC</span><br><span class=\"line\">  3 .rodata       00000004  0000000000000000  0000000000000000  000000a4  2**0</span><br><span class=\"line\">                  CONTENTS, ALLOC, LOAD, READONLY, DATA</span><br><span class=\"line\">  4 .comment      0000002e  0000000000000000  0000000000000000  000000a8  2**0</span><br><span class=\"line\">                  CONTENTS, READONLY</span><br><span class=\"line\">  5 .note.GNU-stack 00000000  0000000000000000  0000000000000000  000000d6  2**0</span><br><span class=\"line\">                  CONTENTS, READONLY</span><br><span class=\"line\">  6 .eh_frame     00000058  0000000000000000  0000000000000000  000000d8  2**3</span><br><span class=\"line\">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA</span><br></pre></td></tr></table></figure>\n<h2 id=\"objdump--s\">objdump -s</h2>\n<p><code>objdump -s</code>能够将所有段的内容以十六进制的方式打印出来</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ objdump -s SimpleSection.o </span><br><span class=\"line\"></span><br><span class=\"line\">SimpleSection.o：     文件格式 elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\">Contents of section .text:</span><br><span class=\"line\"> 0000 554889e5 4883ec10 897dfc8b 45fc89c6  UH..H....&#125;..E...</span><br><span class=\"line\"> 0010 488d0500 00000048 89c7b800 000000e8  H......H........</span><br><span class=\"line\"> 0020 00000000 90c9c355 4889e548 83ec10c7  .......UH..H....</span><br><span class=\"line\"> 0030 45f80100 00008b15 00000000 8b050000  E...............</span><br><span class=\"line\"> 0040 000001c2 8b45f801 c28b45fc 01d089c7  .....E....E.....</span><br><span class=\"line\"> 0050 e8000000 008b45f8 c9c3               ......E...      </span><br><span class=\"line\">Contents of section .data:</span><br><span class=\"line\"> 0000 54000000 55000000                    T...U...        </span><br><span class=\"line\">Contents of section .rodata:</span><br><span class=\"line\"> 0000 25640a00                             %d..            </span><br><span class=\"line\">Contents of section .comment:</span><br><span class=\"line\"> 0000 00474343 3a202855 62756e74 75203131  .GCC: (Ubuntu 11</span><br><span class=\"line\"> 0010 2e312e30 2d317562 756e7475 317e3138  .1.0-1ubuntu1~18</span><br><span class=\"line\"> 0020 2e30342e 31292031 312e312e 3000      .04.1) 11.1.0.  </span><br><span class=\"line\">Contents of section .eh_frame:</span><br><span class=\"line\"> 0000 14000000 00000000 017a5200 01781001  .........zR..x..</span><br><span class=\"line\"> 0010 1b0c0708 90010000 1c000000 1c000000  ................</span><br><span class=\"line\"> 0020 00000000 27000000 00410e10 8602430d  ....&#x27;....A....C.</span><br><span class=\"line\"> 0030 06620c07 08000000 1c000000 3c000000  .b..........&lt;...</span><br><span class=\"line\"> 0040 00000000 33000000 00410e10 8602430d  ....3....A....C.</span><br><span class=\"line\"> 0050 066e0c07 08000000                    .n......  </span><br></pre></td></tr></table></figure>\n<h2 id=\"objdump--d\">objdump -d</h2>\n<p><code>objdump -d</code>可以将所有包含指令的段反汇编</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ objdump -d SimpleSection.o </span><br><span class=\"line\"></span><br><span class=\"line\">SimpleSection.o：     文件格式 elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\"></span><br><span class=\"line\">0000000000000000 &lt;func1&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %rbp</span><br><span class=\"line\">   1:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">   4:\t48 83 ec 10          \tsub    $0x10,%rsp</span><br><span class=\"line\">   8:\t89 7d fc             \tmov    %edi,-0x4(%rbp)</span><br><span class=\"line\">   b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">   e:\t89 c6                \tmov    %eax,%esi</span><br><span class=\"line\">  10:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 17 &lt;func1+0x17&gt;</span><br><span class=\"line\">  17:\t48 89 c7             \tmov    %rax,%rdi</span><br><span class=\"line\">  1a:\tb8 00 00 00 00       \tmov    $0x0,%eax</span><br><span class=\"line\">  1f:\te8 00 00 00 00       \tcallq  24 &lt;func1+0x24&gt;</span><br><span class=\"line\">  24:\t90                   \tnop</span><br><span class=\"line\">  25:\tc9                   \tleaveq </span><br><span class=\"line\">  26:\tc3                   \tretq   </span><br><span class=\"line\"></span><br><span class=\"line\">0000000000000027 &lt;main&gt;:</span><br><span class=\"line\">  27:\t55                   \tpush   %rbp</span><br><span class=\"line\">  28:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">  2b:\t48 83 ec 10          \tsub    $0x10,%rsp</span><br><span class=\"line\">  2f:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)</span><br><span class=\"line\">  36:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 3c &lt;main+0x15&gt;</span><br><span class=\"line\">  3c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 42 &lt;main+0x1b&gt;</span><br><span class=\"line\">  42:\t01 c2                \tadd    %eax,%edx</span><br><span class=\"line\">  44:\t8b 45 f8             \tmov    -0x8(%rbp),%eax</span><br><span class=\"line\">  47:\t01 c2                \tadd    %eax,%edx</span><br><span class=\"line\">  49:\t8b 45 fc             \tmov    -0x4(%rbp),%eax</span><br><span class=\"line\">  4c:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  4e:\t89 c7                \tmov    %eax,%edi</span><br><span class=\"line\">  50:\te8 00 00 00 00       \tcallq  55 &lt;main+0x2e&gt;</span><br><span class=\"line\">  55:\t8b 45 f8             \tmov    -0x8(%rbp),%eax</span><br><span class=\"line\">  58:\tc9                   \tleaveq </span><br><span class=\"line\">  59:\tc3                   \tretq   </span><br></pre></td></tr></table></figure>\n<h2 id=\"objdump--r\">objdump -r</h2>\n<p>查看重定位段的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ objdump -r a.o </span><br><span class=\"line\"></span><br><span class=\"line\">a.o：     文件格式 elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\">RELOCATION RECORDS FOR [.text]:</span><br><span class=\"line\">OFFSET           TYPE              VALUE </span><br><span class=\"line\">0000000000000016 R_X86_64_PC32     shared-0x0000000000000004</span><br><span class=\"line\">0000000000000026 R_X86_64_PLT32    swap-0x0000000000000004</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">RELOCATION RECORDS FOR [.eh_frame]:</span><br><span class=\"line\">OFFSET           TYPE              VALUE </span><br><span class=\"line\">0000000000000020 R_X86_64_PC32     .text</span><br></pre></td></tr></table></figure>\n<h2 id=\"objdump--t\">objdump -t</h2>\n<p>查看静态库或者目标文件中的符号相关信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ objdump -t SimpleSection.o </span><br><span class=\"line\"></span><br><span class=\"line\">SimpleSection.o：     文件格式 elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">0000000000000000 l    df *ABS*\t0000000000000000 SimpleSection.c</span><br><span class=\"line\">0000000000000000 l    d  .text\t0000000000000000 .text</span><br><span class=\"line\">0000000000000000 l    d  .data\t0000000000000000 .data</span><br><span class=\"line\">0000000000000000 l    d  .bss\t0000000000000000 .bss</span><br><span class=\"line\">0000000000000000 l    d  .rodata\t0000000000000000 .rodata</span><br><span class=\"line\">0000000000000004 l     O .data\t0000000000000004 static_var.1</span><br><span class=\"line\">0000000000000004 l     O .bss\t0000000000000004 static_var2.0</span><br><span class=\"line\">0000000000000000 l    d  .note.GNU-stack\t0000000000000000 .note.GNU-stack</span><br><span class=\"line\">0000000000000000 l    d  .eh_frame\t0000000000000000 .eh_frame</span><br><span class=\"line\">0000000000000000 l    d  .comment\t0000000000000000 .comment</span><br><span class=\"line\">0000000000000000 g     O .data\t0000000000000004 global_init_var</span><br><span class=\"line\">0000000000000000 g     O .bss\t0000000000000004 global_uninit_var</span><br><span class=\"line\">0000000000000000 g     F .text\t0000000000000027 func1</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 printf</span><br><span class=\"line\">0000000000000027 g     F .text\t0000000000000033 main</span><br><span class=\"line\"></span><br><span class=\"line\">singheart@FX504GE:~/Project/assembly$ objdump -t /usr/lib/x86_64-linux-gnu/libc.a</span><br><span class=\"line\"></span><br><span class=\"line\">dl-reloc-static-pie.o：     文件格式 elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">0000000000000000 l    d  .text\t0000000000000000 .text</span><br><span class=\"line\">0000000000000000 l    d  .rodata\t0000000000000000 .rodata</span><br><span class=\"line\">0000000000000000 l     O .rodata.str1.16\t000000000000001a __PRETTY_FUNCTION__.9805</span><br><span class=\"line\">0000000000000020 l     O .rodata.str1.16\t0000000000000015 __PRETTY_FUNCTION__.9847</span><br><span class=\"line\">0000000000000000 l       .rodata.str1.8\t0000000000000000 .LC0</span><br><span class=\"line\">0000000000000000 l       .rodata.str1.1\t0000000000000000 .LC2</span><br><span class=\"line\">0000000000000040 l       .rodata.str1.8\t0000000000000000 .LC1</span><br><span class=\"line\">00000000000000e0 l       .rodata.str1.8\t0000000000000000 .LC8</span><br><span class=\"line\">0000000000000100 l       .rodata.str1.8\t0000000000000000 .LC9</span><br><span class=\"line\">0000000000000017 l       .rodata.str1.1\t0000000000000000 .LC3</span><br><span class=\"line\">0000000000000043 l       .rodata.str1.1\t0000000000000000 .LC7</span><br><span class=\"line\">000000000000002a l       .rodata.str1.1\t0000000000000000 .LC6</span><br><span class=\"line\">00000000000000a8 l       .rodata.str1.8\t0000000000000000 .LC5</span><br><span class=\"line\">0000000000000080 l       .rodata.str1.8\t0000000000000000 .LC4</span><br><span class=\"line\">0000000000000000 l    d  .data\t0000000000000000 .data</span><br><span class=\"line\">0000000000000000 l    d  .bss\t0000000000000000 .bss</span><br><span class=\"line\">0000000000000000 l    d  .rodata.str1.8\t0000000000000000 .rodata.str1.8</span><br><span class=\"line\">0000000000000000 l    d  .rodata.str1.1\t0000000000000000 .rodata.str1.1</span><br><span class=\"line\">0000000000000000 l    d  .rodata.str1.16\t0000000000000000 .rodata.str1.16</span><br><span class=\"line\">0000000000000000 l    d  .note.GNU-stack\t0000000000000000 .note.GNU-stack</span><br><span class=\"line\">0000000000000000 l    d  .eh_frame\t0000000000000000 .eh_frame</span><br><span class=\"line\">0000000000000000 g     F .text\t0000000000000c22 .hidden _dl_relocate_static_pie</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _dl_get_dl_main_map</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _DYNAMIC</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">0000000000000000  w      *UND*\t0000000000000000 _dl_rtld_map</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 _dl_argv</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _dl_dprintf</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _dl_tlsdesc_return</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 memcpy</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _dl_tlsdesc_undefweak</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _dl_reloc_bad_type</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _dl_allocate_static_tls</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden __assert_fail</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dl-vdso.o：     文件格式 elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">0000000000000000 l    d  .text\t0000000000000000 .text</span><br><span class=\"line\">0000000000000000 l    d  .data\t0000000000000000 .data</span><br><span class=\"line\">0000000000000000 l    d  .bss\t0000000000000000 .bss</span><br><span class=\"line\">0000000000000000 l    d  .note.GNU-stack\t0000000000000000 .note.GNU-stack</span><br><span class=\"line\">0000000000000000 l    d  .eh_frame\t0000000000000000 .eh_frame</span><br><span class=\"line\">0000000000000000 g     F .text\t0000000000000099 _dl_vdso_vsym</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 _dl_sysinfo_map</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 .hidden _dl_lookup_symbol_x</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">0000000000000000         *UND*\t0000000000000000 __stack_chk_fail</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"readelf\">readelf</h1>\n<h2 id=\"readelf--h\">readelf -h</h2>\n<p><code>readelf -h</code>能够查看ELF头的信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ readelf -h SimpleSection.o </span><br><span class=\"line\">ELF 头：</span><br><span class=\"line\">  Magic：   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">  类别:                              ELF64</span><br><span class=\"line\">  数据:                              2 补码，小端序 (little endian)</span><br><span class=\"line\">  版本:                              1 (current)</span><br><span class=\"line\">  OS/ABI:                            UNIX - System V</span><br><span class=\"line\">  ABI 版本:                          0</span><br><span class=\"line\">  类型:                              REL (可重定位文件)</span><br><span class=\"line\">  系统架构:                          Advanced Micro Devices X86-64</span><br><span class=\"line\">  版本:                              0x1</span><br><span class=\"line\">  入口点地址：               0x0</span><br><span class=\"line\">  程序头起点：          0 (bytes into file)</span><br><span class=\"line\">  Start of section headers:          1104 (bytes into file)</span><br><span class=\"line\">  标志：             0x0</span><br><span class=\"line\">  本头的大小：       64 (字节)</span><br><span class=\"line\">  程序头大小：       0 (字节)</span><br><span class=\"line\">  Number of program headers:         0</span><br><span class=\"line\">  节头大小：         64 (字节)</span><br><span class=\"line\">  节头数量：         13</span><br><span class=\"line\">  字符串表索引节头： 12</span><br></pre></td></tr></table></figure>\n<h2 id=\"readelf--s\">readelf -S</h2>\n<p>能够查看ELF文件的段，和<code>objdump -h</code>作用相同</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ readelf -S SimpleSection.o </span><br><span class=\"line\">There are 13 section headers, starting at offset 0x450:</span><br><span class=\"line\"></span><br><span class=\"line\">节头：</span><br><span class=\"line\">  [号] 名称              类型             地址              偏移量</span><br><span class=\"line\">       大小              全体大小          旗标   链接   信息   对齐</span><br><span class=\"line\">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class=\"line\">       0000000000000000  0000000000000000           0     0     0</span><br><span class=\"line\">  [ 1] .text             PROGBITS         0000000000000000  00000040</span><br><span class=\"line\">       000000000000005a  0000000000000000  AX       0     0     1</span><br><span class=\"line\">  [ 2] .rela.text        RELA             0000000000000000  00000340</span><br><span class=\"line\">       0000000000000078  0000000000000018   I      10     1     8</span><br><span class=\"line\">  [ 3] .data             PROGBITS         0000000000000000  0000009c</span><br><span class=\"line\">       0000000000000008  0000000000000000  WA       0     0     4</span><br><span class=\"line\">  [ 4] .bss              NOBITS           0000000000000000  000000a4</span><br><span class=\"line\">       0000000000000008  0000000000000000  WA       0     0     4</span><br><span class=\"line\">  [ 5] .rodata           PROGBITS         0000000000000000  000000a4</span><br><span class=\"line\">       0000000000000004  0000000000000000   A       0     0     1</span><br><span class=\"line\">  [ 6] .comment          PROGBITS         0000000000000000  000000a8</span><br><span class=\"line\">       000000000000002e  0000000000000001  MS       0     0     1</span><br><span class=\"line\">  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  000000d6</span><br><span class=\"line\">       0000000000000000  0000000000000000           0     0     1</span><br><span class=\"line\">  [ 8] .eh_frame         PROGBITS         0000000000000000  000000d8</span><br><span class=\"line\">       0000000000000058  0000000000000000   A       0     0     8</span><br><span class=\"line\">  [ 9] .rela.eh_frame    RELA             0000000000000000  000003b8</span><br><span class=\"line\">       0000000000000030  0000000000000018   I      10     8     8</span><br><span class=\"line\">  [10] .symtab           SYMTAB           0000000000000000  00000130</span><br><span class=\"line\">       0000000000000198  0000000000000018          11    11     8</span><br><span class=\"line\">  [11] .strtab           STRTAB           0000000000000000  000002c8</span><br><span class=\"line\">       0000000000000076  0000000000000000           0     0     1</span><br><span class=\"line\">  [12] .shstrtab         STRTAB           0000000000000000  000003e8</span><br><span class=\"line\">       0000000000000061  0000000000000000           0     0     1</span><br><span class=\"line\">Key to Flags:</span><br><span class=\"line\">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class=\"line\">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class=\"line\">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class=\"line\">  l (large), p (processor specific)</span><br></pre></td></tr></table></figure>\n<h2 id=\"readelf--s-1\">readelf -s</h2>\n<p>能查看ELF文件中的符号段的信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Symbol table &#x27;.symtab&#x27; contains 17 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS SimpleSection.c</span><br><span class=\"line\">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </span><br><span class=\"line\">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 </span><br><span class=\"line\">     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 </span><br><span class=\"line\">     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 </span><br><span class=\"line\">     6: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    3 static_var.1</span><br><span class=\"line\">     7: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    4 static_var2.0</span><br><span class=\"line\">     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 </span><br><span class=\"line\">     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 </span><br><span class=\"line\">    10: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 </span><br><span class=\"line\">    11: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 global_init_var</span><br><span class=\"line\">    12: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 global_uninit_var</span><br><span class=\"line\">    13: 0000000000000000    39 FUNC    GLOBAL DEFAULT    1 func1</span><br><span class=\"line\">    14: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    15: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf</span><br><span class=\"line\">    16: 0000000000000027    51 FUNC    GLOBAL DEFAULT    1 main</span><br></pre></td></tr></table></figure>\n<p><code>nm</code>也能达到类似的效果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ nm SimpleSection.o </span><br><span class=\"line\">0000000000000000 T func1</span><br><span class=\"line\">0000000000000000 D global_init_var</span><br><span class=\"line\">                 U _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">0000000000000000 B global_uninit_var</span><br><span class=\"line\">0000000000000027 T main</span><br><span class=\"line\">                 U printf</span><br><span class=\"line\">0000000000000004 d static_var.1</span><br><span class=\"line\">0000000000000004 b static_var2.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"readelf--l\">readelf -l</h2>\n<p>查看可执行文件的Segment header</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ readelf -l hello</span><br><span class=\"line\"></span><br><span class=\"line\">Elf 文件类型为 EXEC (可执行文件)</span><br><span class=\"line\">Entry point 0x4000b0</span><br><span class=\"line\">There are 2 program headers, starting at offset 64</span><br><span class=\"line\"></span><br><span class=\"line\">程序头：</span><br><span class=\"line\">  Type           Offset             VirtAddr           PhysAddr</span><br><span class=\"line\">                 FileSiz            MemSiz              Flags  Align</span><br><span class=\"line\">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000</span><br><span class=\"line\">                 0x00000000000000d2 0x00000000000000d2  R E    0x200000</span><br><span class=\"line\">  LOAD           0x00000000000000d2 0x00000000006000d2 0x00000000006000d2</span><br><span class=\"line\">                 0x000000000000000e 0x000000000000000e  RW     0x200000</span><br><span class=\"line\"></span><br><span class=\"line\"> Section to Segment mapping:</span><br><span class=\"line\">  段节...</span><br><span class=\"line\">   00     .text </span><br><span class=\"line\">   01     .data</span><br></pre></td></tr></table></figure>\n<h2 id=\"readelf--d\">readelf -d</h2>\n<p>查看\".dynamic\"段的内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ readelf -d Lib.so </span><br><span class=\"line\"></span><br><span class=\"line\">Dynamic section at offset 0xe20 contains 24 entries:</span><br><span class=\"line\">  标记        类型                         名称/值</span><br><span class=\"line\"> 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]</span><br><span class=\"line\"> 0x000000000000000c (INIT)               0x520</span><br><span class=\"line\"> 0x000000000000000d (FINI)               0x66c</span><br><span class=\"line\"> 0x0000000000000019 (INIT_ARRAY)         0x200e10</span><br><span class=\"line\"> 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)</span><br><span class=\"line\"> 0x000000000000001a (FINI_ARRAY)         0x200e18</span><br><span class=\"line\"> 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)</span><br><span class=\"line\"> 0x000000006ffffef5 (GNU_HASH)           0x1f0</span><br><span class=\"line\"> 0x0000000000000005 (STRTAB)             0x368</span><br><span class=\"line\"> 0x0000000000000006 (SYMTAB)             0x230</span><br><span class=\"line\"> 0x000000000000000a (STRSZ)              163 (bytes)</span><br><span class=\"line\"> 0x000000000000000b (SYMENT)             24 (bytes)</span><br><span class=\"line\"> 0x0000000000000003 (PLTGOT)             0x201000</span><br><span class=\"line\"> 0x0000000000000002 (PLTRELSZ)           48 (bytes)</span><br><span class=\"line\"> 0x0000000000000014 (PLTREL)             RELA</span><br><span class=\"line\"> 0x0000000000000017 (JMPREL)             0x4f0</span><br><span class=\"line\"> 0x0000000000000007 (RELA)               0x448</span><br><span class=\"line\"> 0x0000000000000008 (RELASZ)             168 (bytes)</span><br><span class=\"line\"> 0x0000000000000009 (RELAENT)            24 (bytes)</span><br><span class=\"line\"> 0x000000006ffffffe (VERNEED)            0x428</span><br><span class=\"line\"> 0x000000006fffffff (VERNEEDNUM)         1</span><br><span class=\"line\"> 0x000000006ffffff0 (VERSYM)             0x40c</span><br><span class=\"line\"> 0x000000006ffffff9 (RELACOUNT)          3</span><br><span class=\"line\"> 0x0000000000000000 (NULL)               0x0</span><br></pre></td></tr></table></figure>\n<h2 id=\"readelf--sd\">readelf -sD</h2>\n<p>查看动态符号表的内容和哈希表的内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ readelf -sD Lib.so </span><br><span class=\"line\"></span><br><span class=\"line\">Symbol table of `.gnu.hash&#x27; for image:</span><br><span class=\"line\">  Num Buc:    Value          Size   Type   Bind Vis      Ndx Name</span><br><span class=\"line\">    7   0: 0000000000201030     0 NOTYPE  GLOBAL DEFAULT  22 _edata</span><br><span class=\"line\">    8   0: 0000000000201038     0 NOTYPE  GLOBAL DEFAULT  23 _end</span><br><span class=\"line\">    9   1: 0000000000201030     0 NOTYPE  GLOBAL DEFAULT  23 __bss_start</span><br><span class=\"line\">   10   1: 0000000000000520     0 FUNC    GLOBAL DEFAULT   9 _init</span><br><span class=\"line\">   11   2: 000000000000066c     0 FUNC    GLOBAL DEFAULT  13 _fini</span><br><span class=\"line\">   12   2: 0000000000000635    54 FUNC    GLOBAL DEFAULT  12 foobar</span><br></pre></td></tr></table></figure>\n<h1 id=\"cfilt\">c++filt</h1>\n<p>能够解析C++修饰过的符号名称</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ c++filt _ZN1N1C4funcEi</span><br><span class=\"line\">N::C::func(int)</span><br><span class=\"line\">singheart@FX504GE:~/Project/assembly$ c++filt _ZZ4mainE3foo</span><br><span class=\"line\">main::foo</span><br></pre></td></tr></table></figure>\n<h1 id=\"ar\">ar</h1>\n<h2 id=\"ar--t\">ar -t</h2>\n<p>查看静态库中包含哪些目标文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ ar -t /usr/lib/x86_64-linux-gnu/libc.a</span><br><span class=\"line\">init-first.o</span><br><span class=\"line\">libc-start.o</span><br><span class=\"line\">sysdep.o</span><br><span class=\"line\">version.o</span><br><span class=\"line\">check_fds.o</span><br><span class=\"line\">libc-tls.o</span><br><span class=\"line\">elf-init.o</span><br><span class=\"line\">dso_handle.o</span><br><span class=\"line\">errno.o</span><br><span class=\"line\">errno-loc.o</span><br><span class=\"line\">iconv_open.o</span><br><span class=\"line\">iconv.o</span><br><span class=\"line\">iconv_close.o</span><br><span class=\"line\">gconv_open.o</span><br><span class=\"line\">gconv.o</span><br><span class=\"line\">gconv_close.o</span><br><span class=\"line\">gconv_db.o</span><br><span class=\"line\">gconv_conf.o</span><br><span class=\"line\">gconv_builtin.o</span><br><span class=\"line\">gconv_simple.o</span><br><span class=\"line\">gconv_trans.o</span><br><span class=\"line\">gconv_cache.o</span><br><span class=\"line\">gconv_dl.o</span><br><span class=\"line\">gconv_charset.o</span><br><span class=\"line\">setlocale.o</span><br><span class=\"line\">findlocale.o</span><br><span class=\"line\">loadlocale.o</span><br><span class=\"line\">loadarchive.o</span><br><span class=\"line\">localeconv.o</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h1 id=\"ldd\">ldd</h1>\n<p>ldd可以查看程序主模块或者一个共享库依赖于哪些共享库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@FX504GE:~/Project/assembly$ ldd Program1</span><br><span class=\"line\">\tlinux-vdso.so.1 (0x00007ffdc75d1000)</span><br><span class=\"line\">\t./Lib.so (0x00007f60a19ab000)</span><br><span class=\"line\">\tlibc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f60a15ba000)</span><br><span class=\"line\">\t/lib64/ld-linux-x86-64.so.2 (0x00007f60a1daf000)</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用c语言解析elf\">使用C语言解析ELF</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;elf.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> fd;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ParseELFHeader</span><span class=\"params\">(<span class=\"type\">const</span> Elf64_Ehdr &amp;elf_header)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ParseSectionHeader</span><span class=\"params\">(<span class=\"type\">const</span> Elf64_Ehdr &amp;elf_header, Elf64_Shdr *section_header)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ParseELF</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> * filepath)</span> &#123;</span><br><span class=\"line\">  fd = open(filepath, O_RDONLY);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">&quot;Error opening file &quot;</span> &lt;&lt; filepath &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Elf64_Ehdr elf_header;</span><br><span class=\"line\">  <span class=\"type\">int</span> read_elf_header_size = read(fd, &amp;elf_header, <span class=\"keyword\">sizeof</span>(Elf64_Ehdr));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (read_elf_header_size &lt; <span class=\"keyword\">sizeof</span>(Elf64_Ehdr)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">&quot;ELF file is not complete\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ParseELFHeader(elf_header);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 解析Section header table</span></span><br><span class=\"line\">  Elf64_Shdr *section_header = new Elf64_Shdr[elf_header.e_shnum];</span><br><span class=\"line\">  lseek(fd, elf_header.e_shoff, SEEK_SET);</span><br><span class=\"line\">  read(fd, section_header, <span class=\"keyword\">sizeof</span>(Elf64_Shdr) * elf_header.e_shnum);</span><br><span class=\"line\">  ParseSectionHeader(elf_header, section_header);</span><br><span class=\"line\">  delete[] section_header;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ParseELFHeader</span><span class=\"params\">(<span class=\"type\">const</span> Elf64_Ehdr &amp;elf_header)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ELF文件头格式如下：\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Magic(e_ident):&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; EI_NIDENT; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2x &quot;</span>, elf_header.e_ident[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 按照Elf64_Ehdr的格式分析完</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Section header table的文件内偏移地址：0x%lx\\n&quot;</span>, elf_header.e_shoff);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;一共有多少个段：%d\\n&quot;</span>, elf_header.e_shnum);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Section header string table的下标: %d\\n&quot;</span>, elf_header.e_shstrndx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ParseSectionHeader</span><span class=\"params\">(<span class=\"type\">const</span> Elf64_Ehdr &amp;elf_header, Elf64_Shdr *section_header)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x&quot;</span>, section_header[<span class=\"number\">1</span>].sh_name);</span><br><span class=\"line\">  <span class=\"comment\">// 先解析Section header string table</span></span><br><span class=\"line\">  Elf64_Shdr *shstrtab_header = &amp;section_header[elf_header.e_shstrndx];</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;shstrtab的文件内偏移地址：0x%lx\\n&quot;</span>, shstrtab_header-&gt;sh_offset);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;shstrtab段的总字节大小：%ld\\n&quot;</span>, shstrtab_header-&gt;sh_size);</span><br><span class=\"line\">  <span class=\"type\">char</span> *shstrtab = new <span class=\"type\">char</span>[shstrtab_header-&gt;sh_size];</span><br><span class=\"line\">  lseek(fd, shstrtab_header-&gt;sh_offset, SEEK_SET);</span><br><span class=\"line\">  read(fd, shstrtab, shstrtab_header-&gt;sh_size);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 解析其他段的内容，把段名打印出来</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;所有的段段名如下：\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> symtable_idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> strtab_idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> text_idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; elf_header.e_shnum; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, shstrtab + section_header[i].sh_name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(<span class=\"string\">&quot;.symtab&quot;</span>, shstrtab + section_header[i].sh_name) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      symtable_idx = i;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(<span class=\"string\">&quot;.strtab&quot;</span>, shstrtab + section_header[i].sh_name) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      strtab_idx = i;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(<span class=\"string\">&quot;.text&quot;</span>, shstrtab + section_header[i].sh_name) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      text_idx = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;符号表的数组下标：%d\\n&quot;</span>, symtable_idx);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;字符串表的数组下标：%d\\n&quot;</span>, strtab_idx);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// text属性</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;VMA: %lx\\n&quot;</span>, section_header[text_idx].sh_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析字符串表的内容</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *strtab = new <span class=\"type\">char</span>[section_header[strtab_idx].sh_size];</span><br><span class=\"line\">  lseek(fd, section_header[strtab_idx].sh_offset, SEEK_SET);</span><br><span class=\"line\">  read(fd, strtab, section_header[strtab_idx].sh_size);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析符号表的内容</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;.symtab的文件内偏移地址：0x%lx\\n&quot;</span>, section_header[symtable_idx].sh_offset);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;.symtab的段大小：%ld\\n&quot;</span>, section_header[symtable_idx].sh_size);</span><br><span class=\"line\">  Elf64_Sym *symtab = reinterpret_cast&lt;Elf64_Sym *&gt;(new <span class=\"type\">char</span>[section_header[symtable_idx].sh_size]);</span><br><span class=\"line\">  lseek(fd, section_header[symtable_idx].sh_offset, SEEK_SET);</span><br><span class=\"line\">  read(fd, symtab, section_header[symtable_idx].sh_size);</span><br><span class=\"line\">  <span class=\"type\">int</span> sym_num = section_header[symtable_idx].sh_size / <span class=\"keyword\">sizeof</span>(Elf64_Sym);</span><br><span class=\"line\">  <span class=\"comment\">// 打印所有的符号</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sym_num; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, strtab + symtab[i].st_name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  delete []strtab;</span><br><span class=\"line\">  delete []shstrtab;</span><br><span class=\"line\">  delete []symtab;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  ParseELF(<span class=\"string\">&quot;../ab&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["linux"]},{"title":"openssl加密文件","url":"/2023/06/27/linux/openssl%E5%8A%A0%E5%AF%86%E6%96%87%E4%BB%B6/","content":"<h1 id=\"引言\">引言</h1>\n<p>为了让服务器上的别人不看我的代码，就决定对文件进行打包，然后对压缩包进行加密。</p>\n<span id=\"more\"></span>\n<h1 id=\"压缩文件夹\">压缩文件夹</h1>\n<p>解压</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar zxvf 文件名.tar.gz</span><br></pre></td></tr></table></figure>\n<p>压缩</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zcvf 文件名.tar.gz 待压缩的文件名</span><br></pre></td></tr></table></figure>\n<h1 id=\"对文件进行加密\">对文件进行加密</h1>\n<blockquote>\n<p>从<a\nhref=\"https://blog.csdn.net/qq_30624591/article/details/104791412\">https://blog.csdn.net/qq_30624591/article/details/104791412</a>复制</p>\n</blockquote>\n<h2 id=\"使用命令生成私钥\">使用命令生成私钥</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out rsa_private_key.pem 1024</span><br></pre></td></tr></table></figure>\n<p>参数:</p>\n<ul>\n<li>genrsa 生成密钥</li>\n<li>-out 输出到文件</li>\n<li>rsa_private_key.pem 文件名</li>\n<li>1024 长度或者2048长度</li>\n</ul>\n<h2 id=\"从私钥中提取公钥\">从私钥中提取公钥</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</span><br></pre></td></tr></table></figure>\n<p>参数:</p>\n<ul>\n<li>rsa 提取公钥</li>\n<li>-in 从文件中读入</li>\n<li>rsa_private_key.pem 文件名</li>\n<li>-pubout 输出</li>\n<li>-out 到文件</li>\n<li>rsa_public_key.pem 文件名</li>\n</ul>\n<p>然后新建一个test.txt 内容是 helloworld</p>\n<h2 id=\"使用公钥加密\">使用公钥加密</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl rsautl -encrypt -in test.txt -inkey rsa_public_key.pem -pubin -out demo.en</span><br></pre></td></tr></table></figure>\n<p>参数:</p>\n<ul>\n<li>rsautl 加解密</li>\n<li>-encrypt 加密 -</li>\n<li>in 从文件输入</li>\n<li>test.txt 文件名</li>\n<li>-inkey 输入的密钥</li>\n<li>rsa_public_key.pem 上一步生成的公钥</li>\n<li>-pubin 表名输入是公钥文件</li>\n<li>-out输出到文件</li>\n<li>demo.en 输出文件名</li>\n</ul>\n<h2 id=\"使用私钥解密\">使用私钥解密</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl rsautl -decrypt -in demo.en -inkey rsa_private_key.pem -out demo.de</span><br></pre></td></tr></table></figure>\n<p>参数:</p>\n<ul>\n<li>-decrypt 解密</li>\n<li>-in 从文件输入</li>\n<li>demo.en 上一步生成的加密文件</li>\n<li>-inkey 输入的密钥</li>\n<li>rsa_private_key.pem 上一步生成的私钥</li>\n<li>-out输出到文件</li>\n<li>demo.de 输出的文件名</li>\n</ul>\n","categories":["linux"]},{"title":"socket编程示例","url":"/2022/04/04/linux/socket%E7%BC%96%E7%A8%8B%E7%A4%BA%E4%BE%8B/","content":"<blockquote>\n<p>本次使用的环境为Ubuntu\n16.04。如果是linux操作系统能够运行本示例代码，如果是Windows操作系统，那么本篇文章不适用。</p>\n</blockquote>\n<h1 id=\"什么是socket\">什么是socket</h1>\n<p><code>socket</code>是应用层和传输层之间的API接口，通过socket为本地进程和远端进程提供通信服务，如TCP、UDP，是面向client-server架构的。需要注意的是，socket也能够实现与网络层的连接，不过用得很少，这里示意图不再标出。</p>\n<span id=\"more\"></span>\n<figure>\n<img src=\"http://img.singhe.art/FqAL28eXrS7gEZRG9Ej7UxaVu362\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h1 id=\"相关数据结构和函数\">相关数据结构和函数</h1>\n<p>本节介绍相关的数据结构以及相关的函数定义</p>\n<h2 id=\"sockaddr_in\">sockaddr_in</h2>\n<p>这里对其结构进行了简化，真实的头文件定义会更冗长一些。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> &#123;</span></span><br><span class=\"line\">    u_char sin_len;             <span class=\"comment\">/*地址长度*/</span></span><br><span class=\"line\">    u_char sin_family;          <span class=\"comment\">/*地址簇(TCP/IP: AF_INET)</span></span><br><span class=\"line\"><span class=\"comment\">    u_short sin_port;           /*端口号*/</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">sin_addr</span>;</span>    <span class=\"comment\">/*IP地址*/</span></span><br><span class=\"line\">    <span class=\"type\">char</span> sin_zero[<span class=\"number\">8</span>];           <span class=\"comment\">/*占位(置0)*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"socket\">socket</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sd = socket(int protofamily, int type, int proto);</span><br></pre></td></tr></table></figure>\n<p>socket函数用于创建套接字，返回值类型为<code>int</code>，是socket的编号，或者叫socket描述符(socket\ndescriptor)</p>\n<ul>\n<li><p>第一个参数protofamily：代表协议簇。socket被设计用于多个协议，只不过大多数情况下被用于TCP/IP协议(PF_INET)</p></li>\n<li><p>第二个参数type: 代表套接字类型，可选项有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SOCK_STREAM</span><br></pre></td></tr></table></figure>\n<p>、</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SOCK_DGRAM</span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SOCK_RAW</span><br></pre></td></tr></table></figure>\n<p>。</p>\n<ul>\n<li><code>SOCK_STREAM</code>：使用TCP套接字</li>\n<li><code>SOCK_DGRAM</code>：使用UDP套接字</li>\n<li><code>SOCK_RAW</code>：就是前面提到的与网络层的连接</li>\n</ul></li>\n<li><p>第三个参数proto：0为默认值。</p></li>\n</ul>\n<h2 id=\"bind\">bind</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bind</span><span class=\"params\">(<span class=\"type\">int</span> sd, <span class=\"keyword\">struct</span> sockaddr *localaddr, <span class=\"type\">socklen_t</span> addrlen)</span>;</span><br></pre></td></tr></table></figure>\n<p>bind通常用于服务器端绑定套接字的本地端点地址。</p>\n<ul>\n<li>第一个参数sd：socket descriptor。</li>\n<li>第二个参数localaddr：本地端点地址，结构为<code>*sockaddr</code>，也就是<code>*sockaddr_in</code>，需要类型转换一下。</li>\n<li>第三个参数addrlen：一般为<code>sizeof(sockaddr_in)</code></li>\n</ul>\n<h2 id=\"listen\">listen</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">listen</span><span class=\"params\">(<span class=\"type\">int</span> sd, <span class=\"type\">int</span> queuesize)</span>;</span><br></pre></td></tr></table></figure>\n<p>将服务器端的套接字置为监听状态，即监听套接字。</p>\n<ul>\n<li>第一个参数sd：socket descriptor</li>\n<li>第二个参数，设置请求队列的大小，客户端的连接请求都会在请求队列中进行排队。</li>\n</ul>\n<h2 id=\"connect\">connect</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">connect</span><span class=\"params\">(<span class=\"type\">int</span> sd, <span class=\"keyword\">struct</span> sockaddr *saddr, <span class=\"type\">socklen_t</span> saddrlen)</span>;</span><br></pre></td></tr></table></figure>\n<p>用于客户端向服务器端请求连接，连接成功返回0，失败返回-1</p>\n<ul>\n<li>第一个参数sd：socket descriptor</li>\n<li>第二个参数saddr：同<code>*sockaddr_in</code>结构</li>\n<li>第三个参数saddrlen：一般为<code>sizeof(sockaddr_in)</code></li>\n</ul>\n<h2 id=\"accept\">accept</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">accept</span><span class=\"params\">(<span class=\"type\">int</span> sd, <span class=\"keyword\">struct</span> sockaddr *addr, <span class=\"type\">socklen_t</span> addrlen)</span>;</span><br></pre></td></tr></table></figure>\n<p>从处于监听状态的套接字sd的客户连接请求队列中取出队首请求，并创建一个新的套接字。这里创建一个新的套接字来处理消息交互，便于进行并发操作，处于监听状态的套接字sd又可以为其他的请求服务，而不会被一直占用。</p>\n<ul>\n<li>第一个参数sd：socket descr</li>\n<li>第二个参数addr：同<code>sockaddr_in</code></li>\n<li>第三个参数addrlen：<code>sizeof(sockaddr_in)</code></li>\n</ul>\n<h2 id=\"write\">write</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> sd, <span class=\"type\">const</span> <span class=\"type\">void</span>* buf, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> n)</span>;</span><br></pre></td></tr></table></figure>\n<p>发送消息，从buf开始的n个字节。若成功，返回写入字节数；若失败，返回-1。</p>\n<h2 id=\"read\">read</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">int</span> sd, <span class=\"type\">const</span> <span class=\"type\">void</span>* buf, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> n)</span>;</span><br></pre></td></tr></table></figure>\n<p>读取n字节个消息，写入buf中。若成功，返回读取字节数；若失败，返回-1。</p>\n<h1 id=\"示例代码\">示例代码</h1>\n<p>此节代码来源于https://www.thegeekstuff.com/2011/12/c-socket-programming/以及https://blog.csdn.net/weixin_41249411/article/details/89060985，对其进行了部分修改。</p>\n<h2 id=\"总体流程图\">总体流程图</h2>\n<figure>\n<img src=\"http://img.singhe.art/Fjgm57yhgpaF7lqh3qIpQ8xogvqZ\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h2 id=\"服务器端\">服务器端</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> listenfd = <span class=\"number\">0</span>, connfd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">serv_addr</span>;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> sendBuff[<span class=\"number\">1025</span>];</span><br><span class=\"line\">\t<span class=\"type\">char</span> readBuff[<span class=\"number\">1025</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">time_t</span> ticks; </span><br><span class=\"line\"></span><br><span class=\"line\">    listenfd = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;serv_addr, <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"keyword\">sizeof</span>(serv_addr));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(sendBuff, <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"keyword\">sizeof</span>(sendBuff)); </span><br><span class=\"line\"></span><br><span class=\"line\">    serv_addr.sin_family = AF_INET;</span><br><span class=\"line\">    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">    serv_addr.sin_port = htons(<span class=\"number\">1234</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    bind(listenfd, (<span class=\"keyword\">struct</span> sockaddr*)&amp;serv_addr, <span class=\"keyword\">sizeof</span>(serv_addr)); </span><br><span class=\"line\"></span><br><span class=\"line\">    listen(listenfd, <span class=\"number\">10</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        connfd = accept(listenfd, (<span class=\"keyword\">struct</span> sockaddr*)<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">        ticks = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\tread(connfd, readBuff, <span class=\"keyword\">sizeof</span>(readBuff)<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;received : %s\\n&quot;</span>, readBuff);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(sendBuff, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sendBuff));</span><br><span class=\"line\">\t\t<span class=\"built_in\">strcpy</span>(sendBuff, <span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        write(connfd, sendBuff, <span class=\"built_in\">strlen</span>(sendBuff)); </span><br><span class=\"line\"></span><br><span class=\"line\">        close(connfd);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端\">客户端</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*client_tcp.c*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建套接字</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//服务器的ip为本地，端口号1234</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">serv_addr</span>;</span></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;serv_addr, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(serv_addr));</span><br><span class=\"line\">\tserv_addr.sin_family = AF_INET;</span><br><span class=\"line\">\tinet_pton(AF_INET, <span class=\"string\">&quot;127.0.0.1&quot;</span>, &amp;serv_addr.sin_addr);</span><br><span class=\"line\">\tserv_addr.sin_port = htons(<span class=\"number\">1234</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//向服务器发送连接请求</span></span><br><span class=\"line\">\tconnect(sock, (<span class=\"keyword\">struct</span> sockaddr*)&amp;serv_addr, <span class=\"keyword\">sizeof</span>(serv_addr));</span><br><span class=\"line\">\t<span class=\"comment\">//发送并接收数据</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer[<span class=\"number\">40</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Please write:&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, buffer);</span><br><span class=\"line\">\twrite(sock, buffer, <span class=\"keyword\">sizeof</span>(buffer));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(buffer, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buffer));</span><br><span class=\"line\">\tread(sock, buffer, <span class=\"keyword\">sizeof</span>(buffer) - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Serve send: %s\\n&quot;</span>, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//断开连接</span></span><br><span class=\"line\">\tclose(sock);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"java-socket代码\">Java socket代码</h1>\n<h2 id=\"client\">client</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Inet4Address;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//java基础类方法的入口</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        Socket socket=<span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>();</span><br><span class=\"line\">        <span class=\"comment\">//读取流超时的时间设置为3000</span></span><br><span class=\"line\">        socket.setSoTimeout(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//连接本地，端口2000；超时时间3000ms</span></span><br><span class=\"line\">        <span class=\"comment\">// Inet4Address.getByName(&quot;39.98.27.6&quot;)</span></span><br><span class=\"line\">        socket.connect(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(Inet4Address.getLocalHost(), <span class=\"number\">2000</span>),<span class=\"number\">3000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发起服务器连接---------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端信息：&quot;</span>+socket.getLocalAddress()+<span class=\"string\">&quot; P:&quot;</span>+socket.getLocalPort());<span class=\"comment\">//打印本地服务器地址和本地端口号</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务端信息：&quot;</span>+socket.getInetAddress()+<span class=\"string\">&quot; P:&quot;</span>+socket.getPort());</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//发送接收数据</span></span><br><span class=\"line\">            todo(socket);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;出现异常关闭啦&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//释放资源</span></span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;再见，客户端已退出&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//发送数据的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">todo</span><span class=\"params\">(Socket client)</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">        <span class=\"comment\">//构建键盘输入流</span></span><br><span class=\"line\">        InputStream in=System.in;</span><br><span class=\"line\">        <span class=\"comment\">//把键盘输入流转换为BufferedReader</span></span><br><span class=\"line\">        BufferedReader input=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(in,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//得到Socket输出流（Client要发送出去给服务器的信息），并转换为打印流</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> client.getOutputStream();</span><br><span class=\"line\">        PrintStream socketPrintStream=<span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(outputStream);</span><br><span class=\"line\">        <span class=\"comment\">//得到Socket输入流（Server回复传入Client的信息）,并转换为BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> client.getInputStream();</span><br><span class=\"line\">        BufferedReader socketBufferedReader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(inputStream,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//判断Server是否想要退出，回复“bye”时是他想要结束对话</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//键盘读取一行</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> input.readLine();</span><br><span class=\"line\">            <span class=\"comment\">//发送到服务器，（通俗就是显示在输入处，在键盘上输入什么，屏幕显示什么）</span></span><br><span class=\"line\">            <span class=\"comment\">//String str = &quot;003099999920220614100000M1S1C0x0a&quot;;</span></span><br><span class=\"line\">            socketPrintStream.println(str);</span><br><span class=\"line\">            <span class=\"comment\">//从服务器读取一行，即Server传入回复给Client的信息</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">echo</span> <span class=\"operator\">=</span> socketBufferedReader.readLine();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;bye&quot;</span>.equalsIgnoreCase(echo))&#123;</span><br><span class=\"line\">                flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//打印到屏幕上，Server回复什么就显示什么</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;客户端回复：&quot;</span>+echo);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span>(flag);</span><br><span class=\"line\">        <span class=\"comment\">//资源释放，关闭对于socket资源</span></span><br><span class=\"line\">        socketPrintStream.close();</span><br><span class=\"line\">        socketBufferedReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"server\">server</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        ServerSocket server=<span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器准备就绪----------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器信息：&quot;</span>+server.getInetAddress()+<span class=\"string\">&quot; P:&quot;</span>+server.getLocalPort());</span><br><span class=\"line\">        <span class=\"comment\">//等待多个客户端连接，循环异步线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//得到客户端</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> server.accept();</span><br><span class=\"line\">            <span class=\"comment\">//客户端构建异步线程</span></span><br><span class=\"line\">            <span class=\"type\">ClientHandler</span> <span class=\"variable\">clientHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClientHandler</span>(client);</span><br><span class=\"line\">            <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">            clientHandler.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 客户端消息处理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//多个客户端需要做异步操作，建立异步处理类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;<span class=\"comment\">//线程</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span>  Socket socket;<span class=\"comment\">//代表当前的一个连接</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        ClientHandler(Socket socket)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.socket=socket;</span><br><span class=\"line\">        &#125;<span class=\"comment\">//构造方法</span></span><br><span class=\"line\">        <span class=\"comment\">//一旦Thead启动起来，就会运行run方法，代表线程启动的部分</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.run();</span><br><span class=\"line\">            <span class=\"comment\">//打印客户端的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;新客户端发起连接：&quot;</span>+socket.getInetAddress()+<span class=\"string\">&quot; P:&quot;</span>+socket.getPort());</span><br><span class=\"line\">            <span class=\"comment\">//在发送过程中会触发一个IO过程，所以需要捕获异常</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//得到打印流，用于数据输出，服务器回送数据使用，即在屏幕上显示Server要回复Client的信息</span></span><br><span class=\"line\">                PrintStream socketOutput=<span class=\"keyword\">new</span> <span class=\"title class_\">PrintStream</span>(socket.getOutputStream());</span><br><span class=\"line\">                <span class=\"comment\">//得到输入流，用于接收数据，得到Client回复服务器的信息</span></span><br><span class=\"line\">                BufferedReader sockeInput=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(socket.getInputStream(),<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//客户端回复一条数据</span></span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> sockeInput.readLine();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(<span class=\"string\">&quot;bye&quot;</span>.equalsIgnoreCase(str))&#123;</span><br><span class=\"line\">                        flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//回送</span></span><br><span class=\"line\">                        socketOutput.println(<span class=\"string\">&quot;bye&quot;</span>);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//打印到屏幕，并回送数据长度</span></span><br><span class=\"line\">                        System.out.println(str);</span><br><span class=\"line\">                        socketOutput.println(<span class=\"string\">&quot;Server回答说：&quot;</span> +str.length());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">while</span>(flag);</span><br><span class=\"line\">                sockeInput.close();</span><br><span class=\"line\">                socketOutput.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//触发异常时打印一个异常信息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;连接异常断开！！！&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//连接关闭</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    socket.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;再见，客户端退出：&quot;</span>+socket.getInetAddress()+<span class=\"string\">&quot; P:&quot;</span>+socket.getPort());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["linux"],"tags":["计算机网络","socket"]},{"title":"shell脚本入门","url":"/2023/02/10/linux/shell%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8/","content":"<h1 id=\"shell基本用法\">shell基本用法</h1>\n<p>最近有写shell的需求，因此花了几个小时简单学习了下，在此做个简单的记录，学习资料为<a\nhref=\"https://www.runoob.com/linux/linux-shell.html\">菜鸟教程</a>。个人博客：<a\nhref=\"singhe.art\">singhe.art</a></p>\n<span id=\"more\"></span>\n<h2 id=\"shell变量\">shell变量</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">for skill in Ada Coffe Action Java; do</span><br><span class=\"line\">\techo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">There must be no spaces on both side of the equal sign, otherwise an error will be reported</span></span><br><span class=\"line\">your_name=&quot;tom&quot;</span><br><span class=\"line\">echo $your_name</span><br><span class=\"line\">your_name=&quot;alibaba&quot;</span><br><span class=\"line\">echo $your_name</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Read-only variable</span></span><br><span class=\"line\">myUrl=&quot;https://www.google.com&quot;</span><br><span class=\"line\">readonly myUrl</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Error! variable.sh: line 13: myUrl: <span class=\"built_in\">readonly</span> variable</span></span><br><span class=\"line\">myUrl=&quot;https://www.runoob.com&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">unset</span> url</span></span><br><span class=\"line\">unset_variable=&quot;https://www.runoob.com&quot;</span><br><span class=\"line\">unset myUrl</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nothing output</span></span><br><span class=\"line\">echo $myUrl</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"shell传递参数\">shell传递参数</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;Shell 传递参数实例!&quot;;</span><br><span class=\"line\">echo &quot;执行的文件名：$0&quot;;</span><br><span class=\"line\">echo &quot;第一个参数为：$1&quot;;</span><br><span class=\"line\">echo &quot;第二个参数为：$2&quot;;</span><br><span class=\"line\">echo &quot;第三个参数为：$3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;参数个数为: $#&quot;;</span><br><span class=\"line\">echo &quot;传递的参数作为一个字符串显示：$*&quot;;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">diffrence between $* and <span class=\"variable\">$@</span></span></span><br><span class=\"line\">echo &quot;-- \\$* demonstration --&quot;</span><br><span class=\"line\">for i in &quot;$*&quot;; do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;-- \\$@ demonstration --&quot;</span><br><span class=\"line\">for i in &quot;$@&quot;; do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh ./parameter.sh 1 2 3 4 5</span><br></pre></td></tr></table></figure>\n<h2 id=\"shell数组\">shell数组</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Create a simple array</span></span><br><span class=\"line\">my_array=(A B &quot;C&quot; D)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">We can aslo use index to define array</span></span><br><span class=\"line\">array_name[0]=value0</span><br><span class=\"line\">array_name[1]=value1</span><br><span class=\"line\">array_name[2]=value2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Read value from array</span></span><br><span class=\"line\">echo &quot;The fisrt element is: $&#123;my_array[0]&#125;&quot;</span><br><span class=\"line\">echo &quot;The second element is: $&#123;my_array[1]&#125;&quot;</span><br><span class=\"line\">echo &quot;The third element is: $&#123;my_array[2]&#125;&quot;</span><br><span class=\"line\">echo &quot;The forth element is: $&#123;my_array[3]&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Associative array(<span class=\"built_in\">which</span> is like dictionary <span class=\"keyword\">in</span> python)</span></span><br><span class=\"line\">site[&quot;google&quot;]=&quot;www.google.com&quot;</span><br><span class=\"line\">site[&quot;runoob&quot;]=&quot;www.runoob.com&quot;</span><br><span class=\"line\">site[&quot;taobao&quot;]=&quot;www.taobao.com&quot;</span><br><span class=\"line\">echo $&#123;site[&quot;runoob&quot;]&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">we can get all elements <span class=\"keyword\">in</span> array using @ or *</span></span><br><span class=\"line\">my_array[0]=A</span><br><span class=\"line\">my_array[1]=B</span><br><span class=\"line\">my_array[2]=C</span><br><span class=\"line\">my_array[3]=D</span><br><span class=\"line\">echo &quot;All elements in array are: $&#123;my_array[*]&#125;&quot;</span><br><span class=\"line\">echo &quot;All elements in array are: $&#123;my_array[@]&#125;&quot;</span><br><span class=\"line\">echo &quot;All elements in site: $&#123;site[*]&#125;&quot;</span><br><span class=\"line\">echo &quot;All elements in site: $&#123;site[@]&#125;&quot;</span><br><span class=\"line\">echo &quot;All keys are: $&#123;!site[*]&#125;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Get The element numbers of array</span></span><br><span class=\"line\">echo &quot;The number of array elements: $&#123;#my_array[*]&#125;&quot;</span><br><span class=\"line\">echo &quot;The number of array elements: $&#123;#my_array[@]&#125;&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"shell运算符\">shell运算符</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">There must be spaces on both side of <span class=\"string\">&#x27;+&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Arithmetic operator</span></span><br><span class=\"line\">val=`expr 2 + 2`</span><br><span class=\"line\">echo &quot;The sum of two numers: $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $a + $b`</span><br><span class=\"line\">echo &quot;a + b: $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $a - $b`</span><br><span class=\"line\">echo &quot;a - b: $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $a \\* $b`</span><br><span class=\"line\">echo &quot;a * b: $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $b / $a`</span><br><span class=\"line\">echo &quot;a / b: $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">val=`expr $b % $a`</span><br><span class=\"line\">echo &quot;a % b: $val&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a == $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a is equal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a != $b ]</span><br><span class=\"line\">then </span><br><span class=\"line\">    echo &quot;a is not equal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Relational operator</span></span><br><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\">if [ $a -eq $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a -eq $b : a is equal b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a -eq $b : a is not equal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a -ne $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a -ne $b : a is not equal b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a -ne $b : a is equal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a -gt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a -gt $b : a is greater than b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a -gt $b : a is not greater than b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a -lt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a -lt $b : a is less than b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a -lt $b : a is not less than b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a -ge $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a -ge $b : a is greater than or equal b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a -ge $b : a is not greater than or euqal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a -le $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a -le $b : a is less than or euqal b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a -le $b : a is not less than or euqal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Bool operator</span></span><br><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\">if [ $a != $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a != $b : a is not equal b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a == $b : a is euqal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-a: and</span></span><br><span class=\"line\">if [ $a -lt 100 -a $b -gt 15]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a is less than 100 and $b is greater than 15 is valid&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a is less than 100 and $b is greater than 15 is not valid&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-o: or</span></span><br><span class=\"line\">if [ $a -lt 100 -o $b -gt 100 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a is less than 100 or $b is greater than 100 is valid&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a is less than 100 or $b is greater than 100 is not valid&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Logic operator</span></span><br><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;return true&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;return false&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $a -lt 100 || $b -gt 100 ]]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;return true&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;return false&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Strign operator</span></span><br><span class=\"line\">a=&quot;abc&quot;</span><br><span class=\"line\">b=&quot;efg&quot;</span><br><span class=\"line\">if [ $a = $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a = $b : a is equal b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a = $b : a is not equal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a != $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a != $b : a is not equal b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a != $b : a is equal b&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -z $a ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;-z $a : the length of string is 0&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;-z $a : the length of string is not 0&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -n $a ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;-z $a : the length fo string is not 0&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;-z $a : the length fo string is 0&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $a ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$a : the string is not null&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;$a : the strign is null&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">file <span class=\"built_in\">test</span> operator</span></span><br><span class=\"line\">file=&quot;/Volumes/HDD/Users/singheart/Project/shell/learn/operator.sh&quot;</span><br><span class=\"line\">if [ -r $file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file is readable&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;file is not readable&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -w $file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file is writable&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;file is not writable&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -x $file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file is executable&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;file is not executable&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -d $file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file is directory&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;file is not directory&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -s $file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file is not empty&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;file is empty&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -e $file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file exists&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;file does not exist&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"shell-echo命令\">shell echo命令</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">output normal string</span></span><br><span class=\"line\">echo &quot;It is a test&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">The double quotation marks can be omitted</span></span><br><span class=\"line\">echo It is a test</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Show escape characters</span></span><br><span class=\"line\">echo &quot;\\&quot;It is a test\\&quot;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Show varaible</span></span><br><span class=\"line\">echo &quot;Please input your name:&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">read</span> will <span class=\"built_in\">read</span> one line from standard input<span class=\"string\">&quot;</span></span></span><br><span class=\"line\">read name</span><br><span class=\"line\">echo &quot;your name is $name&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">New line</span></span></span><br><span class=\"line\">echo &quot;OK! \\n&quot;</span><br><span class=\"line\">echo &quot;It is a test&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">Don&#x27;t output new line</span></span></span><br><span class=\"line\">echo &quot;OK! \\c&quot;</span><br><span class=\"line\">echo &quot;It is a test&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">Redirect output to a file</span></span></span><br><span class=\"line\">echo &quot;It is a test&quot; &gt; myfile</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">single quotation</span></span></span><br><span class=\"line\">echo &#x27;$name\\&quot;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">Show the result of command</span></span></span><br><span class=\"line\">echo `date`</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"shell-printf命令\">shell printf命令</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">printf &quot;%-10s %-8s %-4s\\n&quot; name sex weight\\(KG\\)</span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; xoxi man 66.1234</span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; singheart man 66.1234</span><br><span class=\"line\">printf &quot;%-10s %-8s %-4.2f\\n&quot; jiong woman 66.1234</span><br></pre></td></tr></table></figure>\n<h2 id=\"shell-test命令\">shell test命令</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">num1=100</span><br><span class=\"line\">num2=100</span><br><span class=\"line\">if test $[num1] -eq $[num2]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;Two numbers are equal&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Two numbers are not equal&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[]执行基本的算数运算</span></span><br><span class=\"line\">a=5</span><br><span class=\"line\">b=6</span><br><span class=\"line\">result=$[a+b]</span><br><span class=\"line\">echo &quot;result is : $result&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">string <span class=\"built_in\">test</span></span></span><br><span class=\"line\">num1=&quot;ru1noob&quot;</span><br><span class=\"line\">num2=&quot;runoob&quot;</span><br><span class=\"line\">if test $num1 = $num2</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;Two strings are equal&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Two strings are not equal&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">file <span class=\"built_in\">test</span></span></span><br><span class=\"line\">cd /bin</span><br><span class=\"line\">if test -e ./bash</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file exists&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;file does not exist&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"shell-awk命令\">shell awk命令</h2>\n<p>这里记录其最简单的用法。awk能够把输入的字符串按照空格进行分割，$0是字符串本身，$1是第一个子字符串，$2是第二个子字符串，以此类推。</p>\n<p>下面的shell脚本能够获取某个文件的详细信息大小：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">if [ ! -e $1 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$1 does not exist!&quot;</span><br><span class=\"line\">    exit</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">authority=$(ls -l $1 | awk &#x27;&#123;print $1&#x27;&#125;)</span><br><span class=\"line\">file_size=$(ls -l $1 | awk &#x27;&#123;print $5&#x27;&#125;)</span><br><span class=\"line\">echo &quot;$1 authority is $authority&quot;</span><br><span class=\"line\">echo &quot;$1 size is $file_size bytes&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"shell-tee命令\">shell tee命令</h2>\n<p>tee命令用于读取标准输入，将其内容输出到标准输出，同时保存成文件.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">tee</span> test_data</span></span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\">test_data</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> test_data</span></span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<p>hello\nworld为我们在键盘上的输入，tee会将标准输入输出到标准输出，同时还会将其内容写到文件中。</p>\n<h2 id=\"shell流程控制\">shell流程控制</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">if</span> <span class=\"keyword\">else</span>的[...]判断语句中大于使用-gt，小于使用-lt</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">如果使用((...))作为判断语句，大于和小于可以直接使用&gt;和&lt;</span></span><br><span class=\"line\">a=10</span><br><span class=\"line\">b=20</span><br><span class=\"line\">if [ $a == $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a is equal b&quot;</span><br><span class=\"line\">elif (( $a &gt; $b ))</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a is greater than b&quot;</span><br><span class=\"line\">elif [ $a -lt $b ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;a is less than b&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;no valid condition&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">if_else is usually used with <span class=\"built_in\">test</span></span></span><br><span class=\"line\">num1=$[2*3]</span><br><span class=\"line\">num2=$[1+5]</span><br><span class=\"line\">if test $[num1] -eq $[num2]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;Two nums are equal&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Two nums are not equal&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">for</span> loop</span></span><br><span class=\"line\">for loop in 1 2 3 4 5</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;The value is : $loop&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for str in This is a string</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;value is $str&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">while</span> loop</span></span><br><span class=\"line\">int=1</span><br><span class=\"line\">while (( $int &lt;= 5 ))</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $int</span><br><span class=\"line\">    # use bash let command</span><br><span class=\"line\">    let &quot;int++&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Press &lt;CTRL-D&gt; exit&quot;</span><br><span class=\"line\">echo &quot;input your favorite site:\\c&quot;</span><br><span class=\"line\">while read FILM</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;Yes! $FILM is a greate site&quot;</span><br><span class=\"line\">    echo &quot;input your favorite site:\\c&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">condition loop</span></span><br><span class=\"line\">a=0</span><br><span class=\"line\">until [ ! $a -lt 10 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo $a</span><br><span class=\"line\">    a=`expr $a + 1`</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">case...esac</span></span><br><span class=\"line\">echo &quot;input digit between 1 and 4:\\c&quot;</span><br><span class=\"line\">read aNum</span><br><span class=\"line\">case $aNum in</span><br><span class=\"line\">    1) echo &quot;you choose 1&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    2) echo &quot;you choose 2&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    3) echo &quot;you choose 3&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    4) echo &quot;you choose 4&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    *) echo &quot;choosed number are not between 1 and 4&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br><span class=\"line\">site=&quot;runoob&quot;</span><br><span class=\"line\">case &quot;$site&quot; in</span><br><span class=\"line\">    &quot;runoob&quot;) echo &quot;菜鸟教程&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    &quot;google&quot;) echo &quot;google search&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">    &quot;taoabo&quot;) echo &quot;taobao&quot;</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">break</span></span></span><br><span class=\"line\">while :</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;input numer between 1 and 5:\\c&quot;</span><br><span class=\"line\">    read aNum</span><br><span class=\"line\">    case $aNum in</span><br><span class=\"line\">        1|2|3|4|5) echo &quot;input number is $aNum!&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *) echo &quot;input number is not between 1 and 5. Gameover!&quot;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">continue</span></span></span><br><span class=\"line\">while :</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;input number between 1 and 5:\\c&quot;</span><br><span class=\"line\">    read aNum</span><br><span class=\"line\">    case $aNum in</span><br><span class=\"line\">        1|2|3|4|5) echo &quot;your input is $aNum!&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *) echo &quot;your input is not between 1 and 5&quot;</span><br><span class=\"line\">             continue</span><br><span class=\"line\">             echo &quot;game over&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h2 id=\"shell函数\">shell函数</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">demoFunc()&#123;</span><br><span class=\"line\">    echo &quot;this is a shell function&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">demoFunc</span><br><span class=\"line\"></span><br><span class=\"line\">funWithReturn()&#123;</span><br><span class=\"line\">    echo &quot;Please input the first number:\\c&quot;</span><br><span class=\"line\">    read aNum</span><br><span class=\"line\">    echo &quot;Please input the second number:\\c&quot;</span><br><span class=\"line\">    read anotherNum</span><br><span class=\"line\">    echo &quot;you input $aNum and $anotherNum&quot;</span><br><span class=\"line\">    return $(($aNum+$anotherNum))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funWithReturn</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">use $? to get <span class=\"built_in\">return</span> value from <span class=\"keyword\">function</span></span></span><br><span class=\"line\">echo &quot;The sum is $? !&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">fun3()&#123;</span><br><span class=\"line\">    echo &quot;the first parameter is $1&quot;</span><br><span class=\"line\">    echo &quot;the second parameter is $2&quot;</span><br><span class=\"line\">    echo &quot;the third parameter is $3&quot;</span><br><span class=\"line\">    echo &quot;the tenth parameter is $10&quot;</span><br><span class=\"line\">    echo &quot;the tenth parameter is $&#123;10&#125;&quot;</span><br><span class=\"line\">    echo &quot;total parameter number is $#&quot;</span><br><span class=\"line\">    echo &quot;作为一个字符串输出所有参数 $* &quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun3 1 2 3 4 5 6 7 8 9 34 73</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"shell输入输出重定向\">shell输入输出重定向</h2>\n<table>\n<thead>\n<tr class=\"header\">\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>&gt;</td>\n<td>标准输出覆盖重定向：将命令的输出重定向输出到其他文件中</td>\n</tr>\n<tr class=\"even\">\n<td>&gt;&gt;</td>\n<td>标准输出追加重定向：将命令的输出重定向输出到其他文件中</td>\n</tr>\n<tr class=\"odd\">\n<td>&gt;&amp;</td>\n<td>标识输出重定向：将一个标识的输出重定向到另一个标识的输入</td>\n</tr>\n<tr class=\"even\">\n<td>&lt;</td>\n<td>标准输入重定向：命令将从指定文件中读取输入而不是从键盘输入</td>\n</tr>\n<tr class=\"odd\">\n<td>|</td>\n<td>管道符，从一个命令中读取输出并作为另一个命令的输入</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"的用法\">&gt;的用法</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span></span></span><br><span class=\"line\">client.proto\t\tnode.proto\t\tstorage.proto</span><br><span class=\"line\">message.proto\t\tserver.proto\t\ttransaction.proto</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span> &gt; all_files.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">ls</span> -l all_files.txt</span></span><br><span class=\"line\">-rw-r--r--  1 singheart  admin  97  2 10 18:18 all_files.txt</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> all_files.txt</span></span><br><span class=\"line\">all_files.txt</span><br><span class=\"line\">client.proto</span><br><span class=\"line\">message.proto</span><br><span class=\"line\">node.proto</span><br><span class=\"line\">server.proto</span><br><span class=\"line\">storage.proto</span><br><span class=\"line\">transaction.proto</span><br></pre></td></tr></table></figure>\n<p>可以看出，语句<code>ls &gt; all_files.txt</code>\nls生成的标准输出，被重定向到了文件中，结果就是所有的输出都不见了，转而作为文件内容写入到了<code>all_files.txt</code>中.</p>\n<blockquote>\n<p>值得注意的是，上面命令等价于<code>ls 1&gt; all_files.txt</code>,也就是省略了代表标准输出的1。</p>\n</blockquote>\n<h3 id=\"用法\">&gt;&gt; 用法</h3>\n<p>和<code>&gt;</code>类似，只不过&gt;&gt;生成的文件内容是以追加的形式写入，而<code>&gt;</code>是直接生成新的文件并覆盖</p>\n<h3 id=\"的用法-1\">&gt;&amp;的用法</h3>\n<p><code>&gt;&amp;</code>用于将一个标识重定向到另一个标志。举个例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">make 2&gt;&amp;1 | tee log.txt</span><br></pre></td></tr></table></figure>\n<p>此处的<code>2&gt;&amp;1</code>就是将标准错误重定向到标准输出中(也就是想把错误也记录下来，方便查日志)。<code>|</code>为管道标识符，将上一部分的标准输出作为下一个部分的标准输入。tee上面讲过，会将标准输入写入标准输出而且同时还写入文件中。</p>\n<h1 id=\"shell实战\">shell实战</h1>\n<h2 id=\"new_item.sh\">new_item.sh</h2>\n<p>使用shell添加新的item，避免做一些重复的事情</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">if [ $# != 1 ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;Usage: sh new_item.sh [number]. \\nfor example, sh new_item.sh 29&quot;</span><br><span class=\"line\">    exit</span><br><span class=\"line\">else</span><br><span class=\"line\">    dir_name=&quot;item$1&quot;</span><br><span class=\"line\">    if [ -e $dir_name ]</span><br><span class=\"line\">    then</span><br><span class=\"line\">        echo &quot;$dir_name already exists!&quot;</span><br><span class=\"line\">        exit</span><br><span class=\"line\">    else</span><br><span class=\"line\">        mkdir $dir_name</span><br><span class=\"line\">        touch $dir_name/CMakeLists.txt</span><br><span class=\"line\">        touch $dir_name/main.cpp</span><br><span class=\"line\">        echo &quot;#include &lt;iostream&gt;\\n\\nint main() &#123;\\n    return 0;\\n&#125;&quot; &gt; $dir_name/main.cpp</span><br><span class=\"line\">        echo &quot;add_executable(item$1_main main.cpp&quot; &gt; $dir_name/CMakeLists.txt</span><br><span class=\"line\">        echo &quot;add_subdirecory(item$1)&quot; &gt;&gt; CMakeLists.txt</span><br><span class=\"line\">        echo &quot;$dir_name has successfully created!&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"compare.sh\">compare.sh</h2>\n<p>使用该shell来对比内联函数和普通函数的区别</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">比较普通函数和内联函数生成的可执行文件的大小</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">由此来判断内联函数的原理</span></span><br><span class=\"line\">inline_src_file=&quot;inline_function.cpp&quot;</span><br><span class=\"line\">outline_src_file=&quot;outline_function.cpp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">inline_out_file=&quot;inline_out.app&quot;</span><br><span class=\"line\">outline_out_file=&quot;outline_out.app&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">judge whether <span class=\"built_in\">source</span> file exists</span></span><br><span class=\"line\">if [ ! -e $inline_src_file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$inline_src_file does not exist!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -e $outline_src_file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$outline_src_file does not exists!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">judge whether the binary executable file exists.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">If it exists, delete them.</span></span><br><span class=\"line\">if [ -e $inline_out_file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file $inline_out_file already exists, I will delete it!&quot;</span><br><span class=\"line\">    rm -rf $inline_out_file</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -e $outline_out_file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;file $outline_out_file already exists, I will delete it!&quot;</span><br><span class=\"line\">    rm -rf $outlie_out_file</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">compile with g++</span></span><br><span class=\"line\">g++ $inline_src_file -o $inline_out_file</span><br><span class=\"line\">g++ $outline_src_file -o $outline_out_file</span><br><span class=\"line\">if [ -e $inline_out_file -a -e $outline_out_file ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;$inline_out_file and $outline_out_file have generated&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo &quot;Fail to generate $inline_out_file and $outline_out_file!&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">inline_app_size=$(ls -l $inline_out_file | awk &#x27;&#123;print $5&#125;&#x27;)</span><br><span class=\"line\">outline_app_size=$(ls -l $outline_out_file | awk &#123;&#x27;print $5&#125;&#x27;)</span><br><span class=\"line\">echo $inline_app_size</span><br><span class=\"line\">echo $outline_app_size</span><br><span class=\"line\">echo &quot;The file size of $inline_out_file generated by $inline_src_file is $inline_app_size bytes.&quot;</span><br><span class=\"line\">echo &quot;The file size of $outline_out_file generated by $outline_src_file is $outline_app_size bytes.&quot;</span><br><span class=\"line\">if (( $inline_app_size &gt; $outline_app_size))</span><br><span class=\"line\">then</span><br><span class=\"line\">    echo &quot;The executable file size generated with inline_function is bigger!&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n","categories":["linux"],"tags":["shell"]},{"title":"tar使用总结","url":"/2022/04/10/linux/tar%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","content":"<blockquote>\n<p>tar是归档文件，.bz2或者.gzip是压缩格式。 # 1. 解压&amp;提取 ## 1.1\n对于tar.gz结尾的压缩包 <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf *.tar.gz</span><br></pre></td></tr></table></figure> 参数解读 -\n<code>-z</code>:使用gzip来处理压缩包。 -\n<code>-x</code>:extract，提取文件。 -\n<code>-v</code>:verbose，显示提取细节 -\n<code>f</code>:file，指定文件</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"对于tar.bz2结尾的压缩包\">1.2 对于tar.bz2结尾的压缩包</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -jxvf *.tar.bz2</span><br></pre></td></tr></table></figure>\n<p>参数解读 - <code>-j</code>:使用<code>bunzip2</code>来处理压缩包。 -\n<code>-x</code>:extract，提取文件。 -\n<code>-v</code>:verbose，显示提取细节 -\n<code>-f</code>:file，指定文件</p>\n<h1 id=\"归档压缩\">2. 归档&amp;压缩</h1>\n<h2 id=\"使用gzip来压缩\">2.1 使用gzip来压缩</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zcvf *.tar.gz /path/to/dir /path2/to/dir</span><br></pre></td></tr></table></figure>\n<p>使用<code>gzip</code>处理的文件结尾为<code>.gz</code> 参数解读 -\n<code>-z</code>:使用<code>gzip</code>压缩文件 -\n<code>-c</code>:create，创建归档文件 -\n<code>-v</code>:verbose，显示详细信息 -\n<code>-f</code>:file，指定文件</p>\n<h2 id=\"使用bunzip2来压缩\">2.2 使用bunzip2来压缩</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -jcvf *.tar.bz2 /path/to/dir /path2/to/dir</span><br></pre></td></tr></table></figure>\n<p>使用<code>bunzip2</code>处理的文件结尾为<code>.bz2</code> -\n<code>-j</code>:使用<code>bunzip2</code>压缩文件 -\n<code>-c</code>:create，创建归档文件 -\n<code>-v</code>:verbose，显示详细信息 -\n<code>-f</code>:file，指定文件</p>\n","categories":["linux"],"tags":["coding","linux"]},{"title":"从百草园到三味书屋","url":"/2023/06/13/linux/%E4%BB%8E%E7%99%BE%E8%8D%89%E5%9B%AD%E5%88%B0%E4%B8%89%E5%91%B3%E4%B9%A6%E5%B1%8B/","content":"<h1 id=\"x00-引言\">0x00 引言</h1>\n<p>最近看论文看到使用SIMD指令加速，从指令集到AT&amp;T汇编再到linux系统调用一路折腾，这里就做一个小小的记录。</p>\n<span id=\"more\"></span>\n<h1 id=\"x01-att汇编\">0x01 AT&amp;T汇编</h1>\n<blockquote>\n<p>参考<a\nhref=\"https://blog.csdn.net/qq_53144843/article/details/120346586\">https://blog.csdn.net/qq_53144843/article/details/120346586</a></p>\n</blockquote>\n<h1 id=\"x02-ieee754\">0x02 IEEE754</h1>\n<p><a\nhref=\"https://blog.csdn.net/gao_zhennan/article/details/120717424#t8\">https://blog.csdn.net/gao_zhennan/article/details/120717424#t8</a>这篇文章讲得太好了</p>\n<h1 id=\"x03-内联汇编\">0x03 内联汇编</h1>\n<blockquote>\n<p>参考<a\nhref=\"https://zhuanlan.zhihu.com/p/578286784\">https://zhuanlan.zhihu.com/p/578286784</a></p>\n</blockquote>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;汇编语句&quot;</span><br><span class=\"line\">\t\t:输出寄存器</span><br><span class=\"line\">\t\t:输入寄存器</span><br><span class=\"line\">\t\t:会被修改的寄存器</span><br><span class=\"line\">\t\t)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">通用寄存器：</span><br><span class=\"line\">&quot;a&quot;               将输入变量放入eax</span><br><span class=\"line\">&quot;b&quot;               将输入变量放入ebx</span><br><span class=\"line\">&quot;c&quot;               将输入变量放入ecx</span><br><span class=\"line\">&quot;d&quot;               将输入变量放入edx</span><br><span class=\"line\">&quot;s&quot;               将输入变量放入esi</span><br><span class=\"line\">&quot;d&quot;               将输入变量放入edi</span><br><span class=\"line\">&quot;q&quot;               将输入变量放入eax，ebx，ecx，edx中的一个</span><br><span class=\"line\">&quot;r&quot;               将输入变量放入通用寄存器，也就是eax，ebx，ecx，edx，esi，edi中的一个</span><br><span class=\"line\">&quot;A&quot;              把eax和edx合成一个64 位的寄存器(use long longs)</span><br><span class=\"line\"></span><br><span class=\"line\">内存：</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;m&quot;              内存变量</span><br><span class=\"line\">&quot;o&quot;              操作数为内存变量，但是其寻址方式是偏移量类型，也即是基址寻址，或者是基址加变址寻址</span><br><span class=\"line\">&quot;V&quot;              操作数为内存变量，但寻址方式不是偏移量类型</span><br><span class=\"line\">&quot; &quot;              操作数为内存变量，但寻址方式为自动增量</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;g&quot;             将输入变量放入eax，ebx，ecx，edx中的一个，或者作为内存变量 &quot;X&quot;            操作数可以是任何类型</span><br><span class=\"line\"></span><br><span class=\"line\">立即数：</span><br><span class=\"line\">&quot;I&quot;             0-31之间的立即数（用于32位移位指令）</span><br><span class=\"line\">&quot;J&quot;             0-63之间的立即数（用于64位移位指令）</span><br><span class=\"line\">&quot;N&quot;             0-255之间的立即数（用于out指令）</span><br><span class=\"line\">&quot;i&quot;             立即数 </span><br><span class=\"line\">&quot;n&quot;            立即数</span><br><span class=\"line\"></span><br><span class=\"line\">匹配：</span><br><span class=\"line\">&quot; 0-9 &quot;         表示用它限制的操作数与某个指定的操作数匹配，去描述&quot;％1&quot;操作</span><br><span class=\"line\">数，那么&quot;%1&quot;引用的其实就是&quot;%0&quot;操作数，注意作为限定符字母的0－9 与指令中</span><br><span class=\"line\">的&quot;％0&quot;－&quot;％9&quot;的区别，前者描述操作数，后者代表操作数。</span><br><span class=\"line\"></span><br><span class=\"line\">&amp;                该输出操作数不能使用过和输入操作数相同的寄存器</span><br><span class=\"line\"></span><br><span class=\"line\">操作数类型 :      </span><br><span class=\"line\">&quot;=&quot;           操作数在指令中是只写的（输出操作数） </span><br><span class=\"line\">&quot;+&quot;           操作数在指令中是读写类型的（输入输出操作数）</span><br><span class=\"line\"></span><br><span class=\"line\">浮点数:</span><br><span class=\"line\">&quot;f&quot;          浮点寄存器</span><br><span class=\"line\">&quot;t&quot;           第一个浮点寄存器</span><br><span class=\"line\">&quot;u&quot;          第二个浮点寄存器</span><br><span class=\"line\">&quot;G&quot;          标准的80387浮点常数</span><br><span class=\"line\">%            该操作数可以和下一个操作数交换位置</span><br><span class=\"line\">                                    </span><br><span class=\"line\">#             部分注释，从该字符到其后的逗号之间所有字母被忽略</span><br><span class=\"line\">*             表示如果选用寄存器，则其后的字母被忽略</span><br></pre></td></tr></table></figure>\n<p>举个例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> input = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> output;</span><br><span class=\"line\">\t<span class=\"keyword\">asm</span> <span class=\"title function_\">volatile</span><span class=\"params\">(<span class=\"string\">&quot;nop&quot;</span></span></span><br><span class=\"line\"><span class=\"params\">\t\t\t:<span class=\"string\">&quot;=c&quot;</span>(output)</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t:<span class=\"string\">&quot;c&quot;</span>(input)</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t)</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;output is %d&quot;</span>, output);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nop代表没有汇编操作，\"=c\"(output)表示最后会将寄存器ecx的值给output，\"c\"(input)在最开始会将input的值给ecx。</p>\n<h1 id=\"x04-system-call和system-interrupt\">0x04 System call和System\ninterrupt</h1>\n<p>简单来说，这两者均是为了用户态调用内核态的功能（比如文件读写等）。</p>\n<h2 id=\"使用c语言进行syscall\">使用C语言进行syscall</h2>\n<blockquote>\n<p>参考<a\nhref=\"https://www.baeldung.com/cs/system-call-vs-system-interrupt\">https://www.baeldung.com/cs/system-call-vs-system-interrupt</a></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tsyscall(SYS_write, <span class=\"number\">1</span>, <span class=\"string\">&quot;hello world\\n&quot;</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先来看看头文件的内容，&lt;sys/syscall.h&gt;文件在<code>/usr/include/x86_64-linux-gnu/sys/syscall.h</code>下，内如如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _SYSCALL_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SYSCALL_H      1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This file should list the numbers of the system calls the system knows.</span></span><br><span class=\"line\"><span class=\"comment\">   But instead of duplicating this we use the information available</span></span><br><span class=\"line\"><span class=\"comment\">   from the kernel sources.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;asm/unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* The Linux kernel header file defines macros __NR_*, but some</span></span><br><span class=\"line\"><span class=\"comment\">   programs expect the traditional form SYS_*.  &lt;bits/syscall.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   defines SYS_* macros for __NR_* macros of known names.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/syscall.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>再来看看&lt;bits/syscall.h&gt;中的内容，<code>vim /usr/include/x86_64-linux-gnu/bits/syscall.h</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __NR_waitid</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> SYS_waitid __NR_waitid</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __NR_waitpid</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> SYS_waitpid __NR_waitpid</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __NR_write</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> SYS_write __NR_write</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __NR_writev</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> SYS_writev __NR_writev</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>可以看到<code>SYS_write</code>就是<code>__NR_write</code></p>\n<p>再来看看<code>&lt;asm/unistd.h&gt;</code>中的内容，<code>vim /usr/include/x86_64-linux-gnu/asm/unistd.h</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _ASM_X86_UNISTD_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _ASM_X86_UNISTD_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * x32 syscall flag bit.  Some user programs expect syscall NR macros</span></span><br><span class=\"line\"><span class=\"comment\"> * and __X32_SYSCALL_BIT to have type int, even though syscall numbers</span></span><br><span class=\"line\"><span class=\"comment\"> * are, for practical purposes, unsigned long.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Fortunately, expressions like (nr &amp; ~__X32_SYSCALL_BIT) do the right</span></span><br><span class=\"line\"><span class=\"comment\"> * thing regardless.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __X32_SYSCALL_BIT       0x40000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">ifdef</span> __i386__</span></span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"keyword\">include</span> <span class=\"string\">&lt;asm/unistd_32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">elif</span> defined(__ILP32__)</span></span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"keyword\">include</span> <span class=\"string\">&lt;asm/unistd_x32.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"keyword\">include</span> <span class=\"string\">&lt;asm/unistd_64.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* _ASM_X86_UNISTD_H */</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>找到了我们最后想要的<code>&lt;asm/unistd_64.h&gt;</code>，<code>vim /usr/include/x86_64-linux-gnu/asm/unistd_64.h</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _ASM_X86_UNISTD_64_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _ASM_X86_UNISTD_64_H 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_read 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_write 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_open 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_close 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_stat 4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_fstat 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_lstat 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_poll 7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_lseek 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_mmap 9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_mprotect 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_munmap 11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_brk 12</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_rt_sigaction 13</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_rt_sigprocmask 14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_rt_sigreturn 15</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_ioctl 16</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_pread64 17</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_pwrite64 18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_readv 19</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_writev 20</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __NR_exit 60</span></span><br></pre></td></tr></table></figure>\n<p>下面用一张图简单梳理一下：</p>\n<figure>\n<img src=\"http://img.singhe.art/syscall.h.png\" alt=\"syscall.h\" />\n<figcaption aria-hidden=\"true\">syscall.h</figcaption>\n</figure>\n<p>回到最开始的程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tsyscall(SYS_write, <span class=\"number\">1</span>, <span class=\"string\">&quot;hello world\\n&quot;</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>syscall的原型为<code>long syscall(long number, ...);</code>，通过SYS_write调用sys_write，其函数原型为<code>long sys_write(unsigned int fd, const char __user *buf, size_t count);</code></p>\n<p>其作用就是通过syscall调用sys_write()功能，并写入stdout(1)中，stdin为0，stderr为2，内容为\"hello\nworld\"，长度为12.</p>\n<h2 id=\"使用汇编进行syscall\">使用汇编进行syscall</h2>\n<blockquote>\n<p>参考<a\nhref=\"https://blog.csdn.net/chuck_huang/article/details/79922595\">https://blog.csdn.net/chuck_huang/article/details/79922595</a></p>\n<p><a\nhref=\"https://web.archive.org/web/20160801075139/http://www.x86-64.org/documentation/abi.pdf\">AMD64\nABI convention</a></p>\n</blockquote>\n<figure>\n<img src=\"http://img.singhe.art/20180413032340186\"\nalt=\"ABI_reg_usage\" />\n<figcaption aria-hidden=\"true\">ABI_reg_usage</figcaption>\n</figure>\n<figure>\n<img src=\"https://i.stack.imgur.com/j8hpC.png\"\nalt=\"enter image description here\" />\n<figcaption aria-hidden=\"true\">enter image description here</figcaption>\n</figure>\n<p>System V\nABI规定了对64位程序的接口，也规定了函数参数的传递规则，根据此规则，用调用sys_write(这里参数的第一第二的顺序是针对sys_write而言的，syscall要调用哪一个函数由rax决定，由#define\n__NR_write\n1知道要调用sys_write应该将rax设置为1)，所以文件描述符1需要加载到rdi寄存器，“hello\nworld” 字符串的地址需要加载到 %rsi，字符串的长度加载到 rdx。</p>\n<p>那么我们的AT&amp;T汇编程序<code>hello.s</code>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    .section .data</span><br><span class=\"line\">message:</span><br><span class=\"line\">    .ascii &quot;hello world!\\n&quot;</span><br><span class=\"line\">    length = . - message</span><br><span class=\"line\"></span><br><span class=\"line\">    .section .text</span><br><span class=\"line\">    .global _start      # must be declared for linker</span><br><span class=\"line\">_start:</span><br><span class=\"line\">    movq $1, %rax      # &#x27;write&#x27; syscall number</span><br><span class=\"line\">    movq $1, %rdi      # file descriptor, stdout</span><br><span class=\"line\">    lea message(%rip), %rsi # relative addressing string message </span><br><span class=\"line\">    movq $length, %rdx</span><br><span class=\"line\">    syscall</span><br><span class=\"line\"></span><br><span class=\"line\">    movq $60, %rax     # &#x27;exit&#x27; syscall number</span><br><span class=\"line\">    xor %rdi, %rdi      # set rdi to zero, first parameter of sys_exit</span><br><span class=\"line\">    syscall</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其中 .section .data 和 .section .text 定义个数据段 和代码段。</p>\n<p>message 只是一个label 方便我们来引用 hello world 字符串。</p>\n<p>length = . - message 用来计算字符串的长度。. 用来表示当前的地址</p>\n<p>_start 是程序的入口</p>\n<p>进行汇编和链接，并运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@amd:~/project/assembly$ as -o hello.o hello.s</span><br><span class=\"line\">singheart@amd:~/project/assembly$ ld -o hello hello.o</span><br><span class=\"line\">singheart@amd:~/project/assembly$ ./hello </span><br><span class=\"line\">hello world!</span><br><span class=\"line\">singheart@amd:~/project/assembly$ </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用汇编进行interrupt\">使用汇编进行interrupt</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#hello.s</span><br><span class=\"line\">.data                                # 数据段声明</span><br><span class=\"line\">    msg : .string &quot;hello,world!\\n&quot;    # 要输出的字符串</span><br><span class=\"line\">    len = . - msg                    # 字串长度</span><br><span class=\"line\">.text                                # 代码段声明</span><br><span class=\"line\">.global _start                        # 指定入口函数</span><br><span class=\"line\"></span><br><span class=\"line\">_start:                                # 在屏幕上显示一个字符串</span><br><span class=\"line\">    movl $len, %edx                    # 参数三：字符串长度</span><br><span class=\"line\">    movl $msg, %ecx                    # 参数二：要显示的字符串</span><br><span class=\"line\">    movl $1, %ebx                    # 参数一：文件描述符(stdout)</span><br><span class=\"line\">    movl $4, %eax                    # 系统调用号(sys_write)</span><br><span class=\"line\">    int $0x80                        # 调用内核功能    </span><br><span class=\"line\">                                    # 退出程序</span><br><span class=\"line\">    movl $0, %ebx                    # 参数一：退出代码</span><br><span class=\"line\">    movl $1, %eax                    # 系统调用号(sys_exit)</span><br><span class=\"line\">    int $0x80                        # 调用内核功能</span><br><span class=\"line\">#end</span><br></pre></td></tr></table></figure>\n<p>这里使用int $0x80中断，不太了解详细信息，不做过多解释。</p>\n<h2 id=\"使用汇编进行printf\">使用汇编进行printf</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.section .data</span><br><span class=\"line\">msg:</span><br><span class=\"line\">    .asciz &quot;Printf In Assembly!!\\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">.section .text</span><br><span class=\"line\">.globl main</span><br><span class=\"line\">main:</span><br><span class=\"line\">    leaq msg(%rip), %rdi</span><br><span class=\"line\">    xor %al, %al</span><br><span class=\"line\">    call printf@plt</span><br><span class=\"line\"></span><br><span class=\"line\">    xor %edi, %edi</span><br><span class=\"line\">    call exit@plt</span><br></pre></td></tr></table></figure>\n<p><span class=\"citation\"\ndata-cites=\"plt代表使用了动态链接库\">@plt代表使用了动态链接库</span>，需要从procedure\nlinkage table中拿到printf这个符号的地址，然后才能解析调用。</p>\n<p>还是根据AMD64 ABI convention，传递函数参数并进行函数调用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">singheart@amd:~/project/assembly$ gcc -o print print.s </span><br><span class=\"line\">singheart@amd:~/project/assembly$ ./print </span><br><span class=\"line\">Printf In Assembly!!</span><br></pre></td></tr></table></figure>\n<h1 id=\"x05-simd指令\">0x05 SIMD指令</h1>\n<blockquote>\n<p>参考自<a\nhref=\"https://en.wikipedia.org/wiki/CPUID\">https://en.wikipedia.org/wiki/CPUID</a></p>\n</blockquote>\n<p>按照SIMD出现的时间，由以下几类SIMD指令</p>\n<ul>\n<li><a\nhref=\"https://en.wikipedia.org/wiki/MMX_(instruction_set)\">MMX</a>\n(1996)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/3DNow!\">3DNow!</a>\n(1998)</li>\n<li><a\nhref=\"https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions\">SSE</a>\n(1999)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/SSE2\">SSE2</a> (2001)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/SSE3\">SSE3</a> (2004)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/SSSE3\">SSSE3</a> (2006)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/SSE4\">SSE4</a> (2006)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/SSE5\">SSE5</a> (2007)</li>\n<li><a\nhref=\"https://en.wikipedia.org/wiki/Advanced_Vector_Extensions\">AVX</a>\n(2008)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/F16C\">F16C</a> (2009)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/XOP_instruction_set\">XOP</a>\n(2009)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/FMA_instruction_set\">FMA</a>\n(FMA4: 2011, FMA3: 2012)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/AVX2\">AVX2</a> (2013)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/AVX-512\">AVX-512</a>\n(2015)</li>\n<li><a\nhref=\"https://en.wikipedia.org/wiki/Advanced_Matrix_Extensions\">AMX</a>\n(2022)</li>\n</ul>\n<p>我们可以通过<code>cpuid</code>指令来查看是否支持各类型的SIMD指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.section .data</span><br><span class=\"line\">\tmmxstring: .asciz &quot;支持mmx指令集\\n&quot;</span><br><span class=\"line\">\tssestring: .asciz &quot;支持sse指令集\\n&quot;</span><br><span class=\"line\">\tsse2string: .asciz &quot;支持sse2指令集\\n&quot;</span><br><span class=\"line\">\tsse3string: .asciz &quot;支持sse3指令集\\n&quot;</span><br><span class=\"line\">.section .text</span><br><span class=\"line\">.global main</span><br><span class=\"line\">main:</span><br><span class=\"line\">\tmovl $1, %eax</span><br><span class=\"line\">\tcpuid</span><br><span class=\"line\"></span><br><span class=\"line\">mmxop:</span><br><span class=\"line\">\ttest $0x800000, %edx</span><br><span class=\"line\">\tjz sseop</span><br><span class=\"line\">\tleaq mmxstring(%rip), %rdi</span><br><span class=\"line\">\txor %al, %al</span><br><span class=\"line\">\tcall printf</span><br><span class=\"line\">sseop:</span><br><span class=\"line\">\ttest $0x2000000, %edx</span><br><span class=\"line\">\tjz sse2op</span><br><span class=\"line\">\tleaq ssestring(%rip), %rdi</span><br><span class=\"line\">\txor %al, %al</span><br><span class=\"line\">\tcall printf</span><br><span class=\"line\">sse2op:</span><br><span class=\"line\">\ttest $0x4000000, %edx</span><br><span class=\"line\">\tjz sse3op</span><br><span class=\"line\">\tleaq sse2string(%rip), %rdi</span><br><span class=\"line\">\txor %al, %al</span><br><span class=\"line\">\tcall printf</span><br><span class=\"line\">sse3op:</span><br><span class=\"line\">\ttest $0x01, %ecx</span><br><span class=\"line\">\tjz end</span><br><span class=\"line\">\tleaq sse3string(%rip), %rdi</span><br><span class=\"line\">\txor %al, %al</span><br><span class=\"line\">\tcall printf</span><br><span class=\"line\">end:</span><br><span class=\"line\">\txor %edi, %edi</span><br><span class=\"line\">\tcall exit</span><br></pre></td></tr></table></figure>\n<h2 id=\"sse指令\">SSE指令</h2>\n<blockquote>\n<p>参考自<a\nhref=\"https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions\">https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions</a></p>\n</blockquote>\n<p>SSE全称为Streaming SIMD\nExtensions，主要是为了单精度浮点数的运算而生。</p>\n<h3 id=\"floating-point-instructions\">Floating-point instructions</h3>\n<ul>\n<li>Memory-to-register/register-to-memory/register-to-register data\nmovement\n<ul>\n<li>Scalar – <code>MOVSS</code></li>\n<li>Packed –\n<code>MOVAPS, MOVUPS, MOVLPS, MOVHPS, MOVLHPS, MOVHLPS, MOVMSKPS</code></li>\n</ul></li>\n<li>Arithmetic\n<ul>\n<li>Scalar –\n<code>ADDSS, SUBSS, MULSS, DIVSS, RCPSS, SQRTSS, MAXSS, MINSS, RSQRTSS</code></li>\n<li>Packed –\n<code>ADDPS, SUBPS, MULPS, DIVPS, RCPPS, SQRTPS, MAXPS, MINPS, RSQRTPS</code></li>\n</ul></li>\n<li>Compare\n<ul>\n<li>Scalar – <code>CMPSS, COMISS, UCOMISS</code></li>\n<li>Packed – <code>CMPPS</code></li>\n</ul></li>\n<li>Data shuffle and unpacking\n<ul>\n<li>Packed – <code>SHUFPS, UNPCKHPS, UNPCKLPS</code></li>\n</ul></li>\n<li>Data-type conversion\n<ul>\n<li>Scalar – <code>CVTSI2SS, CVTSS2SI, CVTTSS2SI</code></li>\n<li>Packed – <code>CVTPI2PS, CVTPS2PI, CVTTPS2PI</code></li>\n</ul></li>\n<li>Bitwise logical operations\n<ul>\n<li>Packed – <code>ANDPS, ORPS, XORPS, ANDNPS</code></li>\n</ul></li>\n</ul>\n<p>关于scalar和packed的区别参考<a\nhref=\"https://zhuanlan.zhihu.com/p/556131141\">https://zhuanlan.zhihu.com/p/556131141</a></p>\n<p>movups指令，这条指令名称上分为四个部分：</p>\n<ol type=\"1\">\n<li><p>mov，表示数据移动，操作双方可以是内存也可以是寄存器。</p></li>\n<li><p>u，表示 <strong>unaligned</strong>，内存未对齐。如果是a，表示\n<strong>aligned</strong>，内存已对齐。</p></li>\n<li><p>p，表示\n<strong>packed</strong>，打包数据，会对128位所有数据执行操作。如果是s，则表示\n<strong>scalar</strong>，标量数据，仅对128位内第一个数执行操作。</p></li>\n<li><p>s，表示 <strong>single precision floating\npoint</strong>，将数据视为32位单精度浮点数，一组4个。如果是d，表示\n<strong>double precision floating\npoint</strong>，将数据视为64位双精度浮点，一组两个。</p></li>\n</ol>\n<p>从内存中向寄存器加载数据时，必须区分数据的对齐与否。SSE指令要求数据按16字节对齐，未对齐数据必须使用movups，已对齐数据可以任意使用movups或者movaps。对齐的数据需要按照下面这样进行声明：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// C++ 11 alignas</span></span><br><span class=\"line\"><span class=\"built_in\">alignas</span>(<span class=\"number\">16</span>) <span class=\"type\">float</span> a[<span class=\"number\">4</span>] = &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>对非对齐的数据使用movaps，会导致程序崩溃。理论上movups相比movaps性能会差一些，但在较新的CPU上性能差异已经基本可以忽视。</p>\n<p>现在来看一个例子，有两个float4数组，需要将他们分别相乘，结果存入另一个数组，写法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.section .data</span><br><span class=\"line\">format: .asciz &quot;%f\\n&quot;</span><br><span class=\"line\">a: .float 6, 7, 8, 9</span><br><span class=\"line\">b: .float 2, 3, 4, 5</span><br><span class=\"line\">res: .float 8, 1, 2, 5</span><br><span class=\"line\"></span><br><span class=\"line\">.section .text</span><br><span class=\"line\">.globl main</span><br><span class=\"line\">main:</span><br><span class=\"line\">\tpush %rbp</span><br><span class=\"line\">\tleaq format(%rip), %rdi</span><br><span class=\"line\">\tmovq $1, %rax</span><br><span class=\"line\">\tmovups a(%rip), %xmm0</span><br><span class=\"line\">\tmovups b(%rip), %xmm1</span><br><span class=\"line\">\tmulps %xmm1, %xmm0</span><br><span class=\"line\">\tmovups %xmm0, res(%rip)</span><br><span class=\"line\">\tcvtss2sd res+4(%rip), %xmm0</span><br><span class=\"line\">\tcall printf@plt</span><br><span class=\"line\"></span><br><span class=\"line\">\txor %eax, %eax</span><br><span class=\"line\">\tcall exit@plt</span><br></pre></td></tr></table></figure>\n<h3 id=\"封装的函数库\">封装的函数库</h3>\n<p>汇编写起来还是太麻烦了，我们可以直接使用封装好的库进行调用，下面是这些头文件。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mmintrin.h&gt;</span>     <span class=\"comment\">// MMX</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;xmmintrin.h&gt;</span>    <span class=\"comment\">// SSE</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;emmintrin.h&gt;</span>    <span class=\"comment\">// SSE2</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pmmintrin.h&gt;</span>    <span class=\"comment\">// SSE3</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tmmintrin.h&gt;</span>    <span class=\"comment\">// SSSE3</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;smmintrin.h&gt;</span>    <span class=\"comment\">// SSE4.1</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;nmmintrin.h&gt;</span>    <span class=\"comment\">// SSE4.2</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;wmmintrin.h&gt;</span>    <span class=\"comment\">// AES</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;immintrin.h&gt;</span>    <span class=\"comment\">// AVX</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;intrin.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是，printf(\"%f\",\nf_number)中%f对应的是double，当传递的类型为float的时候会提升成double。</p>\n<p>我们使用c语言对上面的汇编进行改写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;xmmintrin.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">float</span> a[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">float</span> b[<span class=\"number\">4</span>] = &#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">float</span> res[<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t__m128 A = _mm_loadu_ps(a);</span><br><span class=\"line\">\t__m128 B = _mm_loadu_ps(b);</span><br><span class=\"line\">\t__m128 RES = _mm_mul_ps(A, B);</span><br><span class=\"line\">\t_mm_storeu_ps(res, RES);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f &quot;</span>, res[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的，我们来看看所使用的指令</p>\n<ol type=\"1\">\n<li>_mm，表示这是一个64位/128位的指令，_mm256和_mm512则表示是256位或是512位的指令</li>\n<li>_loadu，表示unaligen的load指令，不带u后缀的为aligen版本</li>\n<li>_ps，同上面汇编指令，还可以是_pd，_ss，_sd</li>\n</ol>\n<p>具体的指令可以查看intel的手册：<a\nhref=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html\">https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html</a></p>\n","categories":["linux"]},{"title":"write_vs_fwrite","url":"/2023/12/20/linux/write-vs-fwrite/","content":"<blockquote>\n<p>参考<a\nhref=\"https://www.zhihu.com/question/546404062/answer/2605567064?utm_psn=1720524853226872832\">C++中write和fwrite哪个效率更高？\n- 知乎 (zhihu.com)</a></p>\n<p><a\nhref=\"https://blog.csdn.net/m0_61167558/article/details/127561314\">Linux\n文件IO学习之open函数深入了解_linux open函数-CSDN博客</a></p>\n</blockquote>\n<h1 id=\"x00-background\">0x00 Background</h1>\n<p><code>write</code>和<code>fwrite</code>都用于文件写入，知其然更要知其所以然，既然有这么多种设计，就一定各有各的考量，那么它们之间有什么不同呢？</p>\n<span id=\"more\"></span>\n<h2 id=\"write\">write</h2>\n<p>如果不添加<code>O_DIRECT</code>标志，只以普通的方式进行读写(<strong>.O_RDONLY,O_WRONLY,O_RDWR</strong>)，那默认内核是会把文件的这个页面读进来缓存在内核里的，也即所谓的<code>page cache</code>。随后再发起新的write\nsyscall写相同的页面时，只要写在page cache里就可以结束。</p>\n<figure>\n<img\nsrc=\"https://img.singhe.art/v2-03b3ccaf25fe5d3564f7a154b92bff45_1440w.webp\"\nalt=\"write只需要写入到page cache就可以返回\" />\n<figcaption aria-hidden=\"true\">write只需要写入到page\ncache就可以返回</figcaption>\n</figure>\n<p>内核的这个<code>page cache</code>好处有很多，比如你的程序对IO还没到需要自己做用户态的读写缓存，那内核的这个机制就帮你省去了很多工作，毕竟page\ncache是在内存里的，而且可以拿来做read\nhit，相比于每次read/write都要访问磁盘，带来的性能优势还是很不错的，算是惠及大部分普通程序。</p>\n<p>如果添加<code>O_DIRECT</code>标志，那么后续对这个文件的所有read/write\nsyscall都会bypass掉内核的page cache，也就是read/write直接发起disk\nio，数据将不会在内核中进行缓存。</p>\n<figure>\n<img\nsrc=\"https://img.singhe.art/v2-a1ecc102d248be9e67f989a048299cc9_1440w.webp\"\nalt=\"O_DIRECT将绕过page cache\" />\n<figcaption aria-hidden=\"true\">O_DIRECT将绕过page cache</figcaption>\n</figure>\n<h2 id=\"fwrite\">fwrite</h2>\n<p>fwrite是用户态的glibc库，相当于把write的系统调用封装了一下，关键一点在于，他在用户态又多加了一个buffer，，只有当你的fwrite写入量够多或者你主动fflush才会真的发起一个write\nsyscall。所以fwrite的好处是对于小量的写，减少syscall的次数，毕竟如果你每写一个字节都要发起一个syscall，然后特权级切换到内核，这就太过耗时了。</p>\n<figure>\n<img\nsrc=\"https://img.singhe.art/v2-ea2dc2b18ba738a06de7f2a0a7824e38_1440w.webp\"\nalt=\"fwrite在用户态也有缓存\" />\n<figcaption aria-hidden=\"true\">fwrite在用户态也有缓存</figcaption>\n</figure>\n<h2 id=\"对比\">对比</h2>\n<p>buffer，或者缓存虽然有好处，但也有适用条件以及额外的开销：</p>\n<ul>\n<li>如果你的程序的文件读写几乎没有locality或者什么热点，加缓存不会带来cache\nhit方面的性能提升</li>\n<li>反而如果你写入的数据量很大，那用fwrite时，会发生你程序的buffer到glibc\nbuffer一次拷贝，glibc buffer发起write syscall到page\ncache一次拷贝；而如果是普通write（或O_DIRECT的write），只会发生你程序的buffer到page\ncache（disk的buffer cache）一次拷贝。</li>\n</ul>\n<p>所以从性能的角度，fwrite并不适合大量写的场景。然而光从这个角度并不能看出O_DIRECT的有无带来什么作用。</p>\n<p>O_DIRECT适用于，数据读写性能、一致性、locality、写回时机等等对你的程序已经重要到全都要你自己管理，这时内核自带的page\ncache那种粗粒度、不太可控的设施已经不能满足你的需求了。</p>\n<p>没错，最典型的就是数据库应用。</p>\n<p>对数据库而言，依赖于page cache会带来非常多问题，比如：</p>\n<ul>\n<li>writeback.，也即写回磁盘同步的时机不可控。page\ncache可能在任何时候写回，包括你的事务做到一半，进程遭到调度，内核擅自把部分page\ncache上的内容写回磁盘，造成预期外的数据不一致。</li>\n<li>evict策略的不可控。即便你有一套自己的热度评价机制，哪个page是热点也是内核说了算，你很难干预内核不要evict掉page\ncache上的哪个页面，这会带来不可控的性能抖动。</li>\n<li>小量的写（数据内容更新）也要发起系统调用，带来不必要的特权级切换开销。</li>\n</ul>\n<h1 id=\"x01-write和fwrite系统调用次数对比\">0x01\nwrite和fwrite系统调用次数对比</h1>\n<p>通过逐字节的写入32MB的数据到磁盘上，观察<code>write</code>和<code>fwrite</code>的系统调用的次数，来说明少量多次数据写入对<code>write</code>和<code>fwrite</code>带来的性能影响。</p>\n<p><code>write.c</code>代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> fd = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;write_byte.data&quot;</span>, O_WRONLY | O_CREAT | O_TRUNC, <span class=\"number\">0644</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Check if the file is successfully opened.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;cannot open the file&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> data_size = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">25</span>;  <span class=\"comment\">// 32MB</span></span><br><span class=\"line\">  <span class=\"type\">char</span> *data = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[data_size+<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">long</span> i = <span class=\"number\">0</span>; i &lt; data_size; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">write</span>(fd, data + i, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> []data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的<code>write</code>代码并未添加<code>O_DIRECT</code>标志，也就意味着<code>write</code>在内核中仍然有page\ncache缓存。</p>\n<p><code>fwrite.c</code>代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *filename = <span class=\"string\">&quot;fwrite_byte.data&quot;</span>;</span><br><span class=\"line\">  FILE *file = fopen(filename, <span class=\"string\">&quot;wb&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Check if the file is successfully opened.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (file == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;cannot open file %s&quot;</span>, filename);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  constexpr <span class=\"type\">uint64_t</span> data_size = <span class=\"number\">1LL</span> &lt;&lt; <span class=\"number\">25</span>;  <span class=\"comment\">// 32MB</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lu\\n&quot;</span>, data_size);</span><br><span class=\"line\">  <span class=\"type\">char</span> *data = new <span class=\"type\">char</span>[data_size+<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">uint64_t</span> i = <span class=\"number\">0</span>; i &lt; data_size; ++i) &#123;</span><br><span class=\"line\">    fwrite(data + i, <span class=\"number\">1</span>, <span class=\"number\">1</span>, file);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  delete []data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"https://img.singhe.art/image-20231220153731614.png\"\nalt=\"fwrite系统调用次数\" />\n<figcaption aria-hidden=\"true\">fwrite系统调用次数</figcaption>\n</figure>\n<figure>\n<img src=\"https://img.singhe.art/image-20231220155510373.png\"\nalt=\"write系统调用次数\" />\n<figcaption aria-hidden=\"true\">write系统调用次数</figcaption>\n</figure>\n<p>通过<code>strace</code>跟踪系统调用，我们可以发现对于32MB数据逐字节写入，<code>fwrite</code>共调用了8192次<code>write</code>系统调用，而<code>write</code>却用了<span\nclass=\"math inline\">\\(32 \\times 1024 \\times 1024 =\n33554432\\)</span>次系统调用。也就是说<code>write</code>不管每次写入数据的大小，都会进行一次系统调用。而<code>fwrite</code>虽然是逐个字节的写入，但是它会在用户层积累，直到有4KB大小的数据后才会调用一次系统调用，节省了许多时间。通过<code>google c++ benchmark</code>跟踪运行时间也可以看出区别，write花了42s，而fwrie却只花了0.38s。</p>\n<figure>\n<img src=\"https://img.singhe.art/image-20231220155307044.png\"\nalt=\"write和fwrite时间对比\" />\n<figcaption aria-hidden=\"true\">write和fwrite时间对比</figcaption>\n</figure>\n<h2 id=\"x02-o_direct对write的影响\">0x02 O_DIRECT对write的影响</h2>\n<p>上文已说明，如果添加<code>O_DIRECT</code>标志，<code>write</code>将会绕过内核的page\ncache，而直接进行写入，那么写入延迟将会更大。从下面的结果也可以看出，不添加<code>O_DIRECT</code>逐字节写入32MB数据需要40s，而添加<code>O_DIRECT</code>标志则需要201s。</p>\n<figure>\n<img src=\"https://img.singhe.art/image-20231220160212174.png\"\nalt=\"添加O_DIRECT\" />\n<figcaption aria-hidden=\"true\">添加O_DIRECT</figcaption>\n</figure>\n<h1 id=\"x03-按照4k写入32mb数据\">0x03 按照4K写入32MB数据</h1>\n<p>如果<code>write</code>和<code>fwrite</code>都按照4096字节写入32MB，那么它们系统调用的次数都是相同的。不同的是，<code>fwrite</code>会在应用层也会添加一层缓存，那么就会多一层数据拷贝，在这种场景下，<code>write</code>将会比<code>fwrite</code>更快。</p>\n<figure>\n<img src=\"https://img.singhe.art/image-20231220160806126.png\"\nalt=\"按照4096字节写入\" />\n<figcaption aria-hidden=\"true\">按照4096字节写入</figcaption>\n</figure>\n","categories":["linux"],"tags":["linux"]},{"title":"使用telnet模拟HTTP和SMTP协议","url":"/2022/04/04/linux/%E4%BD%BF%E7%94%A8telnet%E6%A8%A1%E6%8B%9FHTTP%E5%92%8CSMTP%E5%8D%8F%E8%AE%AE/","content":"<blockquote>\n<p>前言：使用telnet模拟HTTP请求访问页面，及其使用telnet发送邮件</p>\n</blockquote>\n<h1 id=\"一运行环境\">一、运行环境</h1>\n<ul>\n<li>ubuntu 16.04</li>\n<li>telnet</li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"二模拟http请求\">二、模拟HTTP请求</h1>\n<p>参考<a href=\"https://cs144.github.io/assignments/lab0.pdf\">CS144\nlab0</a></p>\n<h2 id=\"请在浏览器中先访问httpcs144.keithw.orghello查看内容\">2.1\n请在浏览器中先访问http://cs144.keithw.org/hello查看内容</h2>\n<h2 id=\"我们可以通过telnet做到同样的事情\">2.2\n我们可以通过telnet做到同样的事情</h2>\n<ol type=\"1\">\n<li><p>在终端中输入<code>telnet cs144.keithw.org http</code>,\n你能够看到以下内容(需要注意的事情是这里输入的网址并不包含<code>/hello</code>路径)。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">~$ telnet 148.163.153.234 smtp</span><br><span class=\"line\">Trying 148.163.153.234...</span><br><span class=\"line\">Connected to 148.163.153.234.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br></pre></td></tr></table></figure></li>\n<li><p>在终端输入<code>GET /hello HTTP/1.1</code>，并按下回车。</p></li>\n<li><p>继续在终端输入<code>Host: cs144.keithw.org</code>，并按下回车。</p></li>\n<li><p>继续输入<code>Connection: close</code>，并按下回车。</p></li>\n<li><p><strong>不输入任何内容</strong>，并按下回车。</p></li>\n<li><p>然后你就会看到服务器发来的页面信息。</p></li>\n</ol>\n<figure>\n<img src=\"http://img.singhe.art/FpJoWxvW8X2d-MVv3f2liOcC___z\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h3 id=\"三使用telnet发送邮件\">三、使用telnet发送邮件</h3>\n<blockquote>\n<p>以下内容参考https://www.cnblogs.com/LYFer233/p/15215991.html</p>\n</blockquote>\n<p>由于无法使用斯坦福的邮箱，这里使用QQ邮箱作为示例，各个邮箱采用SMTP所以流程都大同小异。</p>\n<ol type=\"1\">\n<li><p>在终端输入<code>telnet smtp.qq.com smtp</code>，并按下回车，显示以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜~ telnet smtp.qq.com smtp</span><br><span class=\"line\">Trying 14.18.175.202...</span><br><span class=\"line\">Connected to smtp.qq.com.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">220 newxmesmtplogicsvrszc8.qq.com XMail Esmtp QQ Mail Server.</span><br></pre></td></tr></table></figure></li>\n<li><p>在终端输入<code>HELO qq.com</code>，并按下回车，给服务器打个招呼，得到以下内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HELO qq.com</span><br><span class=\"line\">250-newxmesmtplogicsvrszc8.qq.com-9.46.31.207-101844334</span><br><span class=\"line\">250-SIZE 73400320</span><br><span class=\"line\">250 OK</span><br></pre></td></tr></table></figure></li>\n<li><p>登录你的QQ邮箱，依次进入：设置-&gt;账户-&gt;POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务，然后开启IMPA/SMTP选项，生成邮箱授权码。</p>\n<figure>\n<img src=\"http://img.singhe.art/FmnKKUHbO5bmYODrtxHlwe80Zcft\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure></li>\n<li><p>接下来进行登录，在终端输入<code>auth login</code>，进行登录，需要输入你的邮箱的base64编码按下回车，然后输入你邮箱的授权码的base64编码，按下回车。可以在<a\nhref=\"https://www.base64encoder.io/\">https://www.base64encoder.io</a>进行base64编码。</p>\n<p>如出现<code>235 Authentication successful</code>，则说明登录成功。</p></li>\n<li><p>接下来输入发信人邮箱。在终端输入<code>mail from： &lt;xinjiempolde@qq.com&gt;</code></p></li>\n<li><p>然后输入收信人邮箱。在终端输入<code>rcpt to： &lt;xinjiempolde@qq.com</code>,这里以自己给自己发送邮件作为示例。</p></li>\n<li><p>然后在终端输入<code>data</code>，告诉服务器我们要输入内容了，并收到以下提示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">data</span><br><span class=\"line\">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;.</span><br></pre></td></tr></table></figure></li>\n<li><p>输入邮箱的头信息、主题、内容等。注意以<code>.</code>和一行空行结束。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from: xinjiempolde@qq.com</span><br><span class=\"line\">to: xinjiempolde@qq.com</span><br><span class=\"line\">subject: telnet learning</span><br><span class=\"line\"></span><br><span class=\"line\">this is a test for learning smtp with telnet.</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure></li>\n<li><p>输入<code>quit</code>结束并发送邮件</p></li>\n</ol>\n<p>完整的流程截图如下：</p>\n<figure>\n<img src=\"http://img.singhe.art/FlWSiNNbPEevOvqMhsS8QbL48Td4\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h1 id=\"四发送带有附件的邮件\">四、发送带有附件的邮件</h1>\n<blockquote>\n<p>本节内容参考<a href=\"https://zhuanlan.zhihu.com/p/46619234\">telnet\n收发邮件，带附件</a></p>\n</blockquote>\n<p>古老的<code>SMTP</code>，也就是<code>Simple Mail Transfer Protocol</code>，只支持传输ASCII文本，不能支持其他附件的传输。如果要传输附件的话，需要在SMTP的基础上使用<code>MINE</code>。</p>\n<p>其他邮箱可能稍有不同，这里以QQ邮箱为例，完整流程如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">telnet smtp.qq.com smtp</span><br><span class=\"line\">helo qq.com</span><br><span class=\"line\">auth login</span><br><span class=\"line\">发送方邮件名的base64编码</span><br><span class=\"line\">邮箱授权码的base64编码</span><br><span class=\"line\">mail from:&lt;邮箱地址&gt; 注意有&lt;&gt;</span><br><span class=\"line\">rcpt to:&lt;接收方邮箱地址&gt;</span><br><span class=\"line\">data</span><br><span class=\"line\">from: &lt;你的邮箱地址&gt;</span><br><span class=\"line\">to: &lt;接收方邮箱地址&gt;</span><br><span class=\"line\">MIME-Version: 1.0</span><br><span class=\"line\">Content-Type: multipart/mixed; boundary=&quot;a&quot;</span><br><span class=\"line\">subject: test for transferring file 注意下方一定要有空行</span><br><span class=\"line\"></span><br><span class=\"line\">--a</span><br><span class=\"line\">this is a test mail</span><br><span class=\"line\">--a</span><br><span class=\"line\">Content-Transfer-Encoding: base64</span><br><span class=\"line\">Content-type:application/octet-stream; name=&quot;back.jpg&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">(这里是back.jpg的base64编码，可以通过base64 back.jpg &gt; back.txt获取base64编码)</span><br><span class=\"line\">--a--</span><br><span class=\"line\">.</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<h1 id=\"五结语\">五、结语</h1>\n<p>HTTP和SMTP都是在应用层，使用TCP协议进行传输，且都是通过ASCII码的形式进行请求和响应，因此，我们能够通过telnet这一工具进行实验。</p>\n","categories":["linux"],"tags":["计算机网络","telnet"]},{"title":"将内存锁定在物理内存","url":"/2023/06/27/linux/%E5%B0%86%E5%86%85%E5%AD%98%E9%94%81%E5%AE%9A%E5%9C%A8%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98/","content":"<p>在大多数操作系统中，操作系统内核负责管理物理内存和虚拟内存。应用程序通常与虚拟内存进行交互，而不是直接与物理内存交互。这意味着，当你在程序中申请内存时（例如，使用C/C++中的<code>malloc</code>或<code>new</code>），你实际上是在申请虚拟内存空间。操作系统负责将这些虚拟内存映射到物理内存上，而且这种映射是动态的，可以发生改变。如果需要，操作系统会将不活跃的内存页交换（swap）到磁盘上。</p>\n<p>尽管直接控制物理内存不是通常程序所做的，但在某些特定场景下，如需要确保数据处理的实时性，避免交换带来的延迟，你可能希望申请的内存常驻物理内存。在Linux系统中，可以通过以下几种方式来实现：</p>\n<span id=\"more\"></span>\n<h3 id=\"mlock和mlockall\">1.\n<code>mlock</code>和<code>mlockall</code></h3>\n<ul>\n<li><strong><code>mlock</code>函数</strong>允许你锁定进程地址空间中的一部分，使其常驻内存，不被交换到磁盘上。</li>\n<li><strong><code>mlockall</code>函数</strong>可以锁定调用进程的所有映射内存，包括后续映射的内存。</li>\n</ul>\n<p>使用这些函数需要相应的权限（通常是超级用户权限），因为它们会影响操作系统的内存管理策略。</p>\n<h3 id=\"示例代码\">示例代码：</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">void</span>* buffer = <span class=\"built_in\">malloc</span>(<span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>); <span class=\"comment\">// 申请1MB内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buffer == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;malloc failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 尝试锁定内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">mlock</span>(buffer, <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;mlock failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(buffer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 你的代码，使用内存...</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解锁内存</span></span><br><span class=\"line\">    <span class=\"built_in\">munlock</span>(buffer, <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buffer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用madvise\">2. 使用<code>madvise</code></h3>\n<ul>\n<li><strong><code>madvise</code>函数</strong>提供了一种机制，告诉内核如何处理申请的内存区域的预期使用模式。虽然<code>madvise</code>并不直接锁定内存，但是它的<code>MADV_WILLNEED</code>标志可以用来建议内核预加载某个区域的数据，这在某种程度上可以减少页面错误和提高访问速度。</li>\n</ul>\n","categories":["linux"]},{"title":"构建交叉编译器","url":"/2022/04/10/linux/%E6%9E%84%E5%BB%BA%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%99%A8/","content":"<blockquote>\n<p>参考文章:<a\nhref=\"https://github.com/cfenollosa/os-tutorial/tree/master/11-kernel-crosscompiler\">https://github.com/cfenollosa/os-tutorial/tree/master/11-kernel-crosscompiler</a></p>\n</blockquote>\n<h1 id=\"环境说明\">0. 环境说明</h1>\n<ul>\n<li>ubuntu 16.04</li>\n<li>gcc 4.9源码编译</li>\n</ul>\n<h1 id=\"将环境变量导入\">1. 将环境变量导入</h1>\n<p>我使用的是<code>oh-my-zsh</code>，所以需要修改<code>~/.zshrc</code>，在文件末尾添加以下语句.\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export CC=/usr/bin/gcc-5</span><br><span class=\"line\">export LD=/usr/bin/gcc-5</span><br><span class=\"line\"></span><br><span class=\"line\">export PREFIX=&quot;/usr/local/i386elfgcc&quot;</span><br><span class=\"line\">export TARGET=i386-elf</span><br><span class=\"line\">export PATH=&quot;$PREFIX/bin:$PATH&quot;</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>source ~/.zshrc</code>来激活修改。</p>\n<span id=\"more\"></span>\n<h1 id=\"建立binutils\">2. 建立binutils</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /tmp/src</span><br><span class=\"line\">cd /tmp/src</span><br><span class=\"line\">curl -O http://ftp.gnu.org/gnu/binutils/binutils-2.43.tar.gz # If the link 404&#x27;s, look for a more recent version</span><br><span class=\"line\">tar xf binutils-2.43.tar.gz</span><br><span class=\"line\">mkdir binutils-build</span><br><span class=\"line\">cd binutils-build</span><br><span class=\"line\">../binutils-2.43/configure --target=$TARGET --enable-interwork --enable-multilib --disable-nls --disable-werror --prefix=$PREFIX 2&gt;&amp;1 | tee configure.log</span><br><span class=\"line\">make all install 2&gt;&amp;1 | tee make.log</span><br></pre></td></tr></table></figure>\n<p>可能在执行<code>make</code>的过程中会出错，我的原因是因为此时的用户没有对<code>/usr/local</code>文件夹修改的权限，所以我的解决办法是切换到<code>root</code>权限，命令如下:\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">su - root</span><br></pre></td></tr></table></figure>\n若一直登录不上，可能的原因是未激活root用户，按以下命令激活root用户：\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo passwd root</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"创建gcc交叉编译器\">3. 创建gcc交叉编译器</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /tmp/src</span><br><span class=\"line\">curl -O https://ftp.gnu.org/gnu/gcc/gcc-14.2.0/ggcc-14.2.0.tar.gz</span><br><span class=\"line\">tar xf gcc-14.2.0.tar.gz</span><br><span class=\"line\">mkdir gcc-build</span><br><span class=\"line\">cd gcc-build</span><br><span class=\"line\">../gcc-14.2.0/configure --target=$TARGET --prefix=&quot;$PREFIX&quot; --disable-nls --disable-libssp --enable-languages=c --without-headers</span><br><span class=\"line\">make all-gcc </span><br><span class=\"line\">make all-target-libgcc </span><br><span class=\"line\">make install-gcc </span><br><span class=\"line\">make install-target-libgcc </span><br></pre></td></tr></table></figure>\n<p>如果不出意外的话，在<code>configure</code>的过程中会出错，简略的信息为<code>configure: error: Building GCC requires GMP 4.2+, MPFR 2.4.0+ and MPC 0.8.0+.</code>，原因是需要这三个库的支持，而我们的电脑上没有或未能识别到，因此我们需要通过源码安装这三个库。</p>\n<p>你也可以通过以下方式解决:在gcc目录下运行:<code>./contrib/download_prerequisites</code>，如果可以解决问题，可以直接跳过源码安装过程。</p>\n<blockquote>\n<p>以下内容参考<a\nhref=\"http://www.voidcn.com/article/p-glfdwmcg-dr.html\">http://www.voidcn.com/article/p-glfdwmcg-dr.html</a>\n## 3.1 下载源码 从<a\nhref=\"ftp://gcc.gnu.org/pub/gcc/infrastructure/\">ftp://gcc.gnu.org/pub/gcc/infrastructure/</a>下载：<code>gmp-4.3.2.tar.bz2</code>、<code>mpfr-2.4.2.tar.bz2</code>、<code>mpc-0.8.1.tar.gz</code>这三个文件。注意安装顺序，因为依赖问题，所以首先安装GMP，然后是MPFR，然后是MPC，为了避免权限问题，以下操作我均使用超级用户<code>root</code>\n。 ## 3.2 安装GMP4.3.2 创建安装路径 <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/gmp-4.3.2</span><br></pre></td></tr></table></figure> 解压源码压缩包\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -jxvf gmp-4.3.2.tar.bz2</span><br></pre></td></tr></table></figure> 进入解压缩路径，配置并安装 <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd gmp-4.3.2</span><br><span class=\"line\">./configure --prefix=/opt/gmp-4.3.2</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\ntips:--prefix选项指定安装的路径</p>\n</blockquote>\n<h2 id=\"安装mpfr2.4.2\">3.3 安装MPFR2.4.2</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/mpfr2.4.2</span><br><span class=\"line\">tar -jxvf mpfr2.4.2.tar.bz2</span><br><span class=\"line\">cd mpfr2.4.2</span><br><span class=\"line\">./configure --prefix=/opt/mpfr-2.4.2 --with-gmp=/opt/gmp-4.3.2 --disable-shared --with-pic</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>安装过程与安装<code>GMP4.3.2</code>基本一致，不过有一些需要注意的点：\n-\n因为包之间有依赖关系，所以需要指定<code>--with-gmp=/opt/gmp-4.3.2</code>\n-\n指定了<code>--disable-shared --with-pic</code>参数，否则会出现<code>relocation R_X86_64_32 can not be used when making a shared object; recompile with -fPIC</code>该错误。</p>\n<h2 id=\"安装mpc0.8.1\">3.4 安装MPC0.8.1</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/mpc-0.8.1</span><br><span class=\"line\">tar -zxvf mpc0.8.1.tar.gz</span><br><span class=\"line\">cd mpc0.8.1</span><br><span class=\"line\">./configure --prefix=/opt/mpc-0.8.1 --with-gmp=/opt/gmp-4.3.2 --with-mpfr=/opt/mpfr-2.4.2 --disable-shared --with-pic</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>注意点： - 注意指定依赖的包<code>gmp</code>和<code>mpfr</code> -\n区分<code>tar.gz</code>和<code>tar.bz2</code>的解压缩方式</p>\n<h2 id=\"导入包路径到环境变量\">3.5 导入包路径到环境变量</h2>\n<p>若未将包导入，或路径有错(比如我的<code>MPC0.8.1</code>未在后面加上<code>/lib</code>)，就会出现<code>configure: error: cannot compute suffix of object files: cannot compile</code>错误。下面是导入的步骤。\n打开<code>/etc/profile</code>文件，在末尾添加 <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">necessary libs <span class=\"keyword\">for</span> building cross-compiler gcc.</span></span><br><span class=\"line\">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/gmp-4.3.2/lib:/opt/mpfr-2.4.2/lib/:/opt/mpc-0.8.1/lib</span><br></pre></td></tr></table></figure>\n保存修改，并激活： <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"重新配置并生成gcc\">3.6 重新配置并生成GCC</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /tmp/src/gcc-build</span><br><span class=\"line\">../gcc-10.1.0/configure --target=$TARGET --prefix=&quot;$PREFIX&quot; --disable-nls --disable-libssp --enable-languages=c --without-headers --with-gmp=/opt/gmp-4.3.2 --with-mpfr=/opt/mpfr-3.1.4 --with-mpc=/opt/mpc-0.8.1</span><br><span class=\"line\">make all-gcc </span><br><span class=\"line\">make all-target-libgcc </span><br><span class=\"line\">make install-gcc </span><br><span class=\"line\">make install-target-libgcc </span><br></pre></td></tr></table></figure>\n<h1 id=\"结尾\">4. 结尾</h1>\n<p>若没有其他意外，我们已经成功生成了交叉编译器。congratulation!</p>\n","categories":["linux"],"tags":["linux","编译器"]},{"title":"进程间同步的方式","url":"/2023/06/27/linux/%E8%BF%9B%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F/","content":"<h1 id=\"管道\">管道</h1>\n<p><strong>匿名管道</strong></p>\n<p>如果学过 Linux 命令，那对管道肯定不陌生，Linux 管道使用竖线 |\n连接多个命令，这被称为管道符。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ command1 | command2</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>以上这行代码就组成了一个管道，它的功能是将前一个命令（command1）的输出，作为后一个命令（command2）的输入，从这个功能描述中，我们可以看出<strong>管道中的数据只能单向流动</strong>，也就是半双工通信，如果想实现相互通信（全双工通信），我们需要创建两个管道才行。</p>\n<p>另外，通过管道符 |\n创建的管道是匿名管道，用完了就会被自动销毁。并且，匿名管道只能在具有亲缘关系（父子进程）的进程间使用，。也就是说，<strong>匿名管道只能用于父子进程之间的通信</strong>。</p>\n<p>在 Linux 的实际编码中，是通过 pipe\n函数来创建匿名管道的，若创建成功则返回 0，创建失败就返回 -1：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">int pipe (int fd[2]);</span><br></pre></td></tr></table></figure>\n<p><strong>该函数拥有一个存储空间为 2 的文件描述符数组：</strong></p>\n<ul>\n<li>fd[0] 指向管道的读端，fd[1] 指向管道的写端</li>\n<li>fd[1] 的输出是 fd[0] 的输入</li>\n</ul>\n<p>这里给出示例代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/wait.h&gt;</span> <span class=\"comment\">// 包含对 wait() 的支持</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pipefds[<span class=\"number\">2</span>]; <span class=\"comment\">// 数组存放管道的两个文件描述符</span></span><br><span class=\"line\">    <span class=\"type\">char</span> buffer[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> *message = <span class=\"string\">&quot;Hello from parent!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">pipe</span>(pipefds) == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// 创建管道</span></span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;pipe&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid = fork(); <span class=\"comment\">// 创建子进程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 子进程代码</span></span><br><span class=\"line\">        <span class=\"built_in\">close</span>(pipefds[<span class=\"number\">1</span>]); <span class=\"comment\">// 关闭写端</span></span><br><span class=\"line\">        <span class=\"built_in\">read</span>(pipefds[<span class=\"number\">0</span>], buffer, <span class=\"built_in\">sizeof</span>(buffer)); <span class=\"comment\">// 从管道读取数据</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Child received: %s\\n&quot;</span>, buffer);</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(pipefds[<span class=\"number\">0</span>]); <span class=\"comment\">// 关闭读端</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 父进程代码</span></span><br><span class=\"line\">        <span class=\"built_in\">close</span>(pipefds[<span class=\"number\">0</span>]); <span class=\"comment\">// 关闭读端</span></span><br><span class=\"line\">        <span class=\"built_in\">write</span>(pipefds[<span class=\"number\">1</span>], message, <span class=\"built_in\">strlen</span>(message) + <span class=\"number\">1</span>); <span class=\"comment\">// 向管道写入数据</span></span><br><span class=\"line\">        <span class=\"built_in\">close</span>(pipefds[<span class=\"number\">1</span>]); <span class=\"comment\">// 关闭写端</span></span><br><span class=\"line\">        <span class=\"built_in\">wait</span>(<span class=\"literal\">NULL</span>); <span class=\"comment\">// 等待子进程结束</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>粗略的解释一下通过匿名管道实现进程间通信的步骤：</strong></p>\n<p>1）父进程创建两个匿名管道，管道 1（fd1[0]和 fd1[1]）和管道 2（fd2[0]\n和 fd2[1]）；</p>\n<blockquote>\n<p>因为管道的数据是单向流动的，所以要想实现数据双向通信，就需要两个管道，每个方向一个。</p>\n</blockquote>\n<p>2）父进程 fork\n出子进程，于是对于这两个匿名管道，子进程也分别有两个文件描述符指向匿名管道的读写两端；</p>\n<p>3）父进程关闭管道 1 的读端 fd1[0] 和 管道 2 的写端\nfd2[1]，子进程关闭管道 1 的写端 fd1[1] 和 管道 2 的读端\nfd2[0]，这样，管道 1 只能用于父进程写、子进程读；管道 2\n只能用于父进程读、子进程写。管道是用<strong>环形队列</strong>实现的，数据从写端流入从读端流出，这就实现了父子进程之间的双向通信。</p>\n<figure>\n<img\nsrc=\"https://img.singhe.art/v2-9a3131e0e838332fecaab3476eda26fa_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>看完上面这些讲述，我们来理解下管道的本质是什么：对于管道两端的进程而言，管道就是一个文件（这也就是为啥管道也被称为共享文件机制的原因了），但它不是普通的文件，它不属于某种文件系统，而是自立门户，单独构成一种文件系统，并且只存在于内存中。</p>\n<p>简单来说，<strong>管道的本质就是内核在内存中开辟了一个缓冲区，这个缓冲区与管道文件相关联，对管道文件的操作，被内核转换成对这块缓冲区的操作</strong>。</p>\n<p><strong>有名管道</strong></p>\n<p>匿名管道由于没有名字，只能用于父子进程间的通信。为了克服这个缺点，提出了有名管道，也称做\nFIFO，因为数据是先进先出的传输方式。</p>\n<p>所谓有名管道也就是提供一个路径名与之关联，这样，即使与创建有名管道的进程不存在亲缘关系的进程，只要可以访问该路径，就能够通过这个有名管道进行相互通信。</p>\n<p><strong>使用 Linux 命令 mkfifo 来创建有名管道：</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkfifo myPipe</span><br></pre></td></tr></table></figure>\n<p><strong>myPipe 就是这个管道的名称，接下来，我们往 myPipe\n这个有名管道中写入数据：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello&quot;</span> &gt; myPipe</span></span><br></pre></td></tr></table></figure>\n<p>执行这行命令后，你会发现它就停在这了，这是因为管道里的内容没有被读取，只有当管道里的数据被读完后，命令才可以正常退出。于是，我们执行另外一个命令来读取这个有名管道里的数据：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> &lt; myPipe</span></span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n<h1 id=\"消息队列\">消息队列</h1>\n<p>可以看出，<strong>管道这种进程通信方式虽然使用简单，但是效率比较低，不适合进程间频繁地交换数据，并且管道只能传输无格式的字节流</strong>。为此，消息传递机制（Linux\n中称消息队列）应用而生。比如，A 进程要给 B 进程发送消息，A\n进程把数据放在对应的消息队列后就可以正常返回了，B\n进程在需要的时候自行去消息队列中读取数据就可以了。同样的，B 进程要给 A\n进程发送消息也是如此。</p>\n<figure>\n<img\nsrc=\"https://img.singhe.art/v2-a2caf6e76f9407a1752a220080b10134_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>消息队列的本质就是存放在内存中的消息的链表，而消息本质上是用户自定义的数据结构</strong>。如果进程从消息队列中读取了某个消息，这个消息就会被从消息队列中删除。对比一下管道机制：</p>\n<ul>\n<li>消息队列允许一个或多个进程向它写入或读取消息。</li>\n<li>消息队列可以实现消息的<strong>随机查询</strong>，不一定非要以先进先出的次序读取消息，也可以按消息的类型读取。比有名管道的先进先出原则更有优势。</li>\n<li>对于消息队列来说，在某个进程往一个队列写入消息之前，并不需要另一个进程在该消息队列上等待消息的到达。而对于管道来说，除非读进程已存在，否则先有写进程进行写入操作是没有意义的。</li>\n<li>消息队列的生命周期随内核，如果没有释放消息队列或者没有关闭操作系统，消息队列就会一直存在。而匿名管道随进程的创建而建立，随进程的结束而销毁。</li>\n</ul>\n<p>需要注意的是，消息队列对于交换较少数量的数据很有用，因为无需避免冲突。但是，由于用户进程写入数据到内存中的消息队列时，会发生从用户态<strong>拷贝</strong>数据到内核态的过程；同样的，另一个用户进程读取内存中的消息数据时，会发生从内核态拷贝数据到用户态的过程。因此，<strong>如果数据量较大，使用消息队列就会造成频繁的系统调用，也就是需要消耗更多的时间以便内核介入</strong>。</p>\n<h1 id=\"共享内存\">共享内存</h1>\n<p>为了避免像消息队列那样频繁的拷贝消息、进行系统调用，共享内存机制出现了。</p>\n<p>顾名思义，共享内存就是允许不相干的进程将同一段物理内存连接到它们各自的地址空间中，使得这些进程可以访问同一个物理内存，这个物理内存就成为共享内存。如果某个进程向共享内存写入数据，所做的改动将<strong>立即</strong>影响到可以访问同一段共享内存的任何其他进程。</p>\n<p>集合内存管理的内容，我们来深入理解下共享内存的原理。首先，每个进程都有属于自己的进程控制块（PCB）和逻辑地址空间（Addr\nSpace），并且都有一个与之对应的页表，负责将进程的逻辑地址（虚拟地址）与物理地址进行映射，通过内存管理单元（MMU）进行管理。<strong>两个不同进程的逻辑地址通过页表映射到物理空间的同一区域，它们所共同指向的这块区域就是共享内存</strong>。</p>\n<figure>\n<img\nsrc=\"https://pic4.zhimg.com/80/v2-30fd4ee32afadbc97fc602a8461ac74b_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>不同于消息队列频繁的系统调用，对于共享内存机制来说，仅在建立共享内存区域时需要系统调用，一旦建立共享内存，所有的访问都可作为常规内存访问，无需借助内核。这样，数据就不需要在进程之间来回拷贝，所以这是最快的一种进程通信方式。</p>\n<figure>\n<img\nsrc=\"https://pic2.zhimg.com/80/v2-b2f88341dfb4ed26e5e11a7408e8766d_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h1 id=\"信号量和-pv-操作\">信号量和 PV 操作</h1>\n<p>实际上，对具有多 CPU\n系统的最新研究表明，在这类系统上，消息传递的性能其实是要优于共享内存的，因为<strong>消息队列无需避免冲突，而共享内存机制可能会发生冲突</strong>。也就是说如果多个进程同时修改同一个共享内存，先来的那个进程写的内容就会被后来的覆盖。</p>\n<p>并且，在多道批处理系统中，多个进程是可以并发执行的，但由于系统的资源有限，进程的执行不是一贯到底的，\n而是走走停停，以不可预知的速度向前推进（异步性）。但有时候我们又希望多个进程能密切合作，按照某个特定的顺序依次执行，以实现一个共同的任务。</p>\n<p>举个例子，如果有 A、B\n两个进程分别负责读和写数据的操作，这两个线程是相互合作、相互依赖的。那么写数据应该发生在读数据之前。而实际上，由于异步性的存在，可能会发生先读后写的情况，而此时由于缓冲区还没有被写入数据，读进程\nA 没有数据可读，因此读进程 A 被阻塞。</p>\n<figure>\n<img\nsrc=\"https://pic2.zhimg.com/80/v2-44d3a2d42d9c6c0be7e636d192cdd749_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>因此，为了解决上述这两个问题，保证共享内存在任何时刻只有一个进程在访问（互斥），并且使得进程们能够按照某个特定顺序访问共享内存（同步），我们就可以使用进程的同步与互斥机制，常见的比如信号量与\nPV 操作。</p>\n<p><strong>进程的同步与互斥其实是一种对进程通信的保护机制，并不是用来传输进程之间真正通信的内容的，但是由于它们会传输信号量，所以也被纳入进程通信的范畴，称为低级通信</strong>。</p>\n<blockquote>\n<p>下面的内容和上篇文章【看完了进程同步与互斥机制，我终于彻底理解了 PV\n操作】中所讲的差不多，看过的小伙伴可直接跳到下一标题。</p>\n</blockquote>\n<p>信号量其实就是一个变量\n，我们可以用一个信号量来表示系统中某种资源的数量，比如：系统中只有一台打印机，就可以设置一个初值为\n1 的信号量。</p>\n<p>用户进程可以通过使用操作系统提供的一对原语来对信号量进行操作，从而很方便的实现进程互斥或同步。这一对原语就是\nPV 操作：</p>\n<p>1）<strong>P 操作</strong>：将信号量值减\n1，表示<strong>申请占用一个资源</strong>。如果结果小于\n0，表示已经没有可用资源，则执行 P 操作的进程被阻塞。如果结果大于等于\n0，表示现有的资源足够你使用，则执行 P 操作的进程继续执行。</p>\n<p>可以这么理解，当信号量的值为 2 的时候，表示有 2\n个资源可以使用，当信号量的值为 -2\n的时候，表示有两个进程正在等待使用这个资源。不看这句话真的无法理解 V\n操作，看完顿时如梦初醒。</p>\n<p>2）<strong>V 操作</strong>：将信号量值加\n1，表示<strong>释放一个资源</strong>，即使用完资源后归还资源。若加完后信号量的值小于等于\n0，表示有某些进程正在等待该资源，由于我们已经释放出一个资源了，因此需要唤醒一个等待使用该资源（就绪态）的进程，使之运行下去。</p>\n<p>我觉得已经讲的足够通俗了，不过对于 V\n操作大家可能仍然有困惑，下面再来看两个关于 V 操作的问答：</p>\n<p>问：<strong>信号量的值 大于 0\n表示有共享资源可供使用，这个时候为什么不需要唤醒进程</strong>？</p>\n<p>答：所谓唤醒进程是从就绪队列（阻塞队列）中唤醒进程，而信号量的值大于\n0\n表示有共享资源可供使用，也就是说这个时候没有进程被阻塞在这个资源上，所以不需要唤醒，正常运行即可。</p>\n<p>问：<strong>信号量的值 等于 0\n的时候表示没有共享资源可供使用，为什么还要唤醒进程</strong>？</p>\n<p>答：V 操作是先执行信号量值加 1 的，也就是说，把信号量的值加 1\n后才变成了 0，在此之前，信号量的值是\n-1，即有一个进程正在等待这个共享资源，我们需要唤醒它。</p>\n<p><strong>信号量和 PV 操作具体的定义如下：</strong></p>\n<figure>\n<img\nsrc=\"https://pic4.zhimg.com/80/v2-7b74c0f4c727c73429e033d31686d257_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>互斥访问共享内存</strong></p>\n<p><strong>两步走即可实现不同进程对共享内存的互斥访问：</strong></p>\n<ul>\n<li>定义一个互斥信号量，并初始化为 1</li>\n<li>把对共享内存的访问置于 P 操作和 V 操作之间</li>\n</ul>\n<figure>\n<img\nsrc=\"https://pic1.zhimg.com/80/v2-b9985c3b39adfc1318846b92b06f4a84_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>P 操作和 V 操作必须成对出现</strong>。缺少 P\n操作就不能保证对共享内存的互斥访问，缺少 V\n操作就会导致共享内存永远得不到释放、处于等待态的进程永远得不到唤醒。</p>\n<figure>\n<img\nsrc=\"https://pic2.zhimg.com/80/v2-bacaff7e77dc273c7bd9b7c206b7edf9_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>实现进程同步</strong></p>\n<p>回顾一下进程同步，就是要各并发进程按要求有序地运行。</p>\n<p>举个例子，以下两个进程 P1、P2\n并发执行，由于存在异步性，因此二者交替推进的次序是不确定的。假设 P2 的\n“代码4” 要基于 P1 的 “代码1” 和 “代码2”\n的运行结果才能执行，那么我们就必须保证 “代码4” 一定是在 “代码2”\n之后才会执行。</p>\n<figure>\n<img\nsrc=\"https://pic3.zhimg.com/80/v2-d235165c06aa584e182af579baeefa06_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>如果 P2 的 “代码4” 要基于 P1 的 “代码1” 和 “代码2”\n的运行结果才能执行，那么我们就必须保证 “代码4” 一定是在 “代码2”\n之后才会执行。</p>\n<p><strong>使用信号量和 PV\n操作实现进程的同步也非常方便，三步走：</strong></p>\n<ul>\n<li>定义一个同步信号量，并初始化为当前可用资源的数量</li>\n<li>在优先级较<strong>高</strong>的操作的<strong>后</strong>面执行 V\n操作，释放资源</li>\n<li>在优先级较<strong>低</strong>的操作的<strong>前</strong>面执行 P\n操作，申请占用资源</li>\n</ul>\n<figure>\n<img\nsrc=\"https://pic1.zhimg.com/80/v2-b96f4d81a066a07c78881580ed5d6a10_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p><strong>配合下面这张图直观理解下：</strong></p>\n<figure>\n<img\nsrc=\"https://pic1.zhimg.com/80/v2-5298a00e4d5f74ec0e6e7667761e695c_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h1 id=\"信号\">信号</h1>\n<p>注意！<strong>信号和信号量是完全不同的两个概念</strong>！</p>\n<p>信号是进程通信机制中唯一的<strong>异步</strong>通信机制，它可以在任何时候发送信号给某个进程。<strong>通过发送指定信号来通知进程某个异步事件的发送，以迫使进程执行信号处理程序。信号处理完毕后，被中断进程将恢复执行</strong>。用户、内核和进程都能生成和发送信号。</p>\n<p>信号事件的来源主要有硬件来源和软件来源。所谓硬件来源就是说我们可以通过键盘输入某些组合键给进程发送信号，比如常见的组合键\nCtrl+C 产生 SIGINT 信号，表示终止该进程；而软件来源就是通过 kill\n系列的命令给进程发送信号，比如 kill -9 1111 ，表示给 PID 为 1111\n的进程发送 SIGKILL 信号，让其立即结束。</p>\n<p><strong>我们来查看一下 Linux 中有哪些信号：</strong></p>\n<figure>\n<img\nsrc=\"https://pic3.zhimg.com/80/v2-09f8b9dcfea6a49418793954047a8f62_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h1 id=\"socket\">Socket</h1>\n<p>至此，上面介绍的 5\n种方法都是用于同一台主机上的进程之间进行通信的，如果想要<strong>跨网络与不同主机上的进程进行通信</strong>，那该怎么做呢？这就是\nSocket 通信做的事情了（<strong>当然，Socket\n也能完成同主机上的进程通信</strong>）。</p>\n<figure>\n<img\nsrc=\"https://pic1.zhimg.com/80/v2-053f491fd42d5e7ba86295393e275310_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>Socket 起源于\nUnix，原意是<strong>插座</strong>，在计算机通信领域，Socket\n被翻译为<strong>套接字</strong>，它是计算机之间进行通信的一种约定或一种方式。通过\nSocket\n这种约定，一台计算机可以接收其他计算机的数据，也可以向其他计算机发送数据。</p>\n<p>从计算机网络层面来说，<strong>Socket\n套接字是网络通信的基石</strong>，是支持 TCP/IP\n协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的\nIP 地址，本地进程的协议端口，远地主机的 IP\n地址，远地进程的协议端口。</p>\n<p>Socket 的本质其实是一个编程接口（API），是应用层与 TCP/IP\n协议族通信的中间软件抽象层，它对 TCP/IP 进行了封装。它<strong>把复杂的\nTCP/IP 协议族隐藏在 Socket\n接口后面</strong>。对用户来说，只要通过一组简单的 API\n就可以实现网络的连接。</p>\n<h1 id=\"总结\">总结</h1>\n<p>简单总结一下上面六种 Linux 内核提供的进程通信机制：</p>\n<p>1）首先，最简单的方式就是<strong>管道</strong>，管道的本质是存放在内存中的特殊的文件。也就是说，内核在内存中开辟了一个缓冲区，这个缓冲区与管道文件相关联，对管道文件的操作，被内核转换成对这块缓冲区的操作。管道分为匿名管道和有名管道，匿名管道只能在父子进程之间进行通信，而有名管道没有限制。</p>\n<p>2）虽然管道使用简单，但是效率比较低，不适合进程间频繁地交换数据，并且管道只能传输无格式的字节流。为此<strong>消息队列</strong>应用而生。消息队列的本质就是存放在内存中的消息的链表，而消息本质上是用户自定义的数据结构。如果进程从消息队列中读取了某个消息，这个消息就会被从消息队列中删除。</p>\n<p>3）消息队列的速度比较慢，因为每次数据的写入和读取都需要经过用户态与内核态之间数据的拷贝过程，<strong>共享内存</strong>可以解决这个问题。所谓共享内存就是：两个不同进程的逻辑地址通过页表映射到物理空间的同一区域，它们所共同指向的这块区域就是共享内存。如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。</p>\n<p>对于共享内存机制来说，仅在建立共享内存区域时需要系统调用，一旦建立共享内存，所有的访问都可作为常规内存访问，无需借助内核。这样，数据就不需要在进程之间来回拷贝，所以这是最快的一种进程通信方式。</p>\n<p>4）共享内存速度虽然非常快，但是存在冲突问题，为此，我们可以使用信号量和\nPV 操作来实现对共享内存的互斥访问，并且还可以实现进程同步。</p>\n<p>5）<strong>信号</strong>和信号量是完全不同的两个概念！信号是进程通信机制中唯一的异步通信机制，它可以在任何时候发送信号给某个进程。通过发送指定信号来通知进程某个异步事件的发送，以迫使进程执行信号处理程序。信号处理完毕后，被中断进程将恢复执行。用户、内核和进程都能生成和发送信号。</p>\n<p>6）上面介绍的 5\n种方法都是用于同一台主机上的进程之间进行通信的，如果想要跨网络与不同主机上的进程进行通信，就需要使用\n<strong>Socket</strong> 通信。另外，Socket\n也能完成同主机上的进程通信。</p>\n","categories":["linux"]},{"title":"rust中ARC和Mutex","url":"/2024/07/28/rust/rust%E4%B8%ADArc%E5%92%8CMutex/","content":"<p>简单地来说，Arc就是为了让变量能够再线程间共享，可以通过clone(并不会真正地深拷贝)的方式将数据的所有权给其他线程。但是如果数据要在多个线程之间修改的话，为了保证一致性，需要上锁，可供选择的方式有Mutex和RwLock等等。</p>\n<p>RwLock.write()返回的是一个RwLockWriteGuard，我们可以解引用访问其内容，也可以通过解引用修改其内容。</p>\n","categories":["rust"],"tags":["rust"]},{"title":"rust-c-call-each-other","url":"/2023/06/11/rust/rust-c-call-each-other/","content":"<h1 id=\"rust调用c语言代码\">Rust调用C语言代码</h1>\n<blockquote>\n<p>参考自<a\nhref=\"https://blog.csdn.net/phthon1997/article/details/126469708\">https://blog.csdn.net/phthon1997/article/details/126469708</a></p>\n</blockquote>\n<h2 id=\"创建项目\">创建项目</h2>\n<span id=\"more\"></span>\n<p>使用cargo创建新项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cargo new rust_and_c</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建build.rs\">创建build.rs</h2>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> cc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    cc::Build::<span class=\"title function_ invoke__\">new</span>().<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&quot;src/double.c&quot;</span>).<span class=\"title function_ invoke__\">compile</span>(<span class=\"string\">&quot;libdouble.a&quot;</span>);</span><br><span class=\"line\">    cc::Build::<span class=\"title function_ invoke__\">new</span>().<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&quot;src/third.c&quot;</span>).<span class=\"title function_ invoke__\">compile</span>(<span class=\"string\">&quot;libthird.a&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里的build.rs：若要创建构建脚本，我们只需在项目的根目录下添加一个\nbuild.rs 文件即可。这样一来， Cargo\n就会先编译和执行该构建脚本，然后再去构建整个项目。\n导入rust的一个库叫cc，作用肯定就是和c语言调用相关啦，关于具体细节暂时可以不学。\nsrc/double.c和src/third.c都是一会要写的两个c语言文件，指定好他们编译之后的静态库。</p>\n<h2 id=\"编辑cargo.toml的内容\">编辑Cargo.toml的内容</h2>\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[package]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;rust_and_c&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version</span> = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">build</span> = <span class=\"string\">&quot;build.rs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br><span class=\"line\"><span class=\"attr\">libc</span> = <span class=\"string\">&quot;0.2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[build-dependencies]</span></span><br><span class=\"line\"><span class=\"attr\">cc</span> = <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>package这个地方需要添加上整个构建文件build.rs以告知需要提前构建。\nbuild-dependencies就是关于build.rs需要的库。\ndependencies是main.rs所需要的库。</p>\n<h2 id=\"创建c语言的文件\">创建C语言的文件</h2>\n<p><code>src/double.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">double_input</span><span class=\"params\">(<span class=\"type\">int</span> input)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>third.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">third_input</span><span class=\"params\">(<span class=\"type\">int</span> input)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写rust主函数的内容\">编写rust主函数的内容</h2>\n<p><code>main.rs</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> libc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">double_input</span>(input: libc::c_int) <span class=\"punctuation\">-&gt;</span> libc::c_int;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">third_input</span>(input: libc::c_int) <span class=\"punctuation\">-&gt;</span> libc::c_int;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">input</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span> = <span class=\"keyword\">unsafe</span> &#123; <span class=\"title function_ invoke__\">double_input</span>(input) &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output2</span>: <span class=\"type\">i32</span> = <span class=\"keyword\">unsafe</span> &#123; <span class=\"title function_ invoke__\">third_input</span>(input) &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; * 3 = &#123;&#125;&quot;</span>, input, output2);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; * 2 = &#123;&#125;&quot;</span>, input, output);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>为了在rust代码中和c代码一样的类型定义一致，这里使用了为rust准备的libc库，可以放心使用，不用管两者的类型不一致问题。\n也要提前使用extern\n“C”来做一个声明，链接主要就是靠它来做一个类似的接口，extern告知Rust编译器这部分功能由一个外部库提供。\nunsafe的作用：rust只能保证自己的代码是安全的，c语言的代码不会给你去做检查，不加unsafe是不行的，涉及到很多底层的操作。</p>\n<h2 id=\"整体代码结构\">整体代码结构</h2>\n<figure>\n<img src=\"http://img.singhe.art/20230611185938.png\"\nalt=\"http://img.singhe.art/20230611185938.png\" />\n<figcaption\naria-hidden=\"true\">http://img.singhe.art/20230611185938.png</figcaption>\n</figure>\n<h1 id=\"rust使用已存在的c语言库\">Rust使用已存在的C语言库</h1>\n<blockquote>\n<p>参考<a\nhref=\"https://stackoverflow.com/questions/43826572/where-should-i-place-a-static-library-so-i-can-link-it-with-a-rust-program\">https://stackoverflow.com/questions/43826572/where-should-i-place-a-static-library-so-i-can-link-it-with-a-rust-program</a></p>\n</blockquote>\n<h2 id=\"编译出静态连接库\">编译出静态连接库</h2>\n<p>假设在目录<code>/home/singheart/Project/cpp_project</code>下有一个<code>square.c</code>的文件，文件内容如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">square</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value * value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将其编译成<code>libsquare.a</code>放在同一个目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -c -o square.o square.c</span><br><span class=\"line\">ar -rcs libsquare.a square.o</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建build.rs-1\">创建build.rs</h2>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;cargo:rustc-link-search=/home/singheart/Project/cpp_project&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建main.rs\">创建main.rs</h2>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[link(name = <span class=\"string\">&quot;square&quot;</span>)]</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">square</span>(val: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">r</span> = <span class=\"keyword\">unsafe</span> &#123; <span class=\"title function_ invoke__\">square</span>(<span class=\"number\">3</span>) &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;3 squared is &#123;&#125;&quot;</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写cargo.toml\">编写Cargo.toml</h2>\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[package]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;rust-use-c-lib&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version</span> = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">edition</span> = <span class=\"string\">&quot;2021&quot;</span></span><br><span class=\"line\"><span class=\"attr\">build</span> = <span class=\"string\">&quot;build.rs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br><span class=\"line\"><span class=\"attr\">libc</span> = <span class=\"string\">&quot;0.2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[build-dependencies]</span></span><br><span class=\"line\"><span class=\"attr\">cc</span> = <span class=\"string\">&quot;1.0&quot;</span></span><br></pre></td></tr></table></figure>\n","categories":["rust"],"tags":["rust"]},{"title":"rust模块结构","url":"/2024/07/28/rust/rust%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84/","content":"<blockquote>\n<p>转载自</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/li-peng/p/13587910.html\">rust\n模块组织结构 - li-peng - 博客园 (cnblogs.com)</a></li>\n</ul>\n</blockquote>\n<p><code>rust</code>有自己的规则和约定用来组织模块，比如一个包最多可以有一个库<code>crate</code>，任意多个二进制<code>crate</code>、导入文件夹内的模块的两种约定方式...\n知道这些约定，就可以快速了解<code>rust</code>的模块系统。\n先把一些术语说明一下：</p>\n<ul>\n<li><code>包</code>是cargo的一个功能，当执行<code>cargo new xxxx</code>的时候就是创建了一个包。</li>\n<li><code>crate</code>是二进制或者库项目。<code>rust</code>约定在<code>Cargo.toml</code>的同级目录下包含<code>src</code>目录并且包含<code>main.rs</code>文件，就是与包同名的<strong>二进制<code>crate</code></strong>，如果包目录中包含<code>src/lib.rs</code>，就是与包同名的<strong>库<code>crate</code></strong>。包内可以有多<code>crate</code>，多个<code>crates</code>就是一个模块的树形结构。如果一个包内同时包含<code>src/main.rs</code>和<code>src/lib.rs</code>，那么他就有两个<code>crate</code>，如果想有多个二进制<code>crate</code>，<code>rust</code>约定需要将文件放在<code>src/bin</code>目录下，每个文件就是一个单独的<code>crate</code>。</li>\n<li><code>crate根</code>用来描述如何构建<code>crate</code>的文件。比如<code>src/main.rs</code>或者<code>src/lib.rs</code>就是<code>crate根</code>。<strong><code>crate根</code>文件将由<code>Cargo</code>传递给<code>rustc</code>来实际构建库或者二进制项目。</strong></li>\n<li>带有<code>Cargo.toml</code>文件的包用来描述如何构建<code>crate</code>，一个包可以最多有一个库<code>crate</code>，任意多个二进制<code>crate</code>。</li>\n</ul>\n<p><a href=\"https://github.com/lpxxn/rust_module\">github\n代码地址</a></p>\n<span id=\"more\"></span>\n<h1 id=\"模块\">模块</h1>\n<p>模块以<code>mod</code>开头，下面创建了一个<code>say</code>模块</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> say &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是模块内，所有的项（函数、方法、结构体、枚举、模块和常量）默认都是私有的，可以用<code>pub</code>将项变为公有，上面的代码里<code>pub fn hello()</code>就是把函数<code>hello()</code>变为公有的。\n子模块可以通过<code>super</code>访问父模块中所有的代码，包括私有代码。但是父模块中的代码不能访问子模块中的私有代码。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> say &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">hello_2</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hi_1</span>() &#123;</span><br><span class=\"line\">            super::<span class=\"title function_ invoke__\">hello_2</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hi_2</span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hi there&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"同一文件内的模块\">同一文件内的模块</h2>\n<p>同一文件内的模块，最外层的<code>mod say</code>不用设置为<code>pub</code>就可以访问，但是<code>mod say</code>下面的要设置成<code>pub</code>才可以访问。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 相对路径</span></span><br><span class=\"line\">    say::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 绝对路径调用</span></span><br><span class=\"line\">    crate::say::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    say::hi::<span class=\"title function_ invoke__\">hi_1</span>();</span><br><span class=\"line\">    say::hi::<span class=\"title function_ invoke__\">hi_2</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> say &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">hello_2</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hi_1</span>() &#123;</span><br><span class=\"line\">            super::<span class=\"title function_ invoke__\">hello_2</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hi_2</span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hi there&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用模块内的方法，可以使用绝对路径以<code>crate</code>开头，也就是从<code>crate根</code>开始查找，<code>say</code>模块定义在<code>crate根 src/main.rs</code>中，所以就可以这么调用<code>crate::say::hello();</code>绝对路径类似于<code>Shell</code>中使用<code>/</code>从文件系统根开始查找文件。\n相对路径以模块名开始<code>say</code>，他定义于<code>main()</code>函数相同的模块中，类似<code>Shell</code>在当前目录开始查找指定文件<code>say/hello</code>。</p>\n<p><code>mod hi</code>是一个嵌套模块，使用时要写比较长<code>say::hi::hi_2();</code>，可以使用<code>use</code>将名称引入作用域。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> crate::say::hi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 相对路径</span></span><br><span class=\"line\">    say::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 绝对路径调用</span></span><br><span class=\"line\">    crate::say::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不使用 use</span></span><br><span class=\"line\">    say::hi::<span class=\"title function_ invoke__\">hi_1</span>();</span><br><span class=\"line\">    say::hi::<span class=\"title function_ invoke__\">hi_2</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 使用 use 后就可以这么调用</span></span><br><span class=\"line\">    hi::<span class=\"title function_ invoke__\">hi_1</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用pub-use-重导出名称\">使用<code>pub use</code> 重导出名称</h2>\n<p>不同的模块之前使用<code>use</code>引入，默认也是私有的。如果希望调用的模块内<code>use</code>引用的模块，就要用<code>pub</code>公开，也叫<strong>重导出</strong></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重导出名称</span></span><br><span class=\"line\">    people::hi::<span class=\"title function_ invoke__\">hi_1</span>();</span><br><span class=\"line\">    people::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 但是不能 </span></span><br><span class=\"line\">    <span class=\"comment\">// people::say::hello();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> say &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">hello_2</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hi_1</span>() &#123;</span><br><span class=\"line\">            super::<span class=\"title function_ invoke__\">hello_2</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hi_2</span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hi there&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> people &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重导出名称</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> crate::say::hi;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> crate::say;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() &#123;</span><br><span class=\"line\">        say::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想都导出自己和嵌入的指定包可以用<code>self</code>，例<code>mod people_2</code>\n把模块<code>people</code>和嵌套模块<code>info</code>全部导出来了。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> crate::say::hi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 相对路径</span></span><br><span class=\"line\">    say::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 绝对路径调用</span></span><br><span class=\"line\">    crate::say::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不使用 use</span></span><br><span class=\"line\">    say::hi::<span class=\"title function_ invoke__\">hi_1</span>();</span><br><span class=\"line\">    say::hi::<span class=\"title function_ invoke__\">hi_2</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 使用 use 后就可以这么调用</span></span><br><span class=\"line\">    hi::<span class=\"title function_ invoke__\">hi_1</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重导出名称</span></span><br><span class=\"line\">    people::hi::<span class=\"title function_ invoke__\">hi_1</span>();</span><br><span class=\"line\">    people::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 但是不能 </span></span><br><span class=\"line\">    <span class=\"comment\">// people::say::hello();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    people_2::people::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    people_2::info::<span class=\"title function_ invoke__\">name</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> say &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">hello_2</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> hi &#123;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hi_1</span>() &#123;</span><br><span class=\"line\">            super::<span class=\"title function_ invoke__\">hello_2</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hi_2</span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;hi there&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> people &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重导出名称</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> crate::say::hi;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> crate::say;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() &#123;</span><br><span class=\"line\">        say::<span class=\"title function_ invoke__\">hello</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> info &#123;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">name</span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;zhangsang&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> people_2 &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重导出名称</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> crate::people::&#123;<span class=\"keyword\">self</span>, info&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">hello</span>() &#123;</span><br><span class=\"line\">        info::<span class=\"title function_ invoke__\">name</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"不同文件夹的引用\">不同文件夹的引用</h1>\n<h2 id=\"方式一\">方式一</h2>\n<p>看一下目录结构： <img\nsrc=\"https://img2020.cnblogs.com/blog/342595/202008/342595-20200831092952337-240410311.png\"\nalt=\"img\" />\n<code>rust</code>的约定，在目录下使用<code>mod.rs</code>将模块导出。\n看一下user.rs的代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    name: <span class=\"type\">String</span>,</span><br><span class=\"line\">    age: <span class=\"type\">i32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new_user</span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> User &#123;</span><br><span class=\"line\">        User&#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            age</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">name</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"type\">str</span> &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(x: <span class=\"type\">i32</span>, y: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">    x + y </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在<code>mod.rs</code>里导出：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> user;</span><br></pre></td></tr></table></figure>\n<p>在<code>main.rs</code>调用</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> user_info;</span><br><span class=\"line\"><span class=\"keyword\">use</span> user_info::user::User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">u1</span> = User::<span class=\"title function_ invoke__\">new_user</span>(<span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;tom&quot;</span>), <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;user name: &#123;&#125;&quot;</span>, u1.<span class=\"title function_ invoke__\">name</span>());</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;1+2: &#123;&#125;&quot;</span>, user_info::user::<span class=\"title function_ invoke__\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方式二\">方式二</h2>\n<p>看一下目录结构 <img\nsrc=\"https://img2020.cnblogs.com/blog/342595/202008/342595-20200831093032927-706165161.png\"\nalt=\"img\" />\n和上面的不同之前是。这种方式是<code>user_info</code>目录里没有<code>mod.rs</code>，但是在外面有一个<code>user_info.rs</code>\n在<code>user_info.rs</code>中使用<code>pub mod user;</code>是告诉<code>Rust</code>在另一个与模块同名的文件夹内(user_info文件夹)内加载模块<code>user</code>。这也是<code>rust</code>的一个约定，但比较推荐用上面的方式。\n代码和上面是一样的。 user.rs</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    name: <span class=\"type\">String</span>,</span><br><span class=\"line\">    age: <span class=\"type\">i32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new_user</span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> User &#123;</span><br><span class=\"line\">        User&#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            age</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">name</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"type\">str</span> &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(x: <span class=\"type\">i32</span>, y: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">    x + y </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>user_info.rs里导出</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> user;</span><br></pre></td></tr></table></figure>\n<p>在<code>main.rs</code>调用</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> user_info;</span><br><span class=\"line\"><span class=\"keyword\">use</span> user_info::user::User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">u1</span> = User::<span class=\"title function_ invoke__\">new_user</span>(<span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;tom&quot;</span>), <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;user name: &#123;&#125;&quot;</span>, u1.<span class=\"title function_ invoke__\">name</span>());</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;1+2: &#123;&#125;&quot;</span>, user_info::user::<span class=\"title function_ invoke__\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用外部包\">使用外部包</h1>\n<p>使用外部包，一般就是从<code>crates.io</code>下载，当然也可以自己指写下载地点，或者使用我们本地的库，或者自建的的仓库。</p>\n<h2 id=\"一般方式\">一般方式</h2>\n<p>在<code>Cargo.toml</code>的<code>dependencies</code>下写要导入的依赖库</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br><span class=\"line\"><span class=\"attr\">regex</span> = <span class=\"string\">&quot;0.1.41&quot;</span></span><br></pre></td></tr></table></figure>\n<p>运行<code>cargo build</code>会从<code>crates.io</code>下载依赖库。\n使用的时候，直接使用<code>use</code>引入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">use regex::Regex;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let re = Regex::new(<span class=\"string\">r&quot;^\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;$&quot;</span>).unwrap();</span><br><span class=\"line\">    println!(<span class=\"string\">&quot;Did our date match? &#123;&#125;&quot;</span>, re.is_match(<span class=\"string\">&quot;2014-01-01&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"指定库地址\">指定库地址</h2>\n<p>除了<code>crates.io</code>下载依赖库，也可以自己指定地址，也可以指定<code>branch</code>\n<code>tag</code> <code>commit</code>，比如下面这个</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br><span class=\"line\"><span class=\"comment\"># 可以和包不同名，也可以同名</span></span><br><span class=\"line\"><span class=\"attr\">my_rust_lib_1</span>=&#123;package=<span class=\"string\">&quot;my_lib_1&quot;</span>,git=<span class=\"string\">&quot;ssh://git@github.com/lpxxn/my_rust_lib_1.git&quot;</span>,tag=<span class=\"string\">&quot;v0.0.2&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>就是从<code>github.com/lpxxn/my_rust_lib_1</code>上下载包。也可以使用<code>https</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">my_rust_lib_1</span>=&#123;package=<span class=\"string\">&quot;my_lib_1&quot;</span>,git=<span class=\"string\">&quot;https://github.com/lpxxn/my_rust_lib_1.git&quot;</span>,branch=<span class=\"string\">&quot;master&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>执行<code>cargo build</code>就会自动下载，使用的时候也是一样的。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> my_rust_lib_1;</span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;Hello, world!&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, my_rust_lib_1::<span class=\"title function_ invoke__\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">u</span> = my_rust_lib_1::User::<span class=\"title function_ invoke__\">new_user</span>(<span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;tom&quot;</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;user: &#123;:#?&#125;&quot;</span>, u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用本地的库\">使用本地的库</h2>\n<p>我们新建一个二进制库项目</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">cargo <span class=\"keyword\">new</span> pkg_demo_3</span><br></pre></td></tr></table></figure>\n<p>然后在<code>pkg_demo_3</code>内建一个库项目</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">cargo <span class=\"keyword\">new</span> <span class=\"comment\">--lib utils</span></span><br></pre></td></tr></table></figure>\n<p>然后就可以在 <code>utils</code>里写我们的库代码了\n看一下现在的目录结构 <img\nsrc=\"https://img2020.cnblogs.com/blog/342595/202008/342595-20200831093104024-66370552.png\"\nalt=\"img\" />\n在<code>utils</code>库的<code>user.rs</code>里还是我们上面的代码</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    name: <span class=\"type\">String</span>,</span><br><span class=\"line\">    age: <span class=\"type\">i32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new_user</span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> User &#123;</span><br><span class=\"line\">        User&#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            age</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">name</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"type\">str</span> &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(x: <span class=\"type\">i32</span>, y: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">    x + y </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>lib.rs</code>里对<code>user</code>模块导出</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> user;</span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">use</span> user::User;</span><br></pre></td></tr></table></figure>\n<p>然后在我们的二进制库的<code>Cargo.toml</code>引入库</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br><span class=\"line\"><span class=\"attr\">utils</span> = &#123; path = <span class=\"string\">&quot;utils&quot;</span>, version = <span class=\"string\">&quot;0.1.0&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><code>path</code>就是库项目的路径\n<code>main.rs</code>使用<code>use</code>引入就可以使用了</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> utils::User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">u</span> = User::<span class=\"title function_ invoke__\">new_user</span>(<span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;tom&quot;</span>), <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;user: &#123;:#?&#125;&quot;</span>, u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自建私有库\">自建私有库</h2>\n<p>除了<code>crates.io</code>也可以自建<code>registrie</code>。这个有时间再重新写一篇帖子单独说，可以先看一下官方文档。\n<a\nhref=\"https://doc.rust-lang.org/cargo/reference/registries.html#registries\">官方文档:registrie</a>\n<a\nhref=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\">依赖官方文档</a>\n<a href=\"https://github.com/lpxxn/rust_module\">帖子 github\n代码地址</a></p>\n","categories":["rust"],"tags":["rust"]},{"title":"rust自引用","url":"/2024/07/28/rust/rust%E8%87%AA%E5%BC%95%E7%94%A8/","content":"<blockquote>\n<p>参考：</p>\n<ul>\n<li><a\nhref=\"https://rust.e.lntu.edu.cn/rust-course/advance/circle-self-ref/self-referential.html\">结构体中的自引用\n- Rust语言圣经(Rust Course) (lntu.edu.cn)</a></li>\n</ul>\n</blockquote>\n<p>什么是自引用，如下面代码所示：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SelfRef</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    value: <span class=\"type\">String</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该引用指向上面的value</span></span><br><span class=\"line\">    pointer_to_value: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">&quot;aaa&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">v</span> = SelfRef &#123;</span><br><span class=\"line\">        value: s,</span><br><span class=\"line\">        pointer_to_value: &amp;s</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>但是这个代码会报错，因为我们试图同时使用值和值的引用，最终所有权转移和借用一起发生了</p>\n<p>rust的结构体的成员默认是私有的，但是在rust中同一个模块下定义的结构体，即使它的成员是私有的，同一个模块下的函数也能对其进行访问。。。看下面的例子，被坑了好久：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mod</span> mymod &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Mystruct</span> &#123;</span><br><span class=\"line\">        contentes : <span class=\"type\">i32</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">impl</span> <span class=\"title class_\">Mystruct</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(con : <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> Mystruct &#123;</span><br><span class=\"line\">            Mystruct &#123;</span><br><span class=\"line\">                contentes : con,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Mystruct</span> &#123;</span><br><span class=\"line\">    contentes : <span class=\"type\">i32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">mystruct</span> = Mystruct &#123; contentes: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, mystruct.contentes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 错误的,不能访问其他mod的struct成员的私有变量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">Mystruct</span> = mymod::Mystruct &#123; contentes: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这样子是可以的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">mystruct</span> = mymod::Mystruct::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Option的map用法</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">map</span>&lt;U, F&gt;(<span class=\"keyword\">self</span>, f: F) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;U&gt; <span class=\"keyword\">where</span>    F: <span class=\"title function_ invoke__\">FnOnce</span>(T) <span class=\"punctuation\">-&gt;</span> U,</span><br></pre></td></tr></table></figure>\n<p>通过将函数应用于包含的值，将 <code>Option&lt;T&gt;</code> 映射到\n<code>Option&lt;U&gt;</code>。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">maybe_some_string</span> = <span class=\"title function_ invoke__\">Some</span>(<span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// `Option::map` takes self *by value*, consuming `maybe_some_string`</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">maybe_some_len</span> = maybe_some_string.<span class=\"title function_ invoke__\">map</span>(|s| s.<span class=\"title function_ invoke__\">len</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">assert_eq!</span>(maybe_some_len, <span class=\"title function_ invoke__\">Some</span>(<span class=\"number\">13</span>));</span><br></pre></td></tr></table></figure>\n<p>unwrap_or 和 unwrap_or_else 都是用于从 Result\n(Option也可以？)对象中获取值的宏。</p>\n<p>当 Result 对象是 Ok 时，两者都会返回 Ok 中的值。但是当 Result 对象是\nErr 时，两者的行为不同：</p>\n<p>unwrap_or 将返回一个默认值。这个默认值是宏的参数，在调用 unwrap_or\n时就已经确定了。</p>\n<p>unwrap_or_else\n将调用一个闭包，并返回闭包的结果。这个闭包是宏的参数，在调用\nunwrap_or_else 时就已经确定了。</p>\n<p>所以，当你想要在 Err 时使用固定的默认值时，就可以使用\nunwrap_or；而当你想要在 Err 时使用可变的值时，就可以使用\nunwrap_or_else。</p>\n<p>示例代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">x</span>: <span class=\"type\">Result</span>&lt;<span class=\"type\">i32</span>, &amp;amp;<span class=\"type\">str</span>&gt; = <span class=\"title function_ invoke__\">Err</span>(<span class=\"string\">&quot;error message&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 unwrap_or 返回默认值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x.<span class=\"title function_ invoke__\">unwrap_or</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 unwrap_or_else 返回闭包的结果</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">z</span> = x.<span class=\"title function_ invoke__\">unwrap_or_else</span>(|| &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;error message: &#123;&#125;&quot;</span>, x.<span class=\"title function_ invoke__\">unwrap_err</span>());</span><br><span class=\"line\">    <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n","categories":["rust"],"tags":["rust"]},{"title":"postgreSQL中TOAST类型","url":"/2024/06/27/openGauss/PostgreSQL%E4%B8%ADtoast/","content":"<p>本文参考：</p>\n<ul>\n<li><a\nhref=\"https://link.zhihu.com/?target=https%3A//cloud.tencent.com/developer/article/1004455\">PostgreSQL\nTOAST 技术理解</a></li>\n<li>《PostgreSQL修炼之道》</li>\n</ul>\n<h2 id=\"一toast是什么\"><strong>一、TOAST是什么？</strong></h2>\n<p>TOAST是<strong>“The Oversized-Attribute Storage\nTechnique”（超尺寸属性存储技术）</strong>的缩写，主要用于存储一个大字段的值。</p>\n<p>要理解TOAST，我们要先理解<strong>页（BLOCK）</strong>的概念。在PG中，页是数据在文件存储中的基本单位，其大小是固定的且只能在编译期指定，之后无法修改，默认的大小为8KB。同时，PG不允许一行数据跨页存储。那么对于超长的行数据，PG就会启动TOAST，将大的字段压缩或切片成多个物理行存到另一张系统表中（<strong>TOAST表</strong>），这种存储方式叫<strong>行外存储</strong>。</p>\n<span id=\"more\"></span>\n<h2 id=\"二使用toast\"><strong>二、使用TOAST</strong></h2>\n<p>只有特定的数据类型支持TOAST，因为那些整数、浮点数等不太长的数据类型是没有必要使用TOAST的。</p>\n<p>另外，支持TOAST的数据类型必须是变长的。在变长类型中：</p>\n<ul>\n<li>前4字节（32bit）称为<strong>长度字</strong>，长度字后面存储具体的内容或一个指针。</li>\n<li>长度字的高2bit位是<strong>标志位</strong>，后面的30bit是<strong>长度值</strong>（表示值的总长度，包括长度字本身，以字节计）。</li>\n<li>由长度值可知TOAST数据类型的逻辑长度最多是30bit，即1GB(2^30-1字节）之内。</li>\n<li>前2bit的标志位，一个表示<strong>压缩标志位</strong>，一个表示是否<strong>行外存储</strong>，如果两个都是零，那么表示既未压缩也未行外存储。</li>\n<li>如果设置了压缩标志标志位，表示该数值被压缩过（使用的是非常简单且快速的LZ压缩方法），使用前必须先解压缩。</li>\n<li>如果设置了行外存储标志位，则表示该数值是在行外存储的。此时，长度字后面的部分只是一个指针，指向存储实际数据的TOAST表中的位置。如果两个标志位都设置了，那么这个行外数据也会被压缩。不管是哪种情况，长度字里剩下的30bit的长度值都表示数据的实际尺寸，而不是压缩后的长度。</li>\n</ul>\n<figure>\n<img\nsrc=\"https://pic4.zhimg.com/80/v2-701222e7e79fce6f6e85a2a735265bbb_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>在 PG 中每个表字段有四种 TOAST 的策略：</p>\n<ul>\n<li><strong>PLAIN</strong> —— 避免压缩和行外存储。只有那些不需要 TOAST\n策略就能存放的数据类型允许选择（例如 int 类型），而对于 text\n这类要求存储长度超过页大小的类型，是不允许采用此策略的。</li>\n<li><strong>EXTENDED</strong> ——\n允许压缩和行外存储。一般会先压缩，如果还是太大，就会行外存储。这是大多数可以TOAST的数据类型的默认策略。</li>\n<li><strong>EXTERNAL</strong> ——\n允许行外存储，但不许压缩。这让在text类型和bytea类型字段上的子串操作更快。类似字符串这种会对数据的一部分进行操作的字段，采用此策略可能获得更高的性能，因为不需要读取出整行数据再解压。</li>\n<li><strong>MAIN</strong> ——\n允许压缩，但不许行外存储。不过实际上，为了保证过大数据的存储，行外存储在其它方式（例如压缩）都无法满足需求的情况下，作为最后手段还是会被启动。因此理解为：尽量不使用行外存储更贴切。</li>\n</ul>\n<p>首先创建一张 blog 表，查看它的各字段的TOAST策略：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> blog(id <span class=\"type\">int</span>, title text, content text);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># \\d<span class=\"operator\">+</span> blog;</span><br><span class=\"line\">                          <span class=\"keyword\">Table</span> &quot;public.blog&quot;</span><br><span class=\"line\"> <span class=\"keyword\">Column</span>  <span class=\"operator\">|</span>  Type   <span class=\"operator\">|</span> Modifiers <span class=\"operator\">|</span> Storage  <span class=\"operator\">|</span> Stats target <span class=\"operator\">|</span> Description </span><br><span class=\"line\"><span class=\"comment\">---------+---------+-----------+----------+--------------+-------------</span></span><br><span class=\"line\"> id      <span class=\"operator\">|</span> <span class=\"type\">integer</span> <span class=\"operator\">|</span>           <span class=\"operator\">|</span> plain    <span class=\"operator\">|</span>              <span class=\"operator\">|</span> </span><br><span class=\"line\"> title   <span class=\"operator\">|</span> text    <span class=\"operator\">|</span>           <span class=\"operator\">|</span> extended <span class=\"operator\">|</span>              <span class=\"operator\">|</span> </span><br><span class=\"line\"> content <span class=\"operator\">|</span> text    <span class=\"operator\">|</span>           <span class=\"operator\">|</span> extended <span class=\"operator\">|</span>              <span class=\"operator\">|</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，interger 默认 TOAST 策略为 <strong>PLAIN</strong> ，而 text\n为 <strong>EXTENDED</strong> 。</p>\n<p>另外可以修改某个字段系统默认分配的TOAST策略，假如要将上面blog表中的content字段的TOAST策略改成<strong>EXTERNAL</strong>，就可以这样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> blog <span class=\"keyword\">ALTER</span> content <span class=\"keyword\">SET</span> STORAGE <span class=\"keyword\">EXTERNAL</span>; </span><br></pre></td></tr></table></figure>\n<h2 id=\"三toast表的结构\"><strong>三、TOAST表的结构</strong></h2>\n<p>如果一个表中有任何一个字段是可以TOAST的，那么PostgreSQL会自动为该表建一个相关联的TOAST表，其OID存储在<strong>pg_class</strong>系统表的<strong>reltoastrelid</strong>记录里，行外的内容保存在TOAST表里。</p>\n<p>查看blog表对应的TOAST表的OID：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> relname,relfilenode,reltoastrelid <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;blog&#x27;</span>;</span><br><span class=\"line\"> relname <span class=\"operator\">|</span> relfilenode <span class=\"operator\">|</span> reltoastrelid </span><br><span class=\"line\"><span class=\"comment\">---------+-------------+---------------</span></span><br><span class=\"line\"> blog    <span class=\"operator\">|</span>       <span class=\"number\">16441</span> <span class=\"operator\">|</span>         <span class=\"number\">16444</span></span><br><span class=\"line\">(<span class=\"number\">1</span> <span class=\"type\">row</span>)</span><br></pre></td></tr></table></figure>\n<p>通过上述语句，我们查到 blog 表的 oid 为16441，其对应 TOAST 表的 oid\n为16444（关于 oid 和 pg_class 的概念，请参考<a\nhref=\"https://link.zhihu.com/?target=https%3A//www.postgresql.org/docs/9.5/static/index.html\">PG官方文档</a>），那么其对应\nTOAST 表名则为： <strong>pg_toast.pg_toast_16441</strong>（注意这里是\nblog 表的 oid ）。</p>\n<p>行外存储被切成了多个Chunk块，每个Chunk块大约是一个BLOCK的四分之一大小，如果块大小为8KB（默认就是8KB），则Chunk大约为2KB（比2KB略小一点），每个Chunk都作为独立的行存储在TOAST表中。</p>\n<p>TOAST表有三个字段：</p>\n<ul>\n<li><strong>chunk_id</strong> —— 用来表示特定 TOAST 值的 OID\n，可以理解为具有同样 chunk_id 值的所有行组成原表（这里的 blog ）的 TOAST\n字段的一行数据。</li>\n<li><strong>chunk_seq</strong> ——\n用来表示该行数据在整个数据中的位置。</li>\n<li><strong>chunk_data</strong> —— 该Chunk实际的数据。</li>\n</ul>\n<p>我们看下上面的TOAST表<strong>pg_toast.pg_toast_16441</strong>的定义：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># \\d<span class=\"operator\">+</span> pg_toast.pg_toast_16441;</span><br><span class=\"line\">TOAST <span class=\"keyword\">table</span> &quot;pg_toast.pg_toast_16441&quot;</span><br><span class=\"line\">   <span class=\"keyword\">Column</span>   <span class=\"operator\">|</span>  Type   <span class=\"operator\">|</span> Storage </span><br><span class=\"line\"><span class=\"comment\">------------+---------+---------</span></span><br><span class=\"line\"> chunk_id   <span class=\"operator\">|</span> oid     <span class=\"operator\">|</span> plain</span><br><span class=\"line\"> chunk_seq  <span class=\"operator\">|</span> <span class=\"type\">integer</span> <span class=\"operator\">|</span> plain</span><br><span class=\"line\"> chunk_data <span class=\"operator\">|</span> bytea   <span class=\"operator\">|</span> plain</span><br></pre></td></tr></table></figure>\n<p>在chunk_id和chunk_seq上有一个唯一的索引，提供对数值的快速检索。</p>\n<p>因此，一个表示行外存储的指针数据中包括了要查询的TOAST表的OID和特定数值的chunk_id（也是一个OID类型）。为了方便，指针数据还存储了逻辑数据的尺寸（原始的未压缩的数据长度）及实际存储的尺寸（如果使用了压缩，则两者不同）。加上头部的长度字，一个TOAST指针数据的总尺寸是20字节。</p>\n<h2 id=\"四toast技术实践\"><strong>四、TOAST技术实践</strong></h2>\n<p>现在我们来实际验证下TOAST:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> blog <span class=\"keyword\">values</span>(<span class=\"number\">1</span>, <span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;0123456789&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> blog;</span><br><span class=\"line\"> id <span class=\"operator\">|</span> title <span class=\"operator\">|</span>  content   </span><br><span class=\"line\"><span class=\"comment\">----+-------+------------</span></span><br><span class=\"line\">  <span class=\"number\">1</span> <span class=\"operator\">|</span> title <span class=\"operator\">|</span> <span class=\"number\">0123456789</span></span><br><span class=\"line\">(<span class=\"number\">1</span> <span class=\"type\">row</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> pg_toast.pg_toast_16441;</span><br><span class=\"line\"> chunk_id <span class=\"operator\">|</span> chunk_seq <span class=\"operator\">|</span> chunk_data </span><br><span class=\"line\"><span class=\"comment\">----------+-----------+------------</span></span><br><span class=\"line\">(<span class=\"number\">0</span> <span class=\"keyword\">rows</span>)</span><br></pre></td></tr></table></figure>\n<p>可以看到因为 content\n只有10个字符，所以没有压缩，也没有行外存储。然后我们使用如下 SQL\n语句增加 content 的长度，每次增长1倍，同时观察 content\n的长度，看看会发生什么情况？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">update</span> blog <span class=\"keyword\">set</span> content<span class=\"operator\">=</span>content<span class=\"operator\">||</span>content <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"number\">1</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> id,title,length(content) <span class=\"keyword\">from</span> blog;</span><br><span class=\"line\"> id <span class=\"operator\">|</span> title <span class=\"operator\">|</span> length </span><br><span class=\"line\"><span class=\"comment\">----+-------+--------</span></span><br><span class=\"line\">  <span class=\"number\">1</span> <span class=\"operator\">|</span> title <span class=\"operator\">|</span>     <span class=\"number\">20</span></span><br><span class=\"line\">(<span class=\"number\">1</span> <span class=\"type\">row</span>)</span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> pg_toast.pg_toast_16441;</span><br><span class=\"line\"> chunk_id <span class=\"operator\">|</span> chunk_seq <span class=\"operator\">|</span> chunk_data </span><br><span class=\"line\"><span class=\"comment\">----------+-----------+------------</span></span><br><span class=\"line\">(<span class=\"number\">0</span> <span class=\"keyword\">rows</span>)</span><br></pre></td></tr></table></figure>\n<p>反复执行如上过程，直到 pg_toast_16441 表中有数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> id,title,length(content) <span class=\"keyword\">from</span> blog;</span><br><span class=\"line\"> id <span class=\"operator\">|</span> title <span class=\"operator\">|</span> length </span><br><span class=\"line\"><span class=\"comment\">----+-------+--------</span></span><br><span class=\"line\">  <span class=\"number\">1</span> <span class=\"operator\">|</span> title <span class=\"operator\">|</span> <span class=\"number\">327680</span></span><br><span class=\"line\">(<span class=\"number\">1</span> <span class=\"type\">row</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> chunk_id,chunk_seq,length(chunk_data) <span class=\"keyword\">from</span> pg_toast.pg_toast_16441;</span><br><span class=\"line\"> chunk_id <span class=\"operator\">|</span> chunk_seq <span class=\"operator\">|</span> length </span><br><span class=\"line\"><span class=\"comment\">----------+-----------+--------</span></span><br><span class=\"line\">    <span class=\"number\">16439</span> <span class=\"operator\">|</span>         <span class=\"number\">0</span> <span class=\"operator\">|</span>   <span class=\"number\">1996</span></span><br><span class=\"line\">    <span class=\"number\">16439</span> <span class=\"operator\">|</span>         <span class=\"number\">1</span> <span class=\"operator\">|</span>   <span class=\"number\">1773</span></span><br><span class=\"line\">(<span class=\"number\">2</span> <span class=\"keyword\">rows</span>)</span><br></pre></td></tr></table></figure>\n<p>可以看到，直到 content 的长度为327680时（已远远超过页大小 8K），对应\nTOAST 表中才有了2行 数据，且长度都是略小于2K，这是因为 extended\n策略下，先启用了压缩，然后才使用行外存储。</p>\n<p>下面我们将 content 的 TOAST 策略改为 EXTERNAL ，以禁止压缩。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> blog <span class=\"keyword\">alter</span> content <span class=\"keyword\">set</span> storage <span class=\"keyword\">external</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># \\d<span class=\"operator\">+</span> blog;</span><br><span class=\"line\">                          <span class=\"keyword\">Table</span> &quot;public.blog&quot;</span><br><span class=\"line\"> <span class=\"keyword\">Column</span>  <span class=\"operator\">|</span>  Type   <span class=\"operator\">|</span> Modifiers <span class=\"operator\">|</span> Storage  <span class=\"operator\">|</span> Stats target <span class=\"operator\">|</span> Description </span><br><span class=\"line\"><span class=\"comment\">---------+---------+-----------+----------+--------------+-------------</span></span><br><span class=\"line\"> id      <span class=\"operator\">|</span> <span class=\"type\">integer</span> <span class=\"operator\">|</span>           <span class=\"operator\">|</span> plain    <span class=\"operator\">|</span>              <span class=\"operator\">|</span> </span><br><span class=\"line\"> title   <span class=\"operator\">|</span> text    <span class=\"operator\">|</span>           <span class=\"operator\">|</span> extended <span class=\"operator\">|</span>              <span class=\"operator\">|</span> </span><br><span class=\"line\"> content <span class=\"operator\">|</span> text    <span class=\"operator\">|</span>           <span class=\"operator\">|</span> <span class=\"keyword\">external</span> <span class=\"operator\">|</span>              <span class=\"operator\">|</span></span><br></pre></td></tr></table></figure>\n<p>然后我们再插入一条数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> blog <span class=\"keyword\">values</span>(<span class=\"number\">2</span>, <span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;0123456789&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"number\">0</span> <span class=\"number\">1</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> id,title,length(content) <span class=\"keyword\">from</span> blog;</span><br><span class=\"line\"> id <span class=\"operator\">|</span> title <span class=\"operator\">|</span> length </span><br><span class=\"line\"><span class=\"comment\">----+-------+--------</span></span><br><span class=\"line\">  <span class=\"number\">1</span> <span class=\"operator\">|</span> title <span class=\"operator\">|</span> <span class=\"number\">327680</span></span><br><span class=\"line\">  <span class=\"number\">2</span> <span class=\"operator\">|</span> title <span class=\"operator\">|</span>     <span class=\"number\">10</span></span><br><span class=\"line\">(<span class=\"number\">2</span> <span class=\"keyword\">rows</span>)</span><br></pre></td></tr></table></figure>\n<p>然后重复以上步骤，直到 pg_toast_16441 表中有数据：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">update</span> blog <span class=\"keyword\">set</span> content<span class=\"operator\">=</span>content<span class=\"operator\">||</span>content <span class=\"keyword\">where</span> id<span class=\"operator\">=</span><span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"number\">1</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> id,title,length(content) <span class=\"keyword\">from</span> blog;</span><br><span class=\"line\"> id <span class=\"operator\">|</span> title <span class=\"operator\">|</span> length </span><br><span class=\"line\"><span class=\"comment\">----+-------+--------</span></span><br><span class=\"line\">  <span class=\"number\">2</span> <span class=\"operator\">|</span> title <span class=\"operator\">|</span> <span class=\"number\">327680</span></span><br><span class=\"line\">  <span class=\"number\">1</span> <span class=\"operator\">|</span> title <span class=\"operator\">|</span> <span class=\"number\">327680</span></span><br><span class=\"line\">(<span class=\"number\">2</span> <span class=\"keyword\">rows</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> chunk_id,chunk_seq,length(chunk_data) <span class=\"keyword\">from</span> pg_toast.pg_toast_16441;</span><br><span class=\"line\"> chunk_id <span class=\"operator\">|</span> chunk_seq <span class=\"operator\">|</span> length </span><br><span class=\"line\"><span class=\"comment\">----------+-----------+--------</span></span><br><span class=\"line\">    <span class=\"number\">16447</span> <span class=\"operator\">|</span>         <span class=\"number\">0</span> <span class=\"operator\">|</span>   <span class=\"number\">1996</span></span><br><span class=\"line\">    <span class=\"number\">16447</span> <span class=\"operator\">|</span>         <span class=\"number\">1</span> <span class=\"operator\">|</span>   <span class=\"number\">1773</span></span><br><span class=\"line\">    <span class=\"number\">16448</span> <span class=\"operator\">|</span>         <span class=\"number\">0</span> <span class=\"operator\">|</span>   <span class=\"number\">1996</span></span><br><span class=\"line\">    <span class=\"number\">16448</span> <span class=\"operator\">|</span>         <span class=\"number\">1</span> <span class=\"operator\">|</span>   <span class=\"number\">1996</span></span><br><span class=\"line\">    <span class=\"number\">16448</span> <span class=\"operator\">|</span>         <span class=\"number\">2</span> <span class=\"operator\">|</span>   <span class=\"number\">1996</span></span><br><span class=\"line\">    ....（省略）</span><br><span class=\"line\">    <span class=\"number\">16448</span> <span class=\"operator\">|</span>       <span class=\"number\">164</span> <span class=\"operator\">|</span>   <span class=\"number\">1996</span></span><br><span class=\"line\">(<span class=\"number\">167</span> <span class=\"keyword\">rows</span>)</span><br></pre></td></tr></table></figure>\n<p>因为不允许压缩，所以新的操作在TOAST表中生成了更多Chunk块行记录。通过以上操作得出以下结论：</p>\n<ul>\n<li>如果策略允许压缩，则TOAST优先选择压缩。</li>\n<li>不管是否压缩，一旦数据超过2KB左右，就会启用行外存储。</li>\n<li>修改TOAST策略，不会影响现有数据的存储方式。</li>\n</ul>\n<h2 id=\"五toast技术总结\"><strong>五、TOAST技术总结</strong></h2>\n<p>TOAST比那些更直接的方法（比如允许行值跨越多个页面）有更多优点。\n假设查询通常是用相对比较短的键值进行匹配的，那么执行器的大多数工作都将使用主行项完成。TOAST过的属性的大值只是在把结果集发送给客户端的时候才被抽出来（如果它被选中）。\n因此，主表要小得多，并且它的能放入到共享缓冲区中的行要比没有任何行外存储的方案更多。\n排序集也缩小了，并且排序将更多地在内存里完成。一个小测试表明，一个典型的保存\nHTML 页面以及它们的 URL\n的表占用的存储（包括TOAST表在内）大约只有裸数据的一半，而主表只包含全部数据的\n10%（URL和一些小的 HTML 页面）。与在一个非TOAST的对照表里面存储（把全部\nHTML 页面裁剪成 7Kb\n以匹配页面大小）同样的数据相比，运行时没有任何区别。</p>\n","categories":["openGauss"]},{"title":"postgreSQL可变数据类型","url":"/2024/06/27/openGauss/PostgreSQL%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","content":"<blockquote>\n<p>参考：</p>\n<ul>\n<li><a\nhref=\"https://zhuanlan.zhihu.com/p/614890090\">postgreSQL可变数据类型 -\n知乎 (zhihu.com)</a></li>\n<li><a\nhref=\"https://zhmin.github.io/posts/postgresql-varlena/\">Postgresql\nVarlena 结构 | 学习笔记 (zhmin.github.io)</a></li>\n</ul>\n</blockquote>\n<h1 id=\"x00-可变长类型\">0x00 可变长类型</h1>\n<h2 id=\"datum-的-typlen-的约定\">0. Datum 的 typlen 的约定</h2>\n<p>如果Datum 类型是 “byVal”，则Datum表示一个值。如果Datum\n类型不是”byVal“，则Datum 表示一个指针：</p>\n<p>typlen &gt; 0， Datum 就指向固定长度字节流，比如int类型 typlen ==\n-1， Datum 指向一个变长 varlena 结构体，比如char，varchar类型 typlen ==\n-2， Datum 指向一个C语言风格的字符串；</p>\n<p>因此，查看所有的变长数据类型：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> typname <span class=\"keyword\">FROM</span> pg_type <span class=\"keyword\">WHERE</span> typlen <span class=\"operator\">=</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"可变长类型varlena\">1. 可变长类型varlena</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">varlena</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tvl_len_[<span class=\"number\">4</span>];\t\t<span class=\"comment\">/* Do not touch this field directly! */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tvl_dat[FLEXIBLE_ARRAY_MEMBER];\t<span class=\"comment\">/* Data content is here */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VARHDRSZ\t\t((int32) sizeof(int32))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * These widely-used datatypes are just a varlena header and the data bytes.</span></span><br><span class=\"line\"><span class=\"comment\"> * There is no terminating null or anything like that --- the data length is</span></span><br><span class=\"line\"><span class=\"comment\"> * always VARSIZE_ANY_EXHDR(ptr).</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">varlena</span> bytea;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">varlena</span> text;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">varlena</span> BpChar;\t<span class=\"comment\">/* blank-padded char, ie SQL char(n) */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">varlena</span> VarChar; <span class=\"comment\">/* var-length char, ie SQL varchar(n) */</span></span><br></pre></td></tr></table></figure>\n<p>为了可以存储任意的数据，跳出CString中需要使用<code>'\\0'</code>来作为终结符的弊端，PG采用了Varlena数据类型，由于不再有终结符表示数组的结束，所以必须存在一个长度字段指出当前的数组长度大小（Redis中的SDS也是类似的设计），以及是否经过了TOAST（是否压缩，是否行外存储等）。因此Varlena在数据开头引入了一个header。</p>\n<p>注意<code>varlena</code>只是变长数据类型的基类，在具体使用中一般很少直接使用varlena类型。<code>varlena</code>还分为很多种子类，每种格式的定义都不相同。我们在使用之前，需要根据它的第一个字节，转换为它对应格式：</p>\n<ol type=\"1\">\n<li>第一个字节等于<code>000 00001</code>（小端序）,\n那么就是<code>varattrib_1b_e</code>，用来存储和toast有关的 external\n数据</li>\n<li>第一个字节的最高位等于1，且后7bit不全为0，那么就是<code>varattrib_1b</code>，用来存储小数据</li>\n<li>第一个字节的最高位等于0，那么就是<code>varattrib_4b</code>，可以存储不超过1GB的数据</li>\n</ol>\n<p>另外需要注意的是，所有的Varlena类型中的vl_len_字段都是包括了header自身的大小，如果需要获得实际的数据大小需要减去header的长度。</p>\n<h3 id=\"varattrib_1b-small\">1.1 varattrib_1b （small）</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tuint8\t\tva_header;</span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tva_data[FLEXIBLE_ARRAY_MEMBER]; <span class=\"comment\">/* Data begins here */</span></span><br><span class=\"line\">&#125; varattrib_1b;</span><br></pre></td></tr></table></figure>\n<p>注意到<code>varattrib_1b</code>的<code>va_header</code>只有 8\n位，最高位是标记位，值为 1。剩余的 7\n位表示数据长度，所以<code>varattrib_1b</code>类型只是用于存储长度不超过127\nbyte\n的小数据，<code>varattrib_1b</code>最常见的用法就是存放一个TOAST指针。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">-----------------------------------------</span><br><span class=\"line\">   tag   |         length               |   </span><br><span class=\"line\">-----------------------------------------</span><br><span class=\"line\">  1 bit  |        7 bit                 |</span><br><span class=\"line\">-----------------------------------------</span><br></pre></td></tr></table></figure>\n<h3 id=\"varattrib_4bflat\">1.2 varattrib_4b（flat）</h3>\n<p>这种数据形式一般被称为\"flat\"的形式，即<strong>没有经过TOAST机制的行外存储</strong>，也就是说其<code>va_data</code>中存储就是实际的变长数据。</p>\n<p>对于未压缩的数据，使用<code>va_4byte</code>结构体存储，这是一个最原始的变长类型。观察<code>va_4byte</code>对象，其内部的定义和一个原始的<code>varlena</code>结构体一模一样，所以<code>varattrib_4b.va_4byte</code>是变长类型中唯一和TOAST没关系的类型。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * These structs describe the header of a varlena object that may have been</span></span><br><span class=\"line\"><span class=\"comment\"> * TOASTed.  Generally, don&#x27;t reference these structs directly, but use the</span></span><br><span class=\"line\"><span class=\"comment\"> * macros below.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * We use separate structs for the aligned and unaligned cases because the</span></span><br><span class=\"line\"><span class=\"comment\"> * compiler might otherwise think it could generate code that assumes</span></span><br><span class=\"line\"><span class=\"comment\"> * alignment while touching fields of a 1-byte-header varlena.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"comment\">/* Normal varlena (4-byte length) */</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        uint32 va_header;</span><br><span class=\"line\">        <span class=\"type\">char</span> va_data[FLEXIBLE_ARRAY_MEMBER];</span><br><span class=\"line\">    &#125; va_4byte;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"comment\">/* Compressed-in-line format */</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        uint32 va_header;</span><br><span class=\"line\">        uint32 va_rawsize;                   <span class=\"comment\">/* Original data size (excludes header) */</span></span><br><span class=\"line\">        <span class=\"type\">char</span> va_data[FLEXIBLE_ARRAY_MEMBER]; <span class=\"comment\">/* Compressed data */</span></span><br><span class=\"line\">    &#125; va_compressed;</span><br><span class=\"line\">&#125; varattrib_4b;</span><br></pre></td></tr></table></figure>\n<p>对于压缩的数据，使用<code>va_compressed</code>结构体存储，其内部存储了数据压缩之前的大小。<code>varattrib_4b</code>使用<code>union</code>来表示这两种情况。<code>varattrib_4b</code>的头部<code>va_header</code>是一个32bit大小的类型，其第一位为0，用于与<code>varattrib_1b</code>类型进行区分，而其<code>va_header</code>中的第二高位用于区分数据是否被压缩，为1，则表示存储的数据是压缩的。为0，则表示存储的数据是未压缩过的。剩下的\n30 位表示数据的长度，所以只能支持不超过 1GB (<span\nclass=\"math inline\">\\(2^{30} - 1\\)</span> bytes) 的数据。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">    tag    |    compress    |      length        |</span><br><span class=\"line\">--------------------------------------------------</span><br><span class=\"line\">   1 bit   |    1 bit       |      30 bit        |</span><br><span class=\"line\">-------------------------------------------------</span><br></pre></td></tr></table></figure>\n<h3 id=\"varattrib_1b_e-toast\">1.3 varattrib_1b_e (toast)</h3>\n<p><code>varattrib_1b_e</code>就是我们所说的“TOAST\n指针”的父类，它并不存储数据，他的<code>va_data</code>数据段存放的是TOAST指针，可以是三种不同类型：\n<code>varatt_external</code>， <code>varatt_indirect</code>，\n<code>varatt_expanded</code>。这三种不同的TOAST指针具体在下一小节中会详细介绍。</p>\n<p>varattrib_1b_e结构的首部header的第一个字节永远是 0x80（大端序） or\n0x01 （小端序）</p>\n<p><code>varattrib_1b_e</code> 是\n<code>varattrib_1b</code>类型的一个子集，其和 <code>varattrib_1b</code>\n类型的唯一区别就是多了一个 <code>va_tag</code>\n字段，其可以指出在<code>va_data</code>数据段中到底存放了哪一种的TOAST指针。同时需要注意的是varattrib_1b_e\n类型和<code>varattrib_1b</code>一样，内部的字段都是未对齐的（因为va_data是一个char数组），因此如果需要访问对应的va_data字段，只能使用memcpy的方法，将其va_data范围内的数据copy到<code>varatt_external</code>，\n<code>varatt_indirect</code>，\n<code>varatt_expanded</code>结构体中，然后在对其进行访问，可以使用PG提供的宏<code>VARATT_EXTERNAL_GET_POINTER</code>实现这一点。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* TOAST pointers are a subset of varattrib_1b with an identifying tag byte */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tuint8\t\tva_header;\t\t<span class=\"comment\">/* Always 0x80 or 0x01 */</span></span><br><span class=\"line\">\tuint8\t\tva_tag;\t\t\t<span class=\"comment\">/* Type of datum */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tva_data[FLEXIBLE_ARRAY_MEMBER]; <span class=\"comment\">/* Type-specific data */</span></span><br><span class=\"line\">&#125; varattrib_1b_e;</span><br></pre></td></tr></table></figure>\n<p>第二个字节<code>va_tag</code>表示类型，有下面四种。每种类型下，它的\n<code>va_data</code>存储的格式都不是一样的：</p>\n<p>// 不同种“Toast 指针”的种类标签</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">vartag_external</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> VARTAG_INDIRECT = <span class=\"number\">1</span>,     <span class=\"comment\">// 属于 varatt_indirect 类型的TOAST指针</span></span><br><span class=\"line\"> VARTAG_EXPANDED_RO = <span class=\"number\">2</span>,  <span class=\"comment\">// 属于 ExpandedObjectHeader 类型的 只读指针</span></span><br><span class=\"line\"> VARTAG_EXPANDED_RW = <span class=\"number\">3</span>,  <span class=\"comment\">// 属于 ExpandedObjectHeader 类型的 读写指针</span></span><br><span class=\"line\"> VARTAG_ONDISK = <span class=\"number\">18</span>  \t  <span class=\"comment\">// 属于 varatt_external 类型的指针</span></span><br><span class=\"line\">&#125; vartag_external;</span><br></pre></td></tr></table></figure>\n<p>下面展示一个创建 <code>varlena</code>数据的例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = (<span class=\"keyword\">struct</span> varlena *) <span class=\"built_in\">palloc</span>(length + VARHDRSZ); <span class=\"comment\">// 分配堆内存</span></span><br><span class=\"line\"><span class=\"built_in\">SET_VARSIZE</span>(result, length + VARHDRSZ);   <span class=\"comment\">// 设置头部</span></span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(<span class=\"built_in\">VARDATA</span>(result), mydata, length); <span class=\"comment\">// 写入数据</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"toast-指针\">2. TOAST 指针</h2>\n<p>刚才我们提到了varattrib_1b_e是所有TOAST指针的父类，而其下又有三种具体的，不同的类型TOAST指针，分别是<code>varatt_external</code>，\n<code>varatt_indirect</code>，\n<code>varatt_expanded</code>。需要注意的是，这里的“TOAST\npointer”并不是c语言意义上的指针，而是表示的是指出被Toasted的数据实际存放位置的结构体。</p>\n<h3\nid=\"varatt_external行外存储toast指针\">（1）varatt_external（行外存储TOAST指针）</h3>\n<p><code>struct varatt_external</code>是一个传统的：TOAST指针“（也就在官方文档中提到的基于物理存储的TOAST指针）。\n也就是说，其包含了行外存储在TOAST表中的Datum所需的信息。\n仅当<code>va_extsize &lt;va_rawsize-VARHDRSZ</code>时，才压缩数据。该结构不得包含任何padding，因为我们有时会使用<code>memcmp</code>比较这些结构体。</p>\n<p>请再次注意，由于<code>varatt_external</code>并未对齐地存储在实际的元组中，因此，在查看这些字段之前，需要将元组中的数据\nmemcpy 到本地struct变量中，然后才可以查看里面的字段！ （我们之所以使用\nmemcmp\n，是为了避免通过比较两个指针内部的字段值判断两个指针相等，而只检测两个TOAST指针（结构体）的值是否相等就可以了。）</p>\n<p>/* TOAST指针的实现*/</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * struct varatt_external is a traditional &quot;TOAST pointer&quot;, that is, the</span></span><br><span class=\"line\"><span class=\"comment\"> * information needed to fetch a Datum stored out-of-line in a TOAST table.</span></span><br><span class=\"line\"><span class=\"comment\"> * The data is compressed if and only if the external size stored in</span></span><br><span class=\"line\"><span class=\"comment\"> * va_extinfo is less than va_rawsize - VARHDRSZ.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * This struct must not contain any padding, because we sometimes compare</span></span><br><span class=\"line\"><span class=\"comment\"> * these pointers using memcmp.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that this information is stored unaligned within actual tuples, so</span></span><br><span class=\"line\"><span class=\"comment\"> * you need to memcpy from the tuple into a local struct variable before</span></span><br><span class=\"line\"><span class=\"comment\"> * you can look at these fields!  (The reason we use memcmp is to avoid</span></span><br><span class=\"line\"><span class=\"comment\"> * having to do that just to detect equality of two TOAST pointers...)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">varatt_external</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint32\t\tva_rawsize;\t\t<span class=\"comment\">/* Original data size (includes header) */</span></span><br><span class=\"line\">\tuint32\t\tva_extinfo;\t\t<span class=\"comment\">/* External saved size (without header) and compression method */</span></span><br><span class=\"line\">\tOid\t\tva_valueid;\t\t<span class=\"comment\">/* Unique ID of value within TOAST table */</span></span><br><span class=\"line\">\tOid\t\tva_toastrelid;\t        <span class=\"comment\">/* RelID of TOAST table containing it */</span></span><br><span class=\"line\">&#125; varatt_external;</span><br></pre></td></tr></table></figure>\n<h3\nid=\"varatt_indirect指向varlena的toast指针\">（2）varatt_indirect（指向varlena的TOAST指针）</h3>\n<p><code>truct varatt_indirect</code>只是一个<code>varlena</code>指针，可以指向<code>varatt_external</code>，<code>varatt_expanded</code>，或者是<code>varattrib_1b</code>，<code>varattrib_4b</code>\n类型的原始数据。其指向的必须是存储在<strong>内存中</strong>而不是行外磁盘存储的toast关系中的Datum。\n创建者就需要完全负责被引用的空间的生存周期，\n只要该引用Datum指针存在。</p>\n<p>请注意，就像struct\nvaratt_external一样，此结构未对齐地存储在任何包含元组中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">varatt_indirect</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">varlena</span> *pointer; <span class=\"comment\">/* Pointer to in-memory varlena */</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; varatt_indirect;</span><br></pre></td></tr></table></figure>\n<h3 id=\"varatt_expanded-内存扩展存储的toast指针\">（3）varatt_expanded\n（内存扩展存储的TOAST指针）</h3>\n<p>struct varatt_expanded是一个“\nTOAST指针”，表示存储在<strong>内存中</strong>的行外数据，\n采用某种特定于类型的，不一定物理连续的格式，便于计算而不是存储。\n<code>src/include/utils/expandeddatum.h</code>中提供了\n<code>ExpandedObjectHeader</code>\n类型的操作API。在下面的expandeddatum的章节中会专门介绍这种数据类型。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ExpandedObjectHeader</span> ExpandedObjectHeader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">varatt_expanded</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tExpandedObjectHeader *eohptr;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; varatt_expanded;</span><br></pre></td></tr></table></figure>\n<h2 id=\"varlena和toast指针关系总结\">3. Varlena和TOAST指针关系总结</h2>\n<h3 id=\"继承结构关系\">3.1 继承结构关系</h3>\n<h3 id=\"存储结构关系\">3.2 存储结构关系</h3>\n<h2 id=\"可变长类型的操作\">4. 可变长类型的操作</h2>\n<p>上一小节介绍了三种可变长类型，在一般情况下，我们不能直接对这些结构体进行操作，因为数据并不是存放在一个栈上的结构体里面，这些结构体只是对存放的字节如何解释做出了定义，如果我们想要访问字段的值需要将Datum强制转换为可变长类型的指针，配合一系列的宏获取字段的值。</p>\n<p>下面是一些常见的宏：</p>\n<h3 id=\"通用的宏\">4.1 通用的宏</h3>\n<p>通用的宏：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VARSIZE_ANY</span>(PTR)  \t返回任意varlena指针指向的可变对象的长度（包括header）</span><br><span class=\"line\"><span class=\"built_in\">VARSIZE_ANY_EXHDR</span>(PTR)   返回任意varlena指针指向的可变对象的数据长度（不包括header）</span><br><span class=\"line\"><span class=\"built_in\">VARDATA_ANY</span>(PTR)  \t返回任意varlena指针指向的可变对象的起始数据地址（不支持external <span class=\"keyword\">or</span> compressed-in-line Datum）</span><br><span class=\"line\"><span class=\"built_in\">VARATT_IS_EXTENDED</span>(PTR)  指针是否是扩展的类型，除了VARATT_IS_4B_U都是</span><br></pre></td></tr></table></figure>\n<p>设置varlena类型的长度</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SET_VARSIZE</span>(PTR, len)</span><br><span class=\"line\"><span class=\"built_in\">SET_VARSIZE_SHORT</span>(PTR, len)</span><br><span class=\"line\"><span class=\"built_in\">SET_VARSIZE_COMPRESSED</span>(PTR, len)</span><br></pre></td></tr></table></figure>\n<p>查看header的第一个字节：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VARATT_IS_COMPRESSED</span>(PTR)  <span class=\"comment\">// 数据是否是压缩的</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类型相关的宏\">4.2 类型相关的宏</h3>\n<p>varattrib_4b相关：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VARDATA</span>(PTR)  \t<span class=\"comment\">// 获得varattrib_4b指针类型的数据起始地址</span></span><br><span class=\"line\"><span class=\"built_in\">VARSIZE</span>(PTR)\t<span class=\"comment\">// 获得varattrib_4b指针类型指向的可变对象的长度（包括header）</span></span><br></pre></td></tr></table></figure>\n<p>varattrib_1b相关：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VARATT_IS_SHORT</span>(PTR) <span class=\"comment\">// 指针是否是 varattrib_1b 的</span></span><br><span class=\"line\"><span class=\"built_in\">VARSIZE_SHORT</span>(PTR)\t<span class=\"comment\">// 同上</span></span><br><span class=\"line\"><span class=\"built_in\">VARDATA_SHORT</span>(PTR)\t<span class=\"comment\">// 同上</span></span><br></pre></td></tr></table></figure>\n<p>varattrib_1b_e相关：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">VARATT_IS_EXTERNAL</span>(PTR)  指针是否是 varattrib_1b_e 的</span><br><span class=\"line\"><span class=\"built_in\">SET_VARTAG_EXTERNAL</span>(PTR, tag)\t设置 varattrib_1b_e 指针类型的va_tag字段</span><br><span class=\"line\"><span class=\"built_in\">VARTAG_EXTERNAL</span>(PTR)\t获得 varattrib_1b_e 指针类型的va_tag字段的起始地址</span><br><span class=\"line\"><span class=\"built_in\">VARSIZE_EXTERNAL</span>(PTR)\t同上</span><br><span class=\"line\"><span class=\"built_in\">VARDATA_EXTERNAL</span>(PTR)\t同上</span><br><span class=\"line\"><span class=\"built_in\">VARATT_IS_EXTERNAL_ONDISK</span>(PTR)        指针是否是 <span class=\"function\">VARTAG_ONDISK </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">VARATT_IS_EXTERNAL_INDIRECT</span><span class=\"params\">(PTR)</span>     指针是否是 VARTAG_INDIRECT </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">VARATT_IS_EXTERNAL_EXPANDED_RO</span><span class=\"params\">(PTR)</span>  指针是否是VARTAG_EXPANDED_RO</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">VARATT_IS_EXTERNAL_EXPANDED_RW</span><span class=\"params\">(PTR)</span>  指针是否是VARTAG_EXPANDED_RW</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"内存expanded的数据类型\">5. 内存expanded的数据类型</h2>\n<p>这部分的内容主要在<code>expandedaatum.h</code></p>\n<p>复杂的数据类型，尤其是诸如<code>array</code>和<code>record</code>之类的容器类型，通常在磁盘上具有紧凑的存储形式，但并利于修改。而且，当我们修改它们时可能会非常低效，因为我们不得不重新复制其余所有值。因此，PG提供了“扩展（expanded）”的概念，这一概念属于内存TOAST技术的一种，这种存储格式仅在<strong>内存</strong>中使用，内存扩展类型针对计算而非存储进行了更多优化。稍后我们会发现，<code>Array</code>类型的<code>expanded</code>结构是如何加速下标访问的。</p>\n<p>我们将出现在磁盘上的格式称为数据类型的“扁平（flattened）”表示形式，flattened的存储格式是连续的字节blob（块）。但是该类型也可以具有<code>expanded</code>表示形式用来加速内存中的计算，比如访问或者排序。如果一个数据类型支持<code>expanded</code>的表示类型，其必须提供将<code>expanded</code>的表示形式转换回<code>flat</code>形式的方法。</p>\n<p>PG中所有支持<code>expanded</code>的数据结构都必须包含<code>ExpandedObjectHeader</code>，其定义如下所示：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ExpandedObjectHeader</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"comment\">/* Phony varlena header Phony varlena标头 */</span></span><br><span class=\"line\"> int32  vl_len_;  <span class=\"comment\">/* 对于 ExpandedObjectHeader 对象来说，其vl_len域永远是 -1 */</span></span><br><span class=\"line\"> <span class=\"type\">const</span> ExpandedObjectMethods *eoh_methods;       <span class=\"comment\">// 扩展对象需要实现函数指针结构体，一个是获取flat格式方法，一个是获取flat size的方法</span></span><br><span class=\"line\"> MemoryContext eoh_context;        <span class=\"comment\">// 包含此 header 和 辅助数据 的内存上下文</span></span><br><span class=\"line\"> <span class=\"type\">char</span>  eoh_rw_ptr[EXPANDED_POINTER_SIZE];\t<span class=\"comment\">// 读写指针（TOAST指针结构体）</span></span><br><span class=\"line\"> <span class=\"type\">char</span>  eoh_ro_ptr[EXPANDED_POINTER_SIZE];  <span class=\"comment\">// 只读指针（TOAST指针结构体）</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"expandedobjectmethods\">5.1 ExpandedObjectMethods</h3>\n<p>ExpandedObjectMethods中定义了两个需要编码数据结构的程序员实现的方法。所有支持expand的数据类型都需要实现ExpandedObjectMethods中给出的两个方法，<code>flatten_into</code>用于在<code>detoast</code>的时候将一个<code>expand</code>表示转换为<code>flat</code>的表示。而<code>get_flat_size</code>是方便获得一个<code>expand</code>表示展开成<code>flat</code>表示后的大小。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Struct of function pointers for an expanded object&#x27;s methods */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ExpandedObjectMethods</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> EOM_get_flat_size_method get_flat_size;</span><br><span class=\"line\"> EOM_flatten_into_method flatten_into;</span><br><span class=\"line\">&#125; ExpandedObjectMethods;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何判断一个varlena类型是不是expandedobjectheader\">5.2\n如何判断一个varlena类型是不是ExpandedObjectHeader</h3>\n<p>PG在设计ExpandedObjectHeader时，考虑到了对于只读函数，如果既能够处理同一种数据类型常规的\n”flat“\n的varlena输入（即<code>varattrib_4b</code>类型），也能够处理其扩展的ExpandedObjectHeader\n的输入，这是十分方便的。因此为了使得函数确定输入的varlena指针到底指向的是哪一种类型，\nExpandedObjectHeader\n的第一个int32始终是-1（定义为宏：<code>EOH_HEADER_MAGIC</code>）。\n<code>-1</code>的二进制表示为<code>1111 11111</code>，其不会和<code>varattrib_4b</code>的header冲突。</p>\n<p>这一判断方法被宏：<code>VARATT_IS_EXPANDED_HEADER(PTR)</code>所封装，其返回true表示输入的指针指向的是一个ExpandedObjectHeader对象。</p>\n<p>举个例子来说，在Array类型的实现中，Array类型的编码人员设计了一个名为<code>AnyArrayType</code>的联合体，包含了这两种不同的array\nvarlena类型。就简化了代码的处理逻辑，只需要以宏AARR_XXX开头的宏就可以同时处理这两种数据类型。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> <span class=\"title class_\">AnyArrayType</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> ArrayType\tflt;  \t<span class=\"comment\">// flat格式的array类型</span></span><br><span class=\"line\"> ExpandedArrayHeader xpn;  <span class=\"comment\">// expand格式的array类型</span></span><br><span class=\"line\">&#125; AnyArrayType;</span><br><span class=\"line\"><span class=\"comment\">/** Macros for working with AnyArrayType inputs.  Beware multiple references!</span></span><br><span class=\"line\"><span class=\"comment\"> 为了篇幅删去了具体宏定义*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> AARR_NDIM(a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> AARR_HASNULL(a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> AARR_ELEMTYPE(a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> AARR_DIMS(a) </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> AARR_LBOUND(a)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"expandedobjectheader-和-varatt_expanded-的关系\">5.3\nExpandedObjectHeader 和 varatt_expanded 的关系</h3>\n<p>我们之前在TOAST\n指针中介绍过最后一种expand类型的TOAST指针<code>varatt_expanded</code>\n结构，其内部只有一个ExpandedObjectHeader指针。而<code>varatt_expanded</code>\n结构又是存放在结构体<code>varattrib_1b_e</code>\n的va_data字段。也就是说函数传入的参数一般是一个<code>varattrib_1b_e</code>\n指针（一个Datum）。</p>\n<p>所以为了获取实际的ExpandedObjectHeader指针，我们首先把Datum强制转换为<code>(varattrib_1b_e *)</code>指针，然后再利用宏<code>VARDATA_EXTERNAL</code>确定varattrib_1b_e\n结构中va_data域（指针域）的位置，然后使用memcpy将其拷贝到varatt_expanded结构体中，然后再从中提取出<code>（ExpandedObjectHeader *</code>）指针。参加如下的函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// expandeddatu.c</span></span><br><span class=\"line\"><span class=\"comment\">// 给定一个作为expanded对象引用的Datum，在将其转化为varatt_indirect后返回其内部的ExpandedObjectHeader指针</span></span><br><span class=\"line\"><span class=\"function\">ExpandedObjectHeader *</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">DatumGetEOHP</span><span class=\"params\">(Datum d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> varattrib_1b_e *datum = (varattrib_1b_e *) <span class=\"built_in\">DatumGetPointer</span>(d);</span><br><span class=\"line\"> varatt_expanded ptr;</span><br><span class=\"line\"> <span class=\"built_in\">Assert</span>(<span class=\"built_in\">VARATT_IS_EXTERNAL_EXPANDED</span>(datum));</span><br><span class=\"line\"> <span class=\"built_in\">memcpy</span>(&amp;ptr, <span class=\"built_in\">VARDATA_EXTERNAL</span>(datum), <span class=\"built_in\">sizeof</span>(ptr));  <span class=\"comment\">// dest &lt;=== src</span></span><br><span class=\"line\"> <span class=\"built_in\">Assert</span>(<span class=\"built_in\">VARATT_IS_EXPANDED_HEADER</span>(ptr.eohptr));</span><br><span class=\"line\"> <span class=\"keyword\">return</span> ptr.eohptr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"expandedobjectheader-的例子\">5.4 ExpandedObjectHeader\n的例子</h3>\n<p>在Array类型中，array_expanded.c中定义了Array类型的扩展API和对应的header\nExpandedArrayHeader，其和基类ExpandedObjectHeader的关系如下所示：</p>\n","categories":["openGauss"]},{"title":"postgreSQL底层存储结构","url":"/2024/06/27/openGauss/PostgreSQL%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%96%87%E4%BB%B6%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84%E5%B8%83%E5%B1%80%E5%88%86%E6%9E%90/","content":"<blockquote>\n<p>转载自</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/471815579\">干货 |\nPostgreSQL数据表文件底层结构布局分析 - 知乎 (zhihu.com)</a></li>\n</ul>\n</blockquote>\n<h1 id=\"表文件\">1. 表文件</h1>\n<p>PostgreSQL提供了可靠、稳定、有序的数据存储、检索管理。即使在不知道其背后运行原理的情况下，也没有多大关系，因为我们只需要按部就班地执行建库、建表然后插入数据结构这几个流程，就可以如愿以偿地实现将我们的数据持久化于PostgreSQL数据库中。于是我们不得不好奇，这些数据最终落盘于磁盘上的哪个位置？又是以什么样的形式存储？存储的格式又是什么？在这几个疑问的驱动下，本文将通过源码结合数据入库实践操作的方式，来详细地对PostgreSQL底层数据的存储方式进行详细的解读。</p>\n<span id=\"more\"></span>\n<p>PostgreSQL中的每个表(<code>TABLE</code>)都将由一个或多个堆文件表示。默认情况下，表的每个1GB块(<code>Block</code>)存储在一个单独的(堆)文件中。当该表文件已经达到1GB之后，用户再次插入数据时，<code>postgres</code>会重新创建一个新的堆文件，新文件名格式是：表Oid\n+“.” +\n序号id(序号id从1开始一次递增)。示意图如下所示，其中<code>tudent</code>为<code>CREATE TABLE</code>创建的表名，该<code>student</code>表对应的堆文件名是16387。</p>\n<figure>\n<img\nsrc=\"https://pic4.zhimg.com/80/v2-dab28219c0b9c149c2edab1161483463_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>在PostgreSQL中，数据库名和表文件名都是使用<code>Oid</code>来进行命名。该<code>Oid</code>是一个无符号整型(<code>unsigned int</code>)，定义在<code>postgres_ext.h</code>文件中。如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * Object ID is a fundamental type in Postgres.</span><br><span class=\"line\"> */</span><br><span class=\"line\"> typedef unsigned int Oid;</span><br></pre></td></tr></table></figure>\n<p>当我们将数据存储在PostgreSQL中时，PostgreSQL会将用户插入(<code>INSERT INTO</code>)的数据依次存储于文件系统的常规文件中。对于这样的文件，我们称之为“<strong>堆文件</strong>(<code>Heap File</code>)”。在PostgreSQL中，可以将堆文件分为四种类型：“<strong>普通堆文件</strong>(<code>Ordinary Cataloged Heap</code>)、“<strong>临时堆文件</strong>(<code>Temporary Heap File</code>)、“<strong>序列堆文件</strong>(<code>Sequence File</code>)和“<strong>TOAST表堆文件</strong>(<code>TOAST FILE</code>)”。上面说的常规文件，即指普通堆文件。TOAST文件专门用于存储变长数据，本质上它也是属于普通堆文件。对于上面的这四种堆文件，虽然底层组织方式细节不大一样，但是结构上是相似的，所以我们这里将着重分析普通堆文件。</p>\n<h2 id=\"数据蔟目录位置\">1.2 数据蔟目录位置</h2>\n<p>在研究表文件之前，我们先要知道postgres的数据蔟目录位置。因为所有的数据库、表、索引、配置文件等等都是存储在数据蔟目录下的，即<code>PGDATA</code>。如果你不确定当前环境上面PostgreSQL的数据蔟目录位置，没关系，你仅需要<code>psql</code>登录终端，然后执行\n<code>SHOW DATA_DIRECTORY</code>；命令即可得到。如下图所示，当前环境的数据蔟目录是：<code>/home/singheart/data</code>。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=#</span><br><span class=\"line\">test=# SHOW DATA_DIRECTORY;</span><br><span class=\"line\">    data_directory</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">/home/singheart/data</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">test=#</span><br></pre></td></tr></table></figure>\n<h2 id=\"表文件位置\"><strong>1.3 表文件位置</strong></h2>\n<p>​\n库为维度进行管理，即某个表总是属于某个库。因此，我们还需要找到我们创建的数据库(<code>CREATE DATABASE</code>;)以及该库下的所有表(<code>CREATE TABLE</code>)。PostgreSQL为我们提供了<code>pg_relation_filepath</code>，用于查找指定表名的相对(<code>$PGDATA</code>)文件路径。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=#</span><br><span class=\"line\">test=# SELECT pg_relation_filepath(&#x27;student&#x27;);</span><br><span class=\"line\"> pg_relation_filepath</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"> base/16384/16387</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">test=#</span><br></pre></td></tr></table></figure>\n<p>如上图所示，其中16384是数据库(test)的Oid名；16387是student数据表名。其数据库和数据表的创建过程如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE DATABASE test;</span><br><span class=\"line\">CREATE DATABASE</span><br><span class=\"line\">test=#</span><br><span class=\"line\">test=# CREATE TABLE student(id  SERIAL PRIMARY KEY, name VARCHAR, age INT NOT NULL);</span><br><span class=\"line\">CREATE TABLE</span><br></pre></td></tr></table></figure>\n<h1 id=\"表文件的内部布局\">2. 表文件的内部布局</h1>\n<p>前面创建了名为student的数据表，到此为止，还没有向该表中插入(<code>INSERT INTO</code>)过数据。因此student表的总行数是0。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=# SELECT COUNT(*) FROM student;</span><br><span class=\"line\"> count</span><br><span class=\"line\">-------</span><br><span class=\"line\">     0</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p>注：关系数据表中的行数据称为<strong>记录</strong>(<code>record</code>)，又称之为<strong>元组</strong>(<code>tuple</code>)，即行、记录、元组都是同一个概念。</p>\n<p>在表中没有数据时，很显然此时文件大小是0字节。如下图中红色字体所示：</p>\n<figure>\n<img\nsrc=\"https://pic3.zhimg.com/80/v2-37929a093475fe327a4a4824dc9fffb6_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>现在我们向该表中插入一条数据，如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=# SELECT COUNT(*) FROM student;</span><br><span class=\"line\"> count</span><br><span class=\"line\">-------</span><br><span class=\"line\">     0</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">test=# INSERT INTO student(name,age) VALUES (&#x27;lixiaogang5&#x27;, 27);</span><br><span class=\"line\">INSERT 0 1</span><br><span class=\"line\">test=# SELECT *FROM student;</span><br><span class=\"line\"> id |    name     | age</span><br><span class=\"line\">----+-------------+-----</span><br><span class=\"line\">  1 | lixiaogang5 |  27</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">test=#</span><br></pre></td></tr></table></figure>\n<p>此时再次查看该student数据表文件时，可看到其文件大小是8KB(8192Byte)。很显然，我们刚插入的这条数据并没有这么大。因此可知，postgres在向表中插入数据时候是以8KB为单位进行数据存储管理的。第一次数据进来，无论数据多少，postgres都会在该文件中分配8KB的空间\n。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@Thor 16384]# ls -lh --full-time 16387</span><br><span class=\"line\">-rw------- 1 postgres postgres 8.0K 2021-05-22 15:05:55.223806439 +0800 16387</span><br></pre></td></tr></table></figure>\n<h2 id=\"表文件由页组成\">2.1 表文件由页组成</h2>\n<p>对于PostgreSQL数据库，在每个数据文件(堆文件、索引文件、FSM文件、VM文件等)内部，它分为固定长度的页(或块)。换言之，即一个1GB大小的表文件内部是有若干个固定的页组成。页的默认大小为8192字节(8KB)。单个表文件中的这些页(Page)从0开始进行顺序编号，这些编号也称为“块编号(<code>Block Numbers</code>)”。如果第一页空间已经被数据填满，则postgres会立刻重新在文件末尾(即已填满页的后面)添加一个新的空白页，用于继续存储数据，一直持续这个过程，直到当前表文件大小达到1GB位置。若文件达到1GB，则重新创建一个新的表文件，然后重复上面的这个过程。</p>\n<p>然后每个页的内部又由一个页文件头(<code>Page Header</code>)、若干行指针(<code>Line Pointer</code>)、若干个元组数据(Heaple\nTuple)组成。单个文件大小1GB(默认，可以修改其大小)，因为堆(重点将普通堆)文件是由页组成，所以可知一个堆文件中有：1GB\n= (1024 * 1024) KB / 8KB(Page) = 131072个页。</p>\n<h3 id=\"页的内部布局\">2.1.1 页的内部布局</h3>\n<p>堆表文件的内部页布局示意图如下：</p>\n<figure>\n<img\nsrc=\"https://pic3.zhimg.com/80/v2-9898188abe11ab5ac9b918a85d0f48d6_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>下面分别对页中的“<strong>页头</strong>、<strong>行指针</strong>和<strong>堆元组</strong>”这三个重要数据进行介绍。</p>\n<h4 id=\"页头部数据结构\">2.1.1.1 页头部数据结构</h4>\n<p>页头数据结构(<code>PageHeaderData</code>)声明于文件<code>bufpage.h</code>中，它包含了当前页的常规信息。其大小是24字节(byte)，且分配在页的开头位置。其声明格式如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">PageHeaderData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"comment\">/* XXX LSN is member of *any* block, not only page-organized ones */</span></span><br><span class=\"line\">     PageXLogRecPtr  pd_lsn;    <span class=\"comment\">/* LSN: next byte after last byte of xlog</span></span><br><span class=\"line\"><span class=\"comment\">            * record for last change to this page */</span></span><br><span class=\"line\">     uint16   pd_checksum;  <span class=\"comment\">/* checksum */</span></span><br><span class=\"line\">     uint16   pd_flags;   <span class=\"comment\">/* flag bits, see below */</span></span><br><span class=\"line\">     LocationIndex  pd_lower;   <span class=\"comment\">/* offset to start of free space */</span></span><br><span class=\"line\">     LocationIndex  pd_upper;   <span class=\"comment\">/* offset to end of free space */</span></span><br><span class=\"line\">     LocationIndex  pd_special;   <span class=\"comment\">/* offset to start of special space */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">     uint16   pd_pagesize_version;</span><br><span class=\"line\">     TransactionId  pd_prune_xid;      <span class=\"comment\">/* oldest prunable XID, or zero if none */</span></span><br><span class=\"line\">     ItemIdData  pd_linp[FLEXIBLE_ARRAY_MEMBER]; <span class=\"comment\">/* line pointer array [行指针数组]*/</span></span><br><span class=\"line\">&#125; PageHeaderData;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>pd_lsn</code>变量存储由本页最后一次更改所写入的<code>XLOG</code>记录的<code>LSN</code>(即当前<code>WAL</code>位置)。它是一个8字节的无符号整数，与<code>WAL(Write-Ahead Logging)</code>机制有关。其中<code>PageXLogRecPtr</code>数据类型的声明如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> uint32; <span class=\"comment\">/* == 32 bits */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> uint32  xlogid;   <span class=\"comment\">/* high bits */</span></span><br><span class=\"line\"> uint32  xrecoff;  <span class=\"comment\">/* low bits */</span></span><br><span class=\"line\">&#125; PageXLogRecPtr;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>pd_checksum</code>此变量存储此页的校验和值(请注意，9.3或更高版本支持此变量；在早期版本中，此部分存储了页面的<code>timelineId</code>)。如果<code>checksum</code>已启用，则为每个数据页计算校验和。检测到校验和失败将导致读取数据时出错，并将中止当前正在运行的事务。因此，这为直接在数据库服务器级别检测I/O或硬件问题带来了额外的控制。</p></li>\n<li><p><code>pd_flags</code>该成员用以设置位标志。对于PostgreSQL\n13.2版本，共支持以下几种标志：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//是否有未使用的行指针?</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PD_HAS_FREE_LINES 0x0001 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//没有足够的空间容纳新元组?</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PD_PAGE_FULL  0x0002</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//页面上的所有元组对每个人都可见?</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PD_ALL_VISIBLE  0x0004</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所有有效pd_flags位的OR</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PD_VALID_FLAG_BITS 0x0007</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>pd_lower</code>指向空闲空间的开始位置。</p></li>\n<li><p><code>pd_upper</code>指向空闲空间的结尾。当向表中插入数据时，postgres会分配8KB(BLCKSZ)的内存空间。此时的8KB，除了页的头部数据占用的24字节外，其余的空间都是可用于存储元组的(当然行指针也有占用空间)。如下图所示，该图是刚好分配好8KB大小的内存空间和页头占用的结构示意图。由于此时没有元组插入表文件中，所以<code>pd_upper</code>指向可用空间的末尾，而<code>pd_lower</code>指向页头(<code>PageHeaderData</code>)之后的第一个空闲空间的起始位置。<code>pd_upper - pd_lower</code>是该页中剩余可用的空闲空间(下图粉红色的区间为可用的空闲空间)，随着元素的不断插入，<code>pd_upper</code>和<code>pd_lower</code>变量会不断地随着更新。</p>\n<figure>\n<img\nsrc=\"https://pic1.zhimg.com/80/v2-af17c30a22ea703a17a7e5caa48fb714_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure></li>\n<li><p><code>pd_special</code>指向特殊空间的起始偏移量。该变量主要用于索引文件，对于表文件中的页，它指向页的末尾(因为对于普通的表文件，这个字段没有使用)。在索引文件的页中，它指向特殊空间的开始，这是仅有索引持有的数据区域，根据索引类型，如<code>B-tree</code>、<code>GiST</code>、<code>GiN</code>等，它包含特定的数据。</p></li>\n<li><p><code>pd_pagesize_version</code>页面大小及页面版本号。页面大小和页面版本号被打包成一个大一的uint16字段。这是由于历史原因，在PostgreSQL\n7.3之前，没有页面版本号的概念，这样可以让我们假设7.3之前的数据库页面版本号是0。我们将页面版本号的大小限制为256的倍数，并将低8位留给版本号。</p></li>\n<li><p><code>pd_prune_xid</code>可删除的旧XID，如果没有则为零。</p></li>\n<li><p><code>pd_linp</code>是极为重要的成员变量，它是一个零长度数组(<code>Arrays of Length Zero</code>)。当页中没有插入数据时候，它的数组元素个数是0，因此这个<code>pd_linp</code>也就是上图中所谓的“行指针”数组。它指向该页中的元组(也就是表记录)。其<code>pd_linp</code>的数据类型是：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ItemIdData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> lp_off:<span class=\"number\">15</span>,  <span class=\"comment\">/* offset to tuple (from start of page) */</span></span><br><span class=\"line\">    lp_flags:<span class=\"number\">2</span>,          <span class=\"comment\">/* state of line pointer, see below */</span></span><br><span class=\"line\">    lp_len:<span class=\"number\">15</span>;           <span class=\"comment\">/* byte length of tuple */</span></span><br><span class=\"line\">&#125; ItemIdData;</span><br></pre></td></tr></table></figure>\n<p>更多<code>pd_linp</code>成员的描述将在下面2.1.1.2小节中进行更加详细的描述。</p></li>\n</ul>\n<p>这里给出一个读取PageHeader并输出的C++程序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> int32;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> uint32; <span class=\"comment\">/* == 32 bits */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> uint8;   <span class=\"comment\">/* == 8 bits */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> uint16; <span class=\"comment\">/* == 16 bits */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> uint64;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> Oid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> uint16 LocationIndex;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> uint32 ShortTransactionId;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> uint64 TransactionId;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> uint32 CommandId;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> uint16 OffsetNumber;</span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> uint8 bits8;   <span class=\"comment\">/* &gt;= 8 bits */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FLEXIBLE_ARRAY_MEMBER <span class=\"comment\">/**/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// page相关定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> uint32  xlogid;   <span class=\"comment\">/* high bits */</span></span><br><span class=\"line\"> uint32  xrecoff;  <span class=\"comment\">/* low bits */</span></span><br><span class=\"line\">&#125; PageXLogRecPtr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ItemIdData</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> lp_off : <span class=\"number\">15</span>, <span class=\"comment\">/* offset to tuple (from start of page) */</span></span><br><span class=\"line\">        lp_flags : <span class=\"number\">2</span>,     <span class=\"comment\">/* state of item pointer, see below */</span></span><br><span class=\"line\">        lp_len : <span class=\"number\">15</span>;      <span class=\"comment\">/* byte length of tuple */</span></span><br><span class=\"line\">&#125; ItemIdData;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">PageHeaderData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"comment\">/* XXX LSN is member of *any* block, not only page-organized ones */</span></span><br><span class=\"line\">     PageXLogRecPtr  pd_lsn;    <span class=\"comment\">/* LSN: next byte after last byte of xlog</span></span><br><span class=\"line\"><span class=\"comment\">            * record for last change to this page */</span></span><br><span class=\"line\">     uint16   pd_checksum;  <span class=\"comment\">/* checksum or timelineId */</span></span><br><span class=\"line\">     uint16   pd_flags;   <span class=\"comment\">/* flag bits, see below */</span></span><br><span class=\"line\">     LocationIndex  pd_lower;   <span class=\"comment\">/* offset to start of free space */</span></span><br><span class=\"line\">     LocationIndex  pd_upper;   <span class=\"comment\">/* offset to end of free space */</span></span><br><span class=\"line\">     LocationIndex  pd_special;   <span class=\"comment\">/* offset to start of special space */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">     uint16   pd_pagesize_version;</span><br><span class=\"line\">     ShortTransactionId  pd_prune_xid;      <span class=\"comment\">/* oldest prunable XID, or zero if none */</span></span><br><span class=\"line\">     ItemIdData  pd_linp[FLEXIBLE_ARRAY_MEMBER]; <span class=\"comment\">/* line pointer array [行指针数组]*/</span></span><br><span class=\"line\">&#125; PageHeaderData;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tuple的相关定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">HeapTupleFields</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     ShortTransactionId t_xmin;  <span class=\"comment\">/* inserting xact ID */</span></span><br><span class=\"line\">     ShortTransactionId t_xmax;  <span class=\"comment\">/* deleting or locking xact ID */</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">union</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        CommandId t_cid;  <span class=\"comment\">/* inserting or deleting command ID, or both */</span></span><br><span class=\"line\">        ShortTransactionId t_xvac; <span class=\"comment\">/* old-style VACUUM FULL xact ID */</span></span><br><span class=\"line\">     &#125;   t_field3;</span><br><span class=\"line\">&#125; HeapTupleFields;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">DatumTupleFields</span> &#123;</span><br><span class=\"line\">    int32 datum_len_; <span class=\"comment\">/* varlena header (do not touch directly!) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    int32 datum_typmod; <span class=\"comment\">/* -1, or identifier of a record type */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Oid datum_typeid; <span class=\"comment\">/* composite type OID, or RECORDOID */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Note: field ordering is chosen with thought that Oid might someday</span></span><br><span class=\"line\"><span class=\"comment\">     * widen to 64 bits.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125; DatumTupleFields;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">BlockIdData</span> &#123;</span><br><span class=\"line\">    uint16 bi_hi;</span><br><span class=\"line\">    uint16 bi_lo;</span><br><span class=\"line\">&#125; BlockIdData;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ItemPointerData</span> &#123;</span><br><span class=\"line\">    BlockIdData ip_blkid;</span><br><span class=\"line\">    OffsetNumber ip_posid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">HeapTupleHeaderData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"keyword\">union</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        HeapTupleFields  t_heap;</span><br><span class=\"line\">        DatumTupleFields  t_datum;</span><br><span class=\"line\">     &#125;   t_choice;</span><br><span class=\"line\"></span><br><span class=\"line\">     ItemPointerData t_ctid;  <span class=\"comment\">/* current TID of this or newer tuple (or a</span></span><br><span class=\"line\"><span class=\"comment\">                               * speculative insertion token) */</span></span><br><span class=\"line\">     <span class=\"comment\">/* Fields below here must match MinimalTupleData! */</span></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEHEADERDATA_INFOMASK2 2</span></span><br><span class=\"line\">     uint16  t_infomask2; <span class=\"comment\">/* number of attributes + various flags */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEHEADERDATA_INFOMASK 3</span></span><br><span class=\"line\">     uint16  t_infomask;  <span class=\"comment\">/* various flag bits, see below */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEHEADERDATA_HOFF 4</span></span><br><span class=\"line\">     uint8  t_hoff;   <span class=\"comment\">/* sizeof header incl. bitmap, padding */</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* ^ - 23 bytes - ^ */</span></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEHEADERDATA_BITS 5</span></span><br><span class=\"line\">     bits8  t_bits[FLEXIBLE_ARRAY_MEMBER]; <span class=\"comment\">/* bitmap of NULLs */</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* MORE DATA FOLLOWS AT END OF STRUCT */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> HeapTupleHeaderData* HeapTupleHeader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">HeapTupleData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     uint32    t_len;   <span class=\"comment\">/* length of *t_data */</span></span><br><span class=\"line\">     ItemPointerData  t_self;   <span class=\"comment\">/* SelfItemPointer */</span></span><br><span class=\"line\">     Oid     t_tableOid;  <span class=\"comment\">/* table the tuple came from */</span></span><br><span class=\"line\">     <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEDATA_DATA 3</span></span><br><span class=\"line\">     HeapTupleHeader  t_data;   <span class=\"comment\">/* -&gt; tuple header and data */</span></span><br><span class=\"line\">&#125; HeapTupleData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">  FILE *fp = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;/home/singheart/project/cmake/pg_page/16387&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;open file failed\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 读取文件大小</span></span><br><span class=\"line\">  <span class=\"built_in\">fseek</span>(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">  <span class=\"type\">long</span> file_size = <span class=\"built_in\">ftell</span>(fp);</span><br><span class=\"line\">  <span class=\"built_in\">fseek</span>(fp, <span class=\"number\">0</span>, SEEK_SET);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;file size: %ld\\n&quot;</span>, file_size);</span><br><span class=\"line\">  <span class=\"comment\">// 读取PageHeader信息</span></span><br><span class=\"line\">  uint8 *buf = (uint8 *)<span class=\"built_in\">malloc</span>(file_size);</span><br><span class=\"line\">  <span class=\"built_in\">fread</span>(buf, file_size, <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">  PageHeaderData *header = (PageHeaderData *)buf;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;lsn %d\\n&quot;</span>, header-&gt;pd_lsn);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;checksum %d\\n&quot;</span>, header-&gt;pd_checksum);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;flags %d\\n&quot;</span>, header-&gt;pd_flags);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;lower %d\\n&quot;</span>, header-&gt;pd_lower);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;higher %d\\n&quot;</span>, header-&gt;pd_upper);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;page_size_version: %d\\n&quot;</span>, header-&gt;pd_pagesize_version);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;special %d\\n&quot;</span>, header-&gt;pd_special);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;prune_xid %d\\n&quot;</span>, header-&gt;pd_prune_xid);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 读取所有Tuple信息</span></span><br><span class=\"line\">  ItemIdData tuple1_info = header-&gt;pd_linp[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;lp_off %d, lp_flags %d, lp_len %d\\n&quot;</span>, tuple1_info.lp_off, tuple1_info.lp_flags, tuple1_info.lp_len);</span><br><span class=\"line\">  HeapTupleHeaderData *tuple_header = (HeapTupleHeaderData *)(buf + tuple1_info.lp_off);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;xmin %d\\n&quot;</span>, tuple_header-&gt;t_choice.t_heap.t_xmin);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;xmax %d\\n&quot;</span>, tuple_header-&gt;t_choice.t_heap.t_xmax);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;t_field3 %x\\n&quot;</span>, tuple_header-&gt;t_choice.t_heap.t_field3.t_cid);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;c_tid (%d, %d)\\n&quot;</span>, tuple_header-&gt;t_ctid.ip_blkid, tuple_header-&gt;t_ctid.ip_posid);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;t_infomask2 %d\\n&quot;</span>, tuple_header-&gt;t_infomask2);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;t_infomask %d\\n&quot;</span>, tuple_header-&gt;t_infomask);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;t_off %d\\n&quot;</span>, tuple_header-&gt;t_hoff);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">char</span> *tuple_real_data = (<span class=\"type\">char</span> *)tuple_header + tuple_header-&gt;t_hoff;</span><br><span class=\"line\">  <span class=\"type\">int</span> size = tuple1_info.lp_len - tuple_header-&gt;t_hoff;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (tuple_real_data[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; tuple_real_data[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span> || tuple_real_data[i] &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; tuple_real_data[i] &lt;= <span class=\"string\">&#x27;Z&#x27;</span> || tuple_real_data[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; tuple_real_data[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)  &#123;</span><br><span class=\"line\">           <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c &quot;</span>,tuple_real_data[i]);</span><br><span class=\"line\">           <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%x &quot;</span>,tuple_real_data[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(buf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"行指针项指针\">2.1.1.2 行指针(项指针)</h4>\n<p>行指针的长度为4个字节，它形成一个简单的(ItemId，行指针)数组，该数组起着元组索引的作用。每个索引编号从1开始，称为“<strong>偏移数</strong>”。当将一个新的元组添加到页的时候，新的行指针也被添加到<code>pd_linp</code>数组中，以指向其对应的元组。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ItemIdData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> lp_off:<span class=\"number\">15</span>,  <span class=\"comment\">/* offset to tuple (from start of page) */</span></span><br><span class=\"line\">    lp_flags:<span class=\"number\">2</span>,          <span class=\"comment\">/* state of line pointer, see below */</span></span><br><span class=\"line\">    lp_len:<span class=\"number\">15</span>;           <span class=\"comment\">/* byte length of tuple */</span></span><br><span class=\"line\">&#125; ItemIdData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> ItemIdData *ItemId;</span><br></pre></td></tr></table></figure>\n<p>当不断向页中插入数据时候，其元组、行指针以及可用空间的变化如下图所示：</p>\n<figure>\n<img\nsrc=\"https://pic3.zhimg.com/80/v2-c7caba2e44ffeefe280e8117ea66eb82_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h4 id=\"元组结构\">2.1.1.3 元组结构</h4>\n<p>在2.1.1.1和2.1.1.2两个小节中分别对页(page)中的页头数据结构和行指针的功能细节进行了较为详细的描述，接下来会对页中的元组数据结构以及其内部布局等进行分析。</p>\n<p>对于表文件页中的元组可细分为“普通数据元组和TOAST元组”。<code>TOAST</code>(<code>The Oversized-Attribute Storage Technique</code>，超大属性存储技术)主要用于存储变长数据，当待插入元组的大小大于约为2KB(即页的1/4)时候，会自动启动TOAST技术来存储该元组。TOAST较普通元组稍加复杂些，这里主要针对普通元组文件进行说明。</p>\n<p>元组内部可以分为三部分，分别是：<strong>堆元组头部</strong>、<strong>位图</strong>和<strong>用户存储的数据</strong>。需要注意的是，line-pointer指向的是HeapTupleHeaderData，\n示意图如下所示：</p>\n<figure>\n<img\nsrc=\"https://pic2.zhimg.com/80/v2-aace394f4fb4d1e17be5c74cc9ca3469_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"https://img.singhe.art/v2-cd0263a8b49217e456622c566181799b_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<figure>\n<img\nsrc=\"https://images2017.cnblogs.com/blog/579102/201712/579102-20171212215105691-256965612.png\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>其中堆元组头部的结构定义如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">HeapTupleHeaderData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"keyword\">union</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        HeapTupleFields  t_heap;</span><br><span class=\"line\">        DatumTupleFields  t_datum;</span><br><span class=\"line\">     &#125;   t_choice;</span><br><span class=\"line\"></span><br><span class=\"line\">     ItemPointerData t_ctid;  <span class=\"comment\">/* current TID of this or newer tuple (or a</span></span><br><span class=\"line\"><span class=\"comment\">                               * speculative insertion token) */</span></span><br><span class=\"line\">     <span class=\"comment\">/* Fields below here must match MinimalTupleData! */</span></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEHEADERDATA_INFOMASK2 2</span></span><br><span class=\"line\">     uint16  t_infomask2; <span class=\"comment\">/* number of attributes + various flags */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEHEADERDATA_INFOMASK 3</span></span><br><span class=\"line\">     uint16  t_infomask;  <span class=\"comment\">/* various flag bits, see below */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEHEADERDATA_HOFF 4</span></span><br><span class=\"line\">     uint8  t_hoff;   <span class=\"comment\">/* sizeof header incl. bitmap, padding */</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* ^ - 23 bytes - ^ */</span></span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"keyword\">define</span> FIELDNO_HEAPTUPLEHEADERDATA_BITS 5</span></span><br><span class=\"line\">     bits8  t_bits[FLEXIBLE_ARRAY_MEMBER]; <span class=\"comment\">/* bitmap of NULLs */</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* MORE DATA FOLLOWS AT END OF STRUCT */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中<code>t_choice</code>成员变量是一个共用体数据类型。对于<code>t_choice</code>中的<code>t_heap</code>成员，它描述了当前元组的事务<code>id</code>、事务<code>id</code>等信息，如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">HeapTupleFields</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     TransactionId t_xmin;  <span class=\"comment\">/* inserting xact ID */</span></span><br><span class=\"line\">     TransactionId t_xmax;  <span class=\"comment\">/* deleting or locking xact ID */</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">union</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        CommandId t_cid;  <span class=\"comment\">/* inserting or deleting command ID, or both */</span></span><br><span class=\"line\">        TransactionId t_xvac; <span class=\"comment\">/* old-style VACUUM FULL xact ID */</span></span><br><span class=\"line\">     &#125;   t_field3;</span><br><span class=\"line\">&#125; HeapTupleFields;</span><br></pre></td></tr></table></figure>\n<p><code>t_ctid</code>定义如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ItemPointerData</span> &#123;</span><br><span class=\"line\">    BlockIdData ip_blkid;</span><br><span class=\"line\">    OffsetNumber ip_posid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该数据类型中，<code>t_xmin</code>成员保存的是插入该元组的事务<code>txid</code>。<code>t_xmax</code>报错删除或是更新该元组的<code>txid</code>。如果尚未删除或更新过该元组，则<code>t_xmax</code>将设置为0，即<code>INVALID</code>。<code>t_cid</code>保留命令<code>id(cid)</code>。这表示了从0开始到当前事务中共执行了多少个SQL命令。比如我们在一个事务中查询了2个INSERT\nINTO命令，即：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;BEGIN;</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO ... ;</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO ... ;</span></span><br><span class=\"line\"><span class=\"string\">COMMIT;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>那么第一次插入该元组时候，<code>t_cid</code>初始化为0.第二次插入次元组时候，该<code>t_cid</code>将被设置为1，依次类推。</p>\n<p>t_ctid保存指向自身或是新元组的元组表示符。当该元组被更新时，该元组的<code>t_ctid</code>指向新的元组；否则，<code>t_ctid</code>指向自身。注：为了标识数据表中的元组，在元组内部使用了元组标识符(<code>Tuple Identifile</code>,\n<code>TID</code>),\ntid包含一对值，类似<code>tid(key1, key2)</code>。其中key1表示包含元组的页的块号，key2表示指向元组的行指针的偏移量。如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=# select *from heap_page_items(get_raw_page(&#x27;student&#x27;,0));</span><br><span class=\"line\"> lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid |                   t_data</span><br><span class=\"line\">----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------+--------------------------------------------</span><br><span class=\"line\">  1 |   8144 |        1 |     44 | 604154 |      0 |        0 | (0,1)  |           3 |       2050 |     24 |        |       | \\x01000000174c495849414f47414e47001c000000</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">test=# SELECT * from page_header(get_raw_page(&#x27;student&#x27;, 0));</span><br><span class=\"line\">    lsn    | checksum | flags | lower | upper | special | pagesize | version | prune_xid </span><br><span class=\"line\">-----------+----------+-------+-------+-------+---------+----------+---------+-----------</span><br><span class=\"line\"> 0/19A0818 |        0 |     0 |    28 |  8144 |    8192 |     8192 |       4 |         0</span><br><span class=\"line\">(1 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">test=# </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>成员<code>t_infomask2</code>用来表示当前元组的属性个数。<code>t_infomask</code>用于标识元组的当前状态，比如是否空属性、是否具有对象id、是否具有外部存储属性等等，PostgreSQL\n13.2版本中，<code>t_infomask</code>成员具有以下状态信息：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * information stored in t_infomask:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_HASNULL   0x0001 <span class=\"comment\">/* has null attribute(s) */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_HASVARWIDTH  0x0002 <span class=\"comment\">/* has variable-width attribute(s) */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_HASEXTERNAL  0x0004 <span class=\"comment\">/* has external stored attribute(s) */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_HASOID_OLD   0x0008 <span class=\"comment\">/* has an object-id field */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMAX_KEYSHR_LOCK 0x0010 <span class=\"comment\">/* xmax is a key-shared locker */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_COMBOCID   0x0020 <span class=\"comment\">/* t_cid is a combo cid */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMAX_EXCL_LOCK  0x0040 <span class=\"comment\">/* xmax is exclusive locker */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMAX_LOCK_ONLY  0x0080 <span class=\"comment\">/* xmax, if valid, is only a locker */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/* xmax is a shared locker */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMAX_SHR_LOCK (HEAP_XMAX_EXCL_LOCK | HEAP_XMAX_KEYSHR_LOCK)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_LOCK_MASK (HEAP_XMAX_SHR_LOCK | HEAP_XMAX_EXCL_LOCK | \\</span></span><br><span class=\"line\"><span class=\"meta\">       HEAP_XMAX_KEYSHR_LOCK)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMIN_COMMITTED  0x0100 <span class=\"comment\">/* t_xmin committed */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMIN_INVALID  0x0200 <span class=\"comment\">/* t_xmin invalid/aborted */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMIN_FROZEN  (HEAP_XMIN_COMMITTED|HEAP_XMIN_INVALID)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMAX_COMMITTED  0x0400 <span class=\"comment\">/* t_xmax committed */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMAX_INVALID  0x0800 <span class=\"comment\">/* t_xmax invalid/aborted */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XMAX_IS_MULTI  0x1000 <span class=\"comment\">/* t_xmax is a MultiXactId */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_UPDATED   0x2000 <span class=\"comment\">/* this is UPDATEd version of row */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_MOVED_OFF   0x4000 <span class=\"comment\">/* moved to another place by pre-9.0</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">           * VACUUM FULL; kept for binary</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">           * upgrade support */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_MOVED_IN   0x8000 <span class=\"comment\">/* moved from another place by pre-9.0</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">           * VACUUM FULL; kept for binary</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">           * upgrade support */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_MOVED (HEAP_MOVED_OFF | HEAP_MOVED_IN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HEAP_XACT_MASK   0xFFF0 <span class=\"comment\">/* visibility-related bits */</span></span></span><br></pre></td></tr></table></figure>\n<p>成员<code>t_hoff</code>标识该元组头的大小。成员<code>t_bits</code>数组用于标识当前元组哪些字段是空。</p>\n<p>在读写元组头<code>HeapTupleHeaderData</code>时候，我们往往直接使用其<code>HeapTupleHeader</code>指针来进行操作。其声明如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* typedefs and forward declarations for structs defined in htup_details.h */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">HeapTupleHeaderData</span> HeapTupleHeaderData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> HeapTupleHeaderData *HeapTupleHeader;</span><br></pre></td></tr></table></figure>\n<p>堆元组的整体数据类型声明如下，它嵌套了元组头部结构信息，另外新增了几个附加成员字段，用以描述当前元组的用户数据长度等。如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef struct HeapTupleData</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     uint32    t_len;   /* length of *t_data */</span><br><span class=\"line\">     ItemPointerData  t_self;   /* SelfItemPointer */</span><br><span class=\"line\">     Oid     t_tableOid;  /* table the tuple came from */</span><br><span class=\"line\">     #define FIELDNO_HEAPTUPLEDATA_DATA 3</span><br><span class=\"line\">     HeapTupleHeader  t_data;   /* -&gt; tuple header and data */</span><br><span class=\"line\">&#125; HeapTupleData;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef HeapTupleData *HeapTuple;</span><br></pre></td></tr></table></figure>\n<h3 id=\"pageinspect扩展查看页内容\">2.1.2 pageinspect扩展查看页内容</h3>\n<p>详细信息见另一篇markdown</p>\n<h4 id=\"查看表文件页头信息\">2.1.2.1 查看表文件页头信息</h4>\n<p>使用<code>page_header()</code>函数和<code>get_raw_page()</code>函数结合可得到指定页的头部信息。如下所示，其中数字0表示指定表的页数。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=# select *from page_header(get_raw_page(&#x27;student&#x27;, 0));</span><br><span class=\"line\">    lsn     | checksum | flags | lower | upper | special | pagesize | version | prune_xid</span><br><span class=\"line\">------------+----------+-------+-------+-------+---------+----------+---------+-----------</span><br><span class=\"line\"> 0/39620C78 |        0 |     0 |    28 |  8144 |    8192 |     8192 |       4 |         0</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p>使用<code>heap_page_items</code>和<code>get_raw_page</code>可得到表元组的头部信息和数据信息，如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=# select *from heap_page_items(get_raw_page(&#x27;student&#x27;,0));</span><br><span class=\"line\"> lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid |                   t_data</span><br><span class=\"line\">----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------+--------------------------------------------</span><br><span class=\"line\">  1 |   8144 |        1 |     44 | 604154 |      0 |        0 | (0,1)  |           3 |       2050 |     24 |        |       | \\x01000000174c495849414f47414e47001c000000</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用工具读分析表文件内容\">2.2 使用工具读分析表文件内容</h2>\n<p>因为表文件中的数据都是二进制，所以在不借助工具的情况下，是无法直接查看的。因此我们需要借助工具来查看表文件中的数据内容，结合上面的介绍进行分析。在类UNIX环境上，可以使用<code>hexdump</code>、<code>od</code>命令对堆文件表中的数据进行十六进制转存，然后进行分析。当前student表中的数据仅有一条，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=# \\d+ student;</span><br><span class=\"line\">                                                       Table &quot;public.student&quot;</span><br><span class=\"line\"> Column |         Type          | Collation | Nullable |               Default               | Storage  | Stats target | Description</span><br><span class=\"line\">--------+-----------------------+-----------+----------+-------------------------------------+----------+--------------+-------------</span><br><span class=\"line\"> id     | integer               |           | not null | nextval(&#x27;student_id_seq&#x27;::regclass) | plain    |              |</span><br><span class=\"line\"> name   | character varying(10) |           |          |                                     | extended |              |</span><br><span class=\"line\"> age    | integer               |           |          |                                     | plain    |              |</span><br><span class=\"line\">Indexes:</span><br><span class=\"line\">    &quot;student_pkey&quot; PRIMARY KEY, btree (id)</span><br><span class=\"line\"></span><br><span class=\"line\">test=# SELECT *FROM student;</span><br><span class=\"line\"> id |   name   | age</span><br><span class=\"line\">----+----------+-----</span><br><span class=\"line\">  1 | XIAOGANG |  27</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">test=#</span><br></pre></td></tr></table></figure>\n<p><code>hexdump</code>命令主要用来查看二进制文件的十六进制编码(当然，也可以直接<code>vim</code>，然后<code>:%!xxd</code>将其二进制数据转换为十六进制)，如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@Thor 163898]# hexdump  16387</span><br><span class=\"line\">0000000 0000 0000 aab8 40a1 0000 0000 001c 1fd0</span><br><span class=\"line\">0000010 2000 2004 0000 0000 9fd0 0058 0000 0000</span><br><span class=\"line\">0000020 0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class=\"line\">* //省略若干字节内容(全是0000, free space,未使用的内存空间)</span><br><span class=\"line\">0001fd0 b4cb 0009 0000 0000 0000 0000 0000 0000</span><br><span class=\"line\">0001fe0 0001 0003 0902 0018 0001 0000 5813 4149</span><br><span class=\"line\">0001ff0 474f 4e41 0047 0000 001b 0000 0000 0000</span><br><span class=\"line\">0002000</span><br></pre></td></tr></table></figure>\n<p>注：堆表文件的元组数据是从页的尾部开始存储，直到<code>pd_upper - pd_lower</code>的空间不足以存储元组为止。如下图中的<code>Tuple1</code>、<code>Tuple2</code>、<code>Tuple3</code>、<code>Tuple4</code>等等。</p>\n<figure>\n<img\nsrc=\"https://pic2.zhimg.com/80/v2-1edc85ae1aaaf6a1ba5e50419fd04a09_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>现在我们将上面<code>hexdump</code>显示的十六进制数据结合页头数据结构(<code>PageHeaderData</code>)成员列表来进行详细分析。如下图所示：</p>\n<figure>\n<img\nsrc=\"https://pic4.zhimg.com/80/v2-8ee06b41cb0c4d963ad045ab1eb7c3eb_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>堆表文件中的页头部信息可以通过系统表<code>page_header</code>获取得到，其查询出来的结果和<code>hexdump</code>显示的十六进制数据是能够一一对应的。上图中黄色标注的24字节是页的头部(<code>PageHeaderData</code>)，其中各成员的大小如下图所示：</p>\n<p>上图中<code>2000 2004 0000 0000</code>依次对应这页头中的<code>m_special</code>、<code>m_pagesize_version</code>、<code>pd_prune_xid</code>。</p>\n<p>紫色表示的4字节(<code>d09F 5800</code>)是指向元组的行指针<code>pd_linp</code>(也称为<code>ItemId</code>)。行指针的结构声明如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ItemIdData</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       <span class=\"type\">unsigned</span> lp_off:<span class=\"number\">15</span>,  <span class=\"comment\">/* offset to tuple (from start of page) */</span></span><br><span class=\"line\">       lp_flags:<span class=\"number\">2</span>,  <span class=\"comment\">/* state of line pointer, see below */</span></span><br><span class=\"line\">       lp_len:<span class=\"number\">15</span>;  <span class=\"comment\">/* byte length of tuple */</span></span><br><span class=\"line\">&#125; ItemIdData;</span><br></pre></td></tr></table></figure>\n<p>第1至15位指向该元组的偏移量(从页开始)、15至17位声明当前元组的状态，这个前面有说过、17至32声明该元组的长度大小。这里之所以将<code>hexdump</code>展示的十六进制反过来书写是因为我当前系统架构是小端模式。经转换过后，其各值能够和<code>pg_header</code>表查出来的结果相吻合。说明分析是正确的。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">pd_linp[0] ==== 00589FD0 //转换为二进制后是：10110001001111111010000   </span><br><span class=\"line\">101100          01    001111111010000</span><br><span class=\"line\">44(字节)         1    8144(字节)</span><br></pre></td></tr></table></figure>\n<p>上面对页中元组的头部信息、行指针进行了详细的分析。接下来重点剖析页中行指针所指向的对应的元组数据信息。</p>\n<p>在分析元组的结构信息时候，我们需要借助<code>heap_page_items()</code>函数，该函数会将元组在页内存中的分布信息详细展示出来。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=# select *from heap_page_items(get_raw_page(&#x27;student&#x27;,0));</span><br><span class=\"line\"> lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid |                   t_data</span><br><span class=\"line\">----+--------+----------+--------+--------+--------+----------+--------+-------------+------------+--------+--------+-------+--------------------------------------------</span><br><span class=\"line\">  1 |   8144 |        1 |     44 | 636107 |      0 |        0 | (0,1)  |           3 |       2306 |     24 |        |       | \\x01000000135849414f47414e470000001b000000</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">test=# select *from student;</span><br><span class=\"line\"> id |   name   | age</span><br><span class=\"line\">----+----------+-----</span><br><span class=\"line\">  1 | XIAOGANG |  27</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p>由于元组中字段占用的大小有严格的内存对齐要求，所以实际上可以看到各成员之间会存在一些“填充”字节数据。其对齐(必须始终是平台的<code>MAXALIGN</code>距离的倍数。)要求如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAXALIGN(LEN)   TYPEALIGN(MAXIMUM_ALIGNOF, (LEN))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TYPEALIGN(ALIGNVAL,LEN)  \\</span></span><br><span class=\"line\"><span class=\"meta\"> (((uintptr_t) (LEN) + ((ALIGNVAL) - 1)) &amp; ~((uintptr_t) ((ALIGNVAL) - 1)))</span></span><br></pre></td></tr></table></figure>\n<p>通过<code>heap_page_items()</code>函数得到结果与<code>hexdump</code>命令得到的数据，最终可得到该元组在页为0内存中布局详情如下图所示。下图中紫色标注的1b其值是age字段中的值27。该字段周边的0000是填充字节数据z，用于保证内存对齐。</p>\n<figure>\n<img\nsrc=\"https://pic3.zhimg.com/80/v2-f48cba9d471b497b01fb261cf20deef6_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h3 id=\"hexdump分析堆表文件\">2.2.1 hexdump分析堆表文件</h3>\n<p>由于这两个命令显示的结果在不手动转换情况下，无法直接看出(需要转换)该文件中的表头结构、行指针和元组结构等数据信息。因此，出于方便，还需使用其他工具，分别是：<code>pg_filedump</code>和<code>pg_hexedit</code>。<code>pg_filedump</code>\n和<code>pg_hexedit</code>\n两个工具并没有附加在PostgreSQL源码中，所以源码安装的PostgreSQL中，bin目录下是没有这两个工具命令的。这两个工具有专门的pg团队在进行维护，所以你可以在github上面找到其源码，然后进行源码安装。</p>\n<p>由于<code>pg_hexedit</code>工具显示的结果需要借助\n<code>wxHexEditor</code>工具来进行展示，所以这里使用<code>pg_filedump</code>工具来进行分析。</p>\n<h2 id=\"pg_filedump\">2.2.2 pg_filedump</h2>\n<p><code>pg_filedump</code>命令提供许多供选的参数，具体详情可使用\n<code>pg_filedump --help</code>。该工具得到的数据比较直观，因为结果中直接给出了当前文件中的页数、行指针的起始位置，以及各页中分别指向空闲空间起始、结束位置的地址等。如下所示：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@Thor bin]#</span><br><span class=\"line\">[root@Thor bin]#</span><br><span class=\"line\">[root@Thor bin]#</span><br><span class=\"line\">[root@Thor bin]# ./pg_filedump -i /var/lib/pgsql/11/data/base/163898/16387</span><br><span class=\"line\"></span><br><span class=\"line\">*******************************************************************</span><br><span class=\"line\">* PostgreSQL File/Block Formatted Dump Utility</span><br><span class=\"line\">*</span><br><span class=\"line\">* File: /var/lib/pgsql/11/data/base/163898/164056</span><br><span class=\"line\">* Options used: -i</span><br><span class=\"line\">*******************************************************************</span><br><span class=\"line\"></span><br><span class=\"line\">Block    0 ********************************************************</span><br><span class=\"line\">&lt;Header&gt; -----</span><br><span class=\"line\">Block Offset: 0x00000000         Offsets: Lower      28 (0x001c)</span><br><span class=\"line\">Block: Size 8192  Version    4            Upper    8144 (0x1fd0)</span><br><span class=\"line\">LSN:  logid      0 recoff 0x40a1aab8      Special  8192 (0x2000)</span><br><span class=\"line\">Items:    1                      Free Space: 8116</span><br><span class=\"line\">Checksum: 0x0000  Prune XID: 0x00000000  Flags: 0x0000 ()</span><br><span class=\"line\">Length (including item array): 28</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Data&gt; -----</span><br><span class=\"line\">Item   1 -- Length:   44  Offset: 8144 (0x1fd0)  Flags: NORMAL</span><br><span class=\"line\">XMIN: 636107  XMAX: 0  CID|XVAC: 0</span><br><span class=\"line\">Block Id: 0  linp Index: 1   Attributes: 3   Size: 24</span><br><span class=\"line\">infomask: 0x0902 (HASVARWIDTH|XMIN_COMMITTED|XMAX_INVALID)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*** End of File Encountered. Last Block Read: 0 ***</span><br><span class=\"line\">[root@Thor bin]#</span><br></pre></td></tr></table></figure>\n","categories":["openGauss"]},{"title":"postgreSQL系统表分析","url":"/2024/06/27/openGauss/PostgreSQL%E7%B3%BB%E7%BB%9F%E8%A1%A8%E5%88%86%E6%9E%90/","content":"<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">test=# select pg_relation_filenode(&#x27;pg_attribute&#x27;); </span><br><span class=\"line\">pg_relation_filenode    </span><br><span class=\"line\">----------------------</span><br><span class=\"line\">24621</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p>这个命令可以找到表文件在哪里存着</p>\n<blockquote>\n<p>转载自</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/623283855\">PostgreSQL\n系统表体系 (syscache &amp; recache) - 知乎 (zhihu.com)</a></li>\n</ul>\n</blockquote>\n<h1 id=\"前言\">前言</h1>\n<p>系统表是整个 PostgreSQL\n数据库存储体系中最重要的一部分数据，它们用来组织管理PostgreSQL\n的数据空间，将用户自己定义的数据集合更好得以一个或者多个表组织起来。它们本质也是一个个表对象，相比于普通表是存储的元数据。</p>\n<p>这里的元数据可以理解为描述数据的数据。比如，用户创建的表有\n<code>(c1 int, c2 text)</code>两种列类型，这一些类型\n<code>int, text</code> 会被单独存放在\n<code>pg_type</code>的系统表中，同时 <code>c1, c2</code>\n列名字则会被存放在 <code>pg_attribute</code>的系统表中，并和 pg_type\n形成关联。这一些 <code>pg_type</code>, <code>pg_attribute</code>\n类型的表可以建立对用户表的关系描述，所以它们可以被称为元数据。</p>\n<span id=\"more\"></span>\n<h1 id=\"oid\">OID</h1>\n<p>Oid 在 PostgreSQL 中被用来描述一个个数据表的逻辑对象，比如\n<code>Relation</code>, <code>type</code>, <code>attr</code>,\n<code>namespace</code>等等，每创建一个对象都会为其分配一个属于自己的标识(Oid)。PG\n也会通过 Oid 来在不同的数据表之间建立关联，也就是说有一些\n对象是全局唯一的(pg_class 表的oid)。但是因为 Oid 是\n<code>unsigned int</code>，所以当对象的数量超过42亿之后可能会有回卷，所以PG\n对Oid的划分有一些自己的定义，比如预留16383 个Oid\n作为全局唯一的对象标识，其他的都是给用户表使用，允许发生回卷。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> oid,relname,relnamespace <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;pg_class&#x27;</span>;</span><br><span class=\"line\"> oid  <span class=\"operator\">|</span> relname  <span class=\"operator\">|</span> relnamespace</span><br><span class=\"line\"><span class=\"comment\">------+----------+--------------</span></span><br><span class=\"line\"> <span class=\"number\">1259</span> <span class=\"operator\">|</span> pg_class <span class=\"operator\">|</span>           <span class=\"number\">11</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> test<span class=\"operator\">=</span># <span class=\"keyword\">SELECT</span> pg_relation_filepath(<span class=\"string\">&#x27;student&#x27;</span>);</span><br><span class=\"line\"> pg_relation_filepath </span><br><span class=\"line\"><span class=\"comment\">----------------------</span></span><br><span class=\"line\"> base<span class=\"operator\">/</span><span class=\"number\">16384</span><span class=\"operator\">/</span><span class=\"number\">16387</span></span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\">test<span class=\"operator\">=</span># <span class=\"keyword\">select</span> oid,relname,relnamespace <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;student&#x27;</span>;</span><br><span class=\"line\">  oid  <span class=\"operator\">|</span> relname <span class=\"operator\">|</span> relnamespace </span><br><span class=\"line\"><span class=\"comment\">-------+---------+--------------</span></span><br><span class=\"line\"> <span class=\"number\">16387</span> <span class=\"operator\">|</span> student <span class=\"operator\">|</span>         <span class=\"number\">2200</span></span><br><span class=\"line\">(<span class=\"number\">1</span> 行记录)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 三个 预定义好的Oid 类型</span></span><br><span class=\"line\">#<span class=\"keyword\">define</span> FirstGenbkiObjectId     <span class=\"number\">10000</span></span><br><span class=\"line\">#<span class=\"keyword\">define</span> FirstUnpinnedObjectId   <span class=\"number\">12000</span></span><br><span class=\"line\">#<span class=\"keyword\">define</span> FirstNormalObjectId     <span class=\"number\">16384</span></span><br></pre></td></tr></table></figure>\n<p>可以看到student表的OID和存储tuple的文件名是一样的</p>\n<p>接下来看看 PostgreSQL\n内部非常重要的一些系统表，以及它们之间的关系模型，从而更好的帮助我们理解创建的一个用户表是如何被组织管理的。</p>\n<h1 id=\"pg_database\">pg_database</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres=# select oid,datname,datdba,encoding from pg_database;</span><br><span class=\"line\">  oid  |  datname  | datdba | encoding </span><br><span class=\"line\">-------+-----------+--------+----------</span><br><span class=\"line\">     1 | template1 |     10 |        6</span><br><span class=\"line\"> 12921 | template0 |     10 |        6</span><br><span class=\"line\"> 12926 | postgres  |     10 |        6</span><br><span class=\"line\"> 16385 | learn     |     10 |        6</span><br><span class=\"line\">(4 rows)</span><br></pre></td></tr></table></figure>\n<p>pg_database系统表用来管理一个database的对象属性</p>\n<h1 id=\"pg_class\">pg_class</h1>\n<p>pg_class\n系统表用来管理一个表的对象属性，就是存储在当前数据库的所有表在此时的固有属性信息都会被统一放在pg_class\n系统表中，直接看其列属性的定义 <code>pg_class.h</code>：</p>\n<blockquote>\n<p>因为过多，简单挑几个关键信息如下</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pg_class 的唯一标识 </span></span><br><span class=\"line\">CATALOG(pg_class,<span class=\"number\">1259</span>,RelationRelationId)..</span><br><span class=\"line\"></span><br><span class=\"line\">Oid         oid; <span class=\"comment\">// 当前表对象在 pg_class 的唯一标识，pg_class会以oid 为主键建索引，方便查找</span></span><br><span class=\"line\">NameData    relname; <span class=\"comment\">// relation 名字</span></span><br><span class=\"line\">Oid         relnamespace; <span class=\"comment\">// 所处的 pg_namespace oid，用来和 pg_namespace系统表建立关联</span></span><br><span class=\"line\">Oid         reltype; <span class=\"comment\">// 对象类型，用于和pg_type系统表建立关联</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Oid         relam; <span class=\"comment\">// am 类型，比如是heap or 其他的，也是和 pg_amthod 建立管理</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Oid         relfilenode; <span class=\"comment\">// 当前对象的物理文件名，pg 内部文件名都是以数字存在。</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">char</span>        relpersistence; <span class=\"comment\">// 该对象的存储类型， &#x27;p&#x27; 表示永久，即基本持久化类型; </span></span><br><span class=\"line\">                            <span class=\"comment\">//&#x27;u&#x27; 表示 unlogged，不写wal.</span></span><br><span class=\"line\">                            <span class=\"comment\">// &#x27;t&#x27; 表示临时表，session 级别的生命周期</span></span><br><span class=\"line\"><span class=\"type\">char</span>        relkind; <span class=\"comment\">// 该对象的类型，&#x27;r&#x27;=普通表，&#x27;i&#x27;=索引，&#x27;v&#x27;=视图, &#x27;t&#x27;=toast 大value， &#x27;c&#x27;=符合类型 等</span></span><br><span class=\"line\">int16       relnatts; <span class=\"comment\">// 该对象的属性列的个数</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>可以看到通过 <strong>create type map as (string varchar, int_1\nint);</strong> <strong>create table map_test (id int, value\nmap);</strong> 创建的表在 pg_class 中存储的属性信息 有两个，一个是 类型\n<code>map</code> 的属性信息， 一个是表\n<code>map_test</code>的属性信息。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 复合类型 map 的属性信息</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> oid,relname,relnamespace,reltype,relam,relfilenode,relpersistence,relkind,relnatts <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;map&#x27;</span>;</span><br><span class=\"line\">  oid  <span class=\"operator\">|</span> relname <span class=\"operator\">|</span> relnamespace <span class=\"operator\">|</span> reltype <span class=\"operator\">|</span> relam <span class=\"operator\">|</span> relfilenode <span class=\"operator\">|</span> relpersistence <span class=\"operator\">|</span> relkind <span class=\"operator\">|</span> relnatts</span><br><span class=\"line\"><span class=\"comment\">-------+---------+--------------+---------+-------+-------------+----------------+---------+----------</span></span><br><span class=\"line\"> <span class=\"number\">27737</span> <span class=\"operator\">|</span> map     <span class=\"operator\">|</span>         <span class=\"number\">2200</span> <span class=\"operator\">|</span>   <span class=\"number\">27739</span> <span class=\"operator\">|</span>     <span class=\"number\">0</span> <span class=\"operator\">|</span>           <span class=\"number\">0</span> <span class=\"operator\">|</span> p              <span class=\"operator\">|</span> c       <span class=\"operator\">|</span>        <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">-- 表map_test的属性信息</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> oid,relname,relnamespace,reltype,relam,relfilenode,relpersistence,relkind,relnatts <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;map_test&#x27;</span>;</span><br><span class=\"line\">  oid  <span class=\"operator\">|</span> relname  <span class=\"operator\">|</span> relnamespace <span class=\"operator\">|</span> reltype <span class=\"operator\">|</span> relam <span class=\"operator\">|</span> relfilenode <span class=\"operator\">|</span> relpersistence <span class=\"operator\">|</span> relkind <span class=\"operator\">|</span> relnatts</span><br><span class=\"line\"><span class=\"comment\">-------+----------+--------------+---------+-------+-------------+----------------+---------+----------</span></span><br><span class=\"line\"> <span class=\"number\">27740</span> <span class=\"operator\">|</span> map_test <span class=\"operator\">|</span>         <span class=\"number\">2200</span> <span class=\"operator\">|</span>   <span class=\"number\">27742</span> <span class=\"operator\">|</span>     <span class=\"number\">2</span> <span class=\"operator\">|</span>       <span class=\"number\">27740</span> <span class=\"operator\">|</span> p              <span class=\"operator\">|</span> r       <span class=\"operator\">|</span>        <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>当然，pg_class 本身也是一个对象，所以在 pg_class\n中也会存储自己的对象属性信息。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> oid,relname,relnamespace,reltype,relam,relfilenode,relpersistence,relkind,relnatts <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;pg_class&#x27;</span>;</span><br><span class=\"line\"> oid  <span class=\"operator\">|</span> relname  <span class=\"operator\">|</span> relnamespace <span class=\"operator\">|</span> reltype <span class=\"operator\">|</span> relam <span class=\"operator\">|</span> relfilenode <span class=\"operator\">|</span> relpersistence <span class=\"operator\">|</span> relkind <span class=\"operator\">|</span> relnatts</span><br><span class=\"line\"><span class=\"comment\">------+----------+--------------+---------+-------+-------------+----------------+---------+----------</span></span><br><span class=\"line\"> <span class=\"number\">1259</span> <span class=\"operator\">|</span> pg_class <span class=\"operator\">|</span>           <span class=\"number\">11</span> <span class=\"operator\">|</span>      <span class=\"number\">83</span> <span class=\"operator\">|</span>     <span class=\"number\">2</span> <span class=\"operator\">|</span>           <span class=\"number\">0</span> <span class=\"operator\">|</span> p              <span class=\"operator\">|</span> r       <span class=\"operator\">|</span>       <span class=\"number\">33</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"pg_type\">pg_type</h1>\n<p>该系统表用于记录管理所有的类型定义，比如上面的\n<code>create table map_test (id int, value map);</code>\n建表过程中用到的类型 <code>int</code> 以及 复合类型 <code>map</code>\n都会被存储到 <code>pg_type</code>中，而列名字 <code>id</code> 以及\n<code>value</code> 则会被存储到的 <code>pg_attribute</code>\n系统表中，这个后面会说。</p>\n<p>PG 通过 <code>pg_class</code> 的对象属性描述的系统表 以及\n<code>pg_type</code> 和 <code>pg_attribute</code>\n两种对列属性描述的系统表 共同构造一个基本表的列信息。</p>\n<p>接下来看看pg_type 的定义\n<code>pg_type.h</code>，挑选几个简略定义如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pg_type的 固有对象 标识是1247</span></span><br><span class=\"line\">CATALOG(pg_type,<span class=\"number\">1247</span>,TypeRelationId)</span><br><span class=\"line\">Oid         oid; <span class=\"comment\">// 类型oid</span></span><br><span class=\"line\">NameData    typname; <span class=\"comment\">// 类型名字</span></span><br><span class=\"line\">...</span><br><span class=\"line\">int16       typlen; <span class=\"comment\">// 该类型的长度，对于变长类型则一直是-1，如果是-2则是以null 终止的c字符串。</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">char</span>        typtype; <span class=\"comment\">// 该类型的基础类型。 &#x27;b&#x27;=基本类型，&#x27;c&#x27;=复合类型, &#x27;d&#x27;=域类型, &#x27;e&#x27;=枚举类型等</span></span><br></pre></td></tr></table></figure>\n<p>比如对于我们前面通过\n<code>create type map as (string varchar, int_1 int);</code>\n创建的类型，可以从 pg_type中看到其信息如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> oid,typname,typlen,typtype <span class=\"keyword\">from</span> pg_type <span class=\"keyword\">where</span> typname<span class=\"operator\">=</span><span class=\"string\">&#x27;map&#x27;</span>;</span><br><span class=\"line\">  oid  <span class=\"operator\">|</span> typname <span class=\"operator\">|</span> typlen <span class=\"operator\">|</span> typtype</span><br><span class=\"line\"><span class=\"comment\">-------+---------+--------+---------</span></span><br><span class=\"line\"> <span class=\"number\">27739</span> <span class=\"operator\">|</span> map     <span class=\"operator\">|</span>     <span class=\"number\">-1</span> <span class=\"operator\">|</span> c</span><br></pre></td></tr></table></figure>\n<p>因为 <code>map</code> 是我们自己创建的类型，其在 PG 内部的Oid 会从\n16384 之后开始生成，标识其属于用户对象。 对于普通的\n<code>int</code>类型，其在数据库初始化的时候 以及在 pg_type\n中预先创建好了，且 Oid也是提前分配好的，保证全局唯一：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> oid,typname,typlen,typtype <span class=\"keyword\">from</span> pg_type <span class=\"keyword\">where</span> typname<span class=\"operator\">=</span><span class=\"string\">&#x27;int4&#x27;</span>;</span><br><span class=\"line\"> oid <span class=\"operator\">|</span> typname <span class=\"operator\">|</span> typlen <span class=\"operator\">|</span> typtype</span><br><span class=\"line\"><span class=\"comment\">-----+---------+--------+---------</span></span><br><span class=\"line\">  <span class=\"number\">23</span> <span class=\"operator\">|</span> int4    <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span> b</span><br></pre></td></tr></table></figure>\n<h1 id=\"pg_attribute\">pg_attribute</h1>\n<p>这个系统表描述的是一个表（对象）的每一个列属性的定义。在\npg_class中我们看到的是这个表对象的列的个数，但是具体每一个列\n都是什么类型，名字是什么，长度是多少，是第几列等这样的列的描述信息则是会存储在\npg_attribute 系统表中。\n其基本类型定义如下<code>pg_attribute.h</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">CATALOG(pg_attribute,<span class=\"number\">1249</span></span><br><span class=\"line\">Oid         attrelid; <span class=\"comment\">// 该列属于哪一个关系对象，关系对象的oid （一个数据库只能有一个关系对象的名字）</span></span><br><span class=\"line\">NameData    attname; <span class=\"comment\">// 该列的名称</span></span><br><span class=\"line\">Oid         atttypid; <span class=\"comment\">// 该列的类型， 指向 pg_type的一条类型</span></span><br><span class=\"line\">...</span><br><span class=\"line\">int16       attlen; <span class=\"comment\">// 该列的长度，同 pg_type中的 typlen，加速读取attr信息。</span></span><br><span class=\"line\">int16       attnum; <span class=\"comment\">// 该列的index，是 attrelid 的第几列。</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>比如我们查看 前面创建的 <code>test_map</code>\n表的列描述信息如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> oid <span class=\"keyword\">from</span> pg_class <span class=\"keyword\">where</span> relname<span class=\"operator\">=</span><span class=\"string\">&#x27;map_test&#x27;</span>;</span><br><span class=\"line\">  oid</span><br><span class=\"line\"><span class=\"comment\">-------</span></span><br><span class=\"line\"> <span class=\"number\">27740</span></span><br><span class=\"line\">postgres<span class=\"operator\">=</span># <span class=\"keyword\">select</span> attrelid,attname,atttypid,attlen,attnum  <span class=\"keyword\">from</span> pg_attribute  <span class=\"keyword\">where</span> attrelid<span class=\"operator\">=</span><span class=\"number\">27740</span>;</span><br><span class=\"line\"> attrelid <span class=\"operator\">|</span> attname  <span class=\"operator\">|</span> atttypid <span class=\"operator\">|</span> attlen <span class=\"operator\">|</span> attnum</span><br><span class=\"line\"><span class=\"comment\">----------+----------+----------+--------+--------</span></span><br><span class=\"line\">    <span class=\"number\">27740</span> <span class=\"operator\">|</span> tableoid <span class=\"operator\">|</span>       <span class=\"number\">26</span> <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span>     <span class=\"number\">-6</span></span><br><span class=\"line\">    <span class=\"number\">27740</span> <span class=\"operator\">|</span> cmax     <span class=\"operator\">|</span>       <span class=\"number\">29</span> <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span>     <span class=\"number\">-5</span></span><br><span class=\"line\">    <span class=\"number\">27740</span> <span class=\"operator\">|</span> xmax     <span class=\"operator\">|</span>       <span class=\"number\">28</span> <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span>     <span class=\"number\">-4</span></span><br><span class=\"line\">    <span class=\"number\">27740</span> <span class=\"operator\">|</span> cmin     <span class=\"operator\">|</span>       <span class=\"number\">29</span> <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span>     <span class=\"number\">-3</span></span><br><span class=\"line\">    <span class=\"number\">27740</span> <span class=\"operator\">|</span> xmin     <span class=\"operator\">|</span>       <span class=\"number\">28</span> <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span>     <span class=\"number\">-2</span></span><br><span class=\"line\">    <span class=\"number\">27740</span> <span class=\"operator\">|</span> ctid     <span class=\"operator\">|</span>       <span class=\"number\">27</span> <span class=\"operator\">|</span>      <span class=\"number\">6</span> <span class=\"operator\">|</span>     <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"number\">27740</span> <span class=\"operator\">|</span> id       <span class=\"operator\">|</span>       <span class=\"number\">23</span> <span class=\"operator\">|</span>      <span class=\"number\">4</span> <span class=\"operator\">|</span>      <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"number\">27740</span> <span class=\"operator\">|</span> <span class=\"keyword\">value</span>    <span class=\"operator\">|</span>    <span class=\"number\">27739</span> <span class=\"operator\">|</span>     <span class=\"number\">-1</span> <span class=\"operator\">|</span>      <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以看到 pg_attribute 还为 map_test\n默认分配了一些默认不可见的属性列，用作 extension\n时查看更细粒度的tuple信息。 用户自己创建的两列 <code>id</code> 和\n<code>value</code> 则是有自己的typeid信息，可以从 <code>pg_type</code>\n中看到其定义。</p>\n<h1 id=\"系统表关系\">系统表关系</h1>\n<p>接下来还是通过上面两个简单语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> type map <span class=\"keyword\">as</span> (string <span class=\"type\">varchar</span>, int_1 <span class=\"type\">int</span>);</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> map_test (id <span class=\"type\">int</span>, <span class=\"keyword\">value</span> map);</span><br></pre></td></tr></table></figure>\n<p>看看最后创建的 <code>map_test</code>表信息\n是如何由不同的系统表中的数据共同描述的。</p>\n<figure>\n<img\nsrc=\"https://pic4.zhimg.com/80/v2-11941cecfb4e7a3892a2a997aa32755b_1440w.webp\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>如上图，描述了整个创建过程中涉及到的\n系统表信息（并不全面），主要的几个系统表如上。 当我们执行第一条语句\n<code>create type map as (string varchar, int_1 int);</code>\n按照上图给出的系统表，发生的事情如下： - 在pg_attribute\n增加map的两个列属性，一个是 string，一个是int_1，并标识各自的 pg_type\nrelid；创建好的 string和int_1 行各自的 <code>attrelid</code>\n都会保存下来，用于指向pg_class 中的 map 对象对应的 oid。 - 在 pg_type\n中创建 map类型，因为其是由两个基本类型 <code>int4</code> 和\n<code>varchar</code> 组合而成，所以其类型是组合类型。其\n<code>typerelid</code> 也是指向 pg_class 中 map 对象的 oid。 -\n在pg_class中创建一行信息， 记录其指向的 pg_type 中的行oid 以及所属的\nnamespace信息。因为 map对象是\ntype类型，并不是relation，所以其内部不需要存储数据，也就不需要<code>relam</code>的智齿了。</p>\n<p>当我们执行第二条语句\n<code>create table map_test (id int, value map);</code> 就是继续在\npg_type 以及 pg_attribute 系统表中添加对应的行。 - 因为复合类型\nmap已经存在，则 map_test 表中的行只需要增加对应的\npg_attribute信息了，不需要额外创建pg_type行。增加的 <code>id</code> 和\n<code>value</code>行只需要让 <code>atttypid</code> 指定\npg_type中的类型即可，id 是基本类型，value 则是已经创建好的复合类型 map。\n- pg_class 中增加属于\n<code>map_test</code>的行。因为其拥有符合类型的列，且是是一个普通表；所以拥有\ntoast 以及 am。</p>\n<p>可以看到创建表的过程中需要有较多的系统表的读写，上图仅仅展示了写入的系统表\n以及很小部分需要读区的系统表，实际执行 SQL\n语句的过程中会有更多的对系统表的访问。</p>\n<p>接下来我们看看 系统表的初始化以及访问链路。</p>\n<h1 id=\"pg_filenode.map\">pg_filenode.map</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> int32;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> uint32; <span class=\"comment\">/* == 32 bits */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> uint8;   <span class=\"comment\">/* == 8 bits */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">short</span> uint16; <span class=\"comment\">/* == 16 bits */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> uint64;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> Oid;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_MAPPINGS 62</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">RelMapping</span> &#123;</span><br><span class=\"line\">    Oid         mapoid;         <span class=\"comment\">/* OID of a catalog */</span></span><br><span class=\"line\">    Oid         mapfilenode;    <span class=\"comment\">/* its filenode number */</span></span><br><span class=\"line\">&#125; RelMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">RelMapFile</span> &#123;</span><br><span class=\"line\">    int32 magic;        <span class=\"comment\">/* always RELMAPPER_FILEMAGIC */</span></span><br><span class=\"line\">    int32 num_mappings; <span class=\"comment\">/* number of valid RelMapping entries */</span></span><br><span class=\"line\">    RelMapping mappings[MAX_MAPPINGS];</span><br><span class=\"line\">    int32 crc; <span class=\"comment\">/* CRC of all above */</span></span><br><span class=\"line\">    int32 pad; <span class=\"comment\">/* to make the struct size be 512 exactly */</span></span><br><span class=\"line\">&#125; RelMapFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">  RelMapFile *mapfile = (RelMapFile *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(RelMapFile));</span><br><span class=\"line\">  FILE *file = <span class=\"built_in\">fopen</span>(<span class=\"string\">&quot;/home/singheart/project/cmake/pg_page/pg_filenode.map&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fread</span>(mapfile, <span class=\"built_in\">sizeof</span>(RelMapFile), <span class=\"number\">1</span>, file);</span><br><span class=\"line\">  <span class=\"built_in\">fclose</span>(file);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;magic: %d\\n&quot;</span>, mapfile-&gt;magic);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Oid    fileid\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX_MAPPINGS; ++i) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d -&gt; %d\\n&quot;</span>, mapfile-&gt;mappings[i].mapoid, mapfile-&gt;mappings[i].mapfilenode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["openGauss"]},{"title":"centos7.6安装postreSQL9.2","url":"/2024/06/27/openGauss/centos7.6%E5%AE%89%E8%A3%85postgresql9.2/","content":"<h1 id=\"安装步骤\">安装步骤</h1>\n<h2 id=\"添加yum-配置\">1. 添加yum 配置</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y http://download.postgresql.org/pub/repos/yum/9.2/redhat/rhel-7-x86_64/pgdg-centos92-9.2-3.noarch.rpm</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"安装服务\">2. 安装服务</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y postgresql92-server postgresql92-contrib</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\">3. 启动</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">执行初始化</span></span><br><span class=\"line\">/usr/pgsql-9.2/bin/postgresql92-setup initdb</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新启动</span></span><br><span class=\"line\">systemctl restart postgresql-9.2.service</span><br><span class=\"line\">systemctl status postgresql-9.2.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"调整配置文件\">4. 调整配置文件</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">59 行左右, 修改监听IP, 端口</span></span><br><span class=\"line\">vim /var/lib/pgsql/9.2/data/postgresql.conf　　</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">82 行左右修改成 trust</span></span><br><span class=\"line\">vim /var/lib/pgsql/9.2/data/pg_hba.conf</span><br><span class=\"line\"></span><br><span class=\"line\">host  all       all       127.0.0.1/32      trust</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">systemctl restart postgresql-9.2</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建用户\">5. 创建用户</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">create user singheart with password &#x27;Test@123&#x27;;</span><br><span class=\"line\">GRANT ALL PRIVILEGES TO singheart LOGIN;</span><br><span class=\"line\">ALTER ROLE test_user LOGIN;</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON DATABASE testdb TO singheart;</span><br></pre></td></tr></table></figure>\n<h2 id=\"连接\">6. 连接</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">psql -p 11111 -h 127.0.0.1 -d postgres</span><br></pre></td></tr></table></figure>\n<p>注意需要把-h参数加上，否则会出现<code>psql: could not connect to server: No such file or directory, Is the server running locally and accepting connections on Unix domain socket \"/run/postgresql/.s.PGSQL.11111\"?</code>这个问题</p>\n","categories":["openGauss"]},{"title":"openGauss通过docker运行","url":"/2024/07/28/openGauss/openGauss_docker/","content":"<blockquote>\n<p>参考<a\nhref=\"https://blog.csdn.net/dive668/article/details/117268140\">【openGauss】Ubuntu\n三条命令装好 opengauss_ubuntu安装opengauss-CSDN博客</a></p>\n</blockquote>\n<h1 id=\"x00-安装docker\">0x00 安装docker</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>\n<p>如果官方docker源较慢，可以修改docker源。编辑<code>/etc/docker/daemon.json</code>，添加以下内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"x01-运行opengauss镜像\">0x01 运行openGauss镜像</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run --name opengauss --privileged=true -d -p 5432:5432 -e GS_PASSWORD=Test@123 enmotech/opengauss:latest</span><br></pre></td></tr></table></figure>\n<h1 id=\"x02-进入容器\">0x02 进入容器</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it opengauss bash</span><br></pre></td></tr></table></figure>\n<h1 id=\"x03-使用gsql连接oepngauss\">0x03 使用gsql连接oepnGauss</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">gsql</span><br></pre></td></tr></table></figure>\n","categories":["openGauss"]},{"title":"opengauss之file-fdw实践","url":"/2022/04/18/openGauss/opengauss%E4%B9%8Bfile-fdw%E5%AE%9E%E8%B7%B5/","content":"<blockquote>\n<p>本文转载自<a\nhref=\"https://blog.csdn.net/penriver/article/details/122260524\">CSDN-架构师忠哥</a></p>\n</blockquote>\n<h1 id=\"file_fdw介绍\">file_fdw介绍</h1>\n<p><code>fdw (Foreign Data Wrapper)</code>是一种外部访问接口，被用来访问存储在数据库外部的数据，这些数据可以是外部的pg数据库，也可以<code>oracle</code>、<code>mysql</code>等数据库，甚至可以是文件。</p>\n<p>本文讲解如何通过<code>file_fdw</code>，访问外部的数据文件</p>\n<span id=\"more\"></span>\n<p>使用时注意如下：</p>\n<ul>\n<li><p>数据文件必须是COPY\nFROM可读的格式；具体可参照COPY语句的介绍。</p></li>\n<li><p>访问这样的数据文件当前只是可读的。当前不支持对该数据文件的写入操作。</p></li>\n<li><p>CREATE FOREIGN TABLE\n外表的表结构需要与指定的文件的数据保持一致。</p></li>\n<li><p>当前openGauss会默认编译file_fdw，在initdb的时候会在pg_catalog\nschema中创建该插件。</p></li>\n</ul>\n<h1 id=\"file_fdw实践\">file_fdw实践</h1>\n<h2 id=\"创建外部server\">创建外部server</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> pg_foreign_server ;</span><br><span class=\"line\"><span class=\"comment\">--默认已经存在，不用创建</span></span><br><span class=\"line\"><span class=\"comment\">--create extension file_fdw;</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> server pgcsv <span class=\"keyword\">foreign</span> data wrapper file_fdw;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建表\">创建表</h2>\n<p>使用<code>file_fdw</code>创建的外部表的选项参见 <code>file_fdw</code>\n通过filename选项指定要读取的文件，是必需的参数，且必须是一个绝对路径名。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">foreign</span> <span class=\"keyword\">table</span> person (</span><br><span class=\"line\">    id <span class=\"type\">integer</span>,</span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">    departno <span class=\"type\">integer</span>,</span><br><span class=\"line\">    age <span class=\"type\">integer</span></span><br><span class=\"line\">) SERVER pgcsv</span><br><span class=\"line\">OPTIONS ( filename <span class=\"string\">&#x27;/tmp/persons.csv&#x27;</span>, format <span class=\"string\">&#x27;csv&#x27;</span>,header <span class=\"string\">&#x27;true&#x27;</span>, delimiter <span class=\"string\">&#x27;#&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p><code>persons.csv</code>文件的内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">id#name#departno#age</span><br><span class=\"line\">1#张三#22#56</span><br><span class=\"line\">2#李四#22#56</span><br><span class=\"line\">2#王五#22#51</span><br><span class=\"line\">2#赵六#22#51</span><br><span class=\"line\">2#张三丰#22# 51</span><br><span class=\"line\">3#张无敌#1#111</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据查询\">数据查询</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">explain <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> person;</span><br></pre></td></tr></table></figure>\n<p><img\nsrc=\"http://img.singhe.art/0dad6640addc46b2890ad7541ad407ae.png\" /></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> person;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://img.singhe.art/select.png\" /></p>\n<h2 id=\"表删除\">表删除</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">foreign</span> <span class=\"keyword\">table</span> person</span><br></pre></td></tr></table></figure>\n","categories":["openGauss"],"tags":["openGauss","数据库"]},{"title":"postgreSQL建表流程分析","url":"/2024/06/27/openGauss/postgresql%E5%BB%BA%E8%A1%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/","content":"<h1 id=\"表的种类\">表的种类</h1>\n<span id=\"more\"></span>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_RELATION        <span class=\"string\">&#x27;r&#x27;</span>   <span class=\"comment\">/* ordinary table */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_INDEX           <span class=\"string\">&#x27;i&#x27;</span>   <span class=\"comment\">/* secondary index */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_SEQUENCE        <span class=\"string\">&#x27;S&#x27;</span>   <span class=\"comment\">/* sequence object */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_TOASTVALUE      <span class=\"string\">&#x27;t&#x27;</span>   <span class=\"comment\">/* for out-of-line values */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_VIEW            <span class=\"string\">&#x27;v&#x27;</span>   <span class=\"comment\">/* view */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_MATVIEW         <span class=\"string\">&#x27;m&#x27;</span>   <span class=\"comment\">/* materialized view */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_COMPOSITE_TYPE  <span class=\"string\">&#x27;c&#x27;</span>   <span class=\"comment\">/* composite type */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_FOREIGN_TABLE   <span class=\"string\">&#x27;f&#x27;</span>   <span class=\"comment\">/* foreign table */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_PARTITIONED_TABLE <span class=\"string\">&#x27;p&#x27;</span> <span class=\"comment\">/* partitioned table */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELKIND_PARTITIONED_INDEX <span class=\"string\">&#x27;I&#x27;</span> <span class=\"comment\">/* partitioned index */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELPERSISTENCE_PERMANENT  <span class=\"string\">&#x27;p&#x27;</span> <span class=\"comment\">/* regular table */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELPERSISTENCE_UNLOGGED   <span class=\"string\">&#x27;u&#x27;</span> <span class=\"comment\">/* unlogged permanent table */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       RELPERSISTENCE_TEMP       <span class=\"string\">&#x27;t&#x27;</span> <span class=\"comment\">/* temporary table */</span></span></span><br><span class=\"line\"><span class=\"comment\">/* default selection for replica identity (primary key or nothing) */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       REPLICA_IDENTITY_DEFAULT  <span class=\"string\">&#x27;d&#x27;</span></span></span><br><span class=\"line\"><span class=\"comment\">/* no replica identity is logged for this relation */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       REPLICA_IDENTITY_NOTHING  <span class=\"string\">&#x27;n&#x27;</span></span></span><br><span class=\"line\"><span class=\"comment\">/* all columns are logged as replica identity */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       REPLICA_IDENTITY_FULL     <span class=\"string\">&#x27;f&#x27;</span></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * an explicitly chosen candidate key&#x27;s columns are used as replica identity.</span></span><br><span class=\"line\"><span class=\"comment\"> * Note this will still be set if the index has been dropped; in that case it</span></span><br><span class=\"line\"><span class=\"comment\"> * has the same meaning as &#x27;n&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>       REPLICA_IDENTITY_INDEX    <span class=\"string\">&#x27;i&#x27;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"createstmt\">CreateStmt</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">CreateStmt</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNodeTag\t\ttype;</span><br><span class=\"line\">\tRangeVar   *relation;\t\t<span class=\"comment\">/* relation to create */</span>\t</span><br><span class=\"line\">\tList\t   *tableElts;\t\t<span class=\"comment\">/* column definitions (list of ColumnDef) */</span></span><br><span class=\"line\">\tList\t   *inhRelations;\t<span class=\"comment\">/* relations to inherit from (list of</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * RangeVar) */</span></span><br><span class=\"line\">\tPartitionBoundSpec *partbound;\t<span class=\"comment\">/* FOR VALUES clause */</span> </span><br><span class=\"line\">\tPartitionSpec *partspec;\t<span class=\"comment\">/* PARTITION BY clause */</span>  </span><br><span class=\"line\">\tTypeName   *ofTypename;\t\t<span class=\"comment\">/* OF typename  类型名 */</span> </span><br><span class=\"line\">\tList\t   *constraints;\t<span class=\"comment\">/* constraints (list of Constraint nodes)  约束*/</span></span><br><span class=\"line\">\tList\t   *options;\t\t<span class=\"comment\">/* options from WITH clause    with 语句参数 */</span></span><br><span class=\"line\">\tOnCommitAction oncommit;\t<span class=\"comment\">/* what do we do at COMMIT? */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *tablespacename; <span class=\"comment\">/* table space to use, or NULL 表空间  */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *accessMethod;\t<span class=\"comment\">/* table access method 访问方法  */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tif_not_exists;\t<span class=\"comment\">/* just do nothing if it already exists? 表是否存在*/</span></span><br><span class=\"line\">&#125; CreateStmt;</span><br></pre></td></tr></table></figure>\n<p>该结构用于保存对Create Table\nStatement语句查询解析生成的相关信息，如表信息、column列信息列表，访问方法（heap,btree）等</p>\n<h1 id=\"rangevar\">RangeVar</h1>\n<p>该结构保存SQL语句中from 子句信息，如catalogname/\nrelname、是否采用别名（alias）和继承关系。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">RangeVar</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNodeTag\t\ttype;</span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *catalogname;\t<span class=\"comment\">/* the catalog (database) name, or NULL */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *schemaname;\t\t<span class=\"comment\">/* the schema name, or NULL */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *relname;\t\t<span class=\"comment\">/* the relation/sequence name */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tinh;\t\t\t<span class=\"comment\">/* expand rel by inheritance? recursively act</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * on children? */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\trelpersistence; <span class=\"comment\">/* see RELPERSISTENCE_* in pg_class.h */</span></span><br><span class=\"line\">\tAlias\t   *alias;\t\t\t<span class=\"comment\">/* table alias &amp; optional column aliases */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tlocation;\t\t<span class=\"comment\">/* token location, or -1 if unknown */</span></span><br><span class=\"line\">&#125; RangeVar;</span><br></pre></td></tr></table></figure>\n<h1 id=\"alias\">Alias</h1>\n<p>为RangeVar指定别名.别名可能同时重命名了表列.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Alias -</span></span><br><span class=\"line\"><span class=\"comment\"> *    specifies an alias for a range variable; the alias might also</span></span><br><span class=\"line\"><span class=\"comment\"> *    specify renaming of columns within the table.</span></span><br><span class=\"line\"><span class=\"comment\"> *    为RangeVar指定别名.别名可能同时重命名了表列.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note: colnames is a list of Value nodes (always strings).  In Alias structs</span></span><br><span class=\"line\"><span class=\"comment\"> * associated with RTEs, there may be entries corresponding to dropped</span></span><br><span class=\"line\"><span class=\"comment\"> * columns; these are normally empty strings (&quot;&quot;).  See parsenodes.h for info.</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意:colnames是Value节点(通常是字符串)链表.</span></span><br><span class=\"line\"><span class=\"comment\"> *      在与RTEs相关的Alias结构体中,可能有跟已删除的列对应的条目.</span></span><br><span class=\"line\"><span class=\"comment\"> *    这些通常是空字符串(&quot;&quot;).详细可参考parsenodes.h</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Alias</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  NodeTag   type;</span><br><span class=\"line\">  <span class=\"comment\">//别名</span></span><br><span class=\"line\">  <span class=\"type\">char</span>     *aliasname;    <span class=\"comment\">/* aliased rel name (never qualified) */</span></span><br><span class=\"line\">  <span class=\"comment\">//列别名链表</span></span><br><span class=\"line\">  List     *colnames;   <span class=\"comment\">/* optional list of column aliases */</span></span><br><span class=\"line\">&#125; Alias;</span><br></pre></td></tr></table></figure>\n<h1 id=\"columndef\">ColumnDef</h1>\n<p>该结构体保存创建表中的列定义信息，如列名、是否为空、压缩方法、是否定义默认值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * ColumnDef - column definition (used in various creates)</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * If the column has a default value, we may have the value expression</span></span><br><span class=\"line\"><span class=\"comment\"> * in either &quot;raw&quot; form (an untransformed parse tree) or &quot;cooked&quot; form</span></span><br><span class=\"line\"><span class=\"comment\"> * (a post-parse-analysis, executable expression tree), depending on</span></span><br><span class=\"line\"><span class=\"comment\"> * how this ColumnDef node was created (by parsing, or by inheritance</span></span><br><span class=\"line\"><span class=\"comment\"> * from an existing relation).  We should never have both in the same node!</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Similarly, we may have a COLLATE specification in either raw form</span></span><br><span class=\"line\"><span class=\"comment\"> * (represented as a CollateClause with arg==NULL) or cooked form</span></span><br><span class=\"line\"><span class=\"comment\"> * (the collation&#x27;s OID).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The constraints list may contain a CONSTR_DEFAULT item in a raw</span></span><br><span class=\"line\"><span class=\"comment\"> * parsetree produced by gram.y, but transformCreateStmt will remove</span></span><br><span class=\"line\"><span class=\"comment\"> * the item and set raw_default instead.  CONSTR_DEFAULT items</span></span><br><span class=\"line\"><span class=\"comment\"> * should not appear in any subsequent processing.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">ColumnDef</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNodeTag\t\ttype;</span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *colname;\t\t<span class=\"comment\">/* name of column */</span></span><br><span class=\"line\">\tTypeName   *typeName;\t\t<span class=\"comment\">/* type of column */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *compression;\t<span class=\"comment\">/* compression method for column */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tinhcount;\t\t<span class=\"comment\">/* number of times column is inherited */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tis_local;\t\t<span class=\"comment\">/* column has local (non-inherited) def&#x27;n */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tis_not_null;\t<span class=\"comment\">/* NOT NULL constraint specified? */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tis_from_type;\t<span class=\"comment\">/* column definition came from table type */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tstorage;\t\t<span class=\"comment\">/* attstorage setting, or 0 for default */</span></span><br><span class=\"line\">\tNode\t   *raw_default;\t<span class=\"comment\">/* default value (untransformed parse tree) */</span></span><br><span class=\"line\">\tNode\t   *cooked_default; <span class=\"comment\">/* default value (transformed expr tree) */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tidentity;\t\t<span class=\"comment\">/* attidentity setting */</span></span><br><span class=\"line\">\tRangeVar   *identitySequence;\t<span class=\"comment\">/* to store identity sequence name for</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t * ALTER TABLE ... ADD COLUMN */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tgenerated;\t\t<span class=\"comment\">/* attgenerated setting */</span></span><br><span class=\"line\">\tCollateClause *collClause;\t<span class=\"comment\">/* untransformed COLLATE spec, if any */</span></span><br><span class=\"line\">\tOid\t\t\tcollOid;\t\t<span class=\"comment\">/* collation OID (InvalidOid if not set) */</span></span><br><span class=\"line\">\tList\t   *constraints;\t<span class=\"comment\">/* other constraints on column */</span></span><br><span class=\"line\">\tList\t   *fdwoptions;\t\t<span class=\"comment\">/* per-column FDW options */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tlocation;\t\t<span class=\"comment\">/* parse location, or -1 if none/unknown */</span></span><br><span class=\"line\">&#125; ColumnDef;</span><br></pre></td></tr></table></figure>\n<h1 id=\"constraint\">Constraint</h1>\n<p>该结构体用于保存约束信息，如主键、唯一索引、非空、外键和排他约束等信息。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Constraint</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNodeTag\t\ttype;</span><br><span class=\"line\">\tConstrType\tcontype;\t\t<span class=\"comment\">/* see above  约束类型 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Fields used for most/all constraint types: */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *conname;\t\t<span class=\"comment\">/* Constraint name, or NULL if unnamed 约束名  */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tdeferrable;\t\t<span class=\"comment\">/* DEFERRABLE?  可延迟 */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tinitdeferred;\t<span class=\"comment\">/* INITIALLY DEFERRED? */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tlocation;\t\t<span class=\"comment\">/* token location, or -1 if unknown */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Fields used for constraints with expressions (CHECK and DEFAULT): */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tis_no_inherit;\t<span class=\"comment\">/* is constraint non-inheritable? 不可继承的约束*/</span></span><br><span class=\"line\">\tNode\t   *raw_expr;\t\t<span class=\"comment\">/* expr, as untransformed parse tree 表达式，作为未转化解析树*/</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *cooked_expr;\t<span class=\"comment\">/* expr, as nodeToString representation */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tgenerated_when; <span class=\"comment\">/* ALWAYS or BY DEFAULT */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Fields used for unique constraints (UNIQUE and PRIMARY KEY): */</span></span><br><span class=\"line\">\tList\t   *keys;\t\t\t<span class=\"comment\">/* String nodes naming referenced key\t key列</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * column(s) */</span></span><br><span class=\"line\">\tList\t   *including;\t\t<span class=\"comment\">/* String nodes naming referenced nonkey  nonkey列</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * column(s) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Fields used for EXCLUSION constraints: */</span></span><br><span class=\"line\">\tList\t   *exclusions;\t\t<span class=\"comment\">/* list of (IndexElem, operator name) pairs */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Fields used for index constraints (UNIQUE, PRIMARY KEY, EXCLUSION): */</span></span><br><span class=\"line\">\tList\t   *options;\t\t<span class=\"comment\">/* options from WITH clause */</span>   </span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *indexname;\t\t<span class=\"comment\">/* existing index to use; otherwise NULL  索引名 */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *indexspace;\t\t<span class=\"comment\">/* index tablespace; NULL for default  索引对应的表空间  */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\treset_default_tblspc;\t<span class=\"comment\">/* reset default_tablespace prior to</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t\t * creating the index */</span></span><br><span class=\"line\">\t<span class=\"comment\">/* These could be, but currently are not, used for UNIQUE/PKEY: */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t   *access_method;\t<span class=\"comment\">/* index access method; NULL for default  访问方法 */</span></span><br><span class=\"line\">\tNode\t   *where_clause;\t<span class=\"comment\">/* partial index predicate      where子句信息\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Fields used for FOREIGN KEY constraints: */</span></span><br><span class=\"line\">\tRangeVar   *pktable;\t\t<span class=\"comment\">/* Primary key table  主键信息  */</span></span><br><span class=\"line\">\tList\t   *fk_attrs;\t\t<span class=\"comment\">/* Attributes of foreign key    外键属性列表*/</span></span><br><span class=\"line\">\tList\t   *pk_attrs;\t\t<span class=\"comment\">/* Corresponding attrs in PK table  对应的主键属性*/</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tfk_matchtype;\t<span class=\"comment\">/* FULL, PARTIAL, SIMPLE */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tfk_upd_action;\t<span class=\"comment\">/* ON UPDATE action */</span></span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\tfk_del_action;\t<span class=\"comment\">/* ON DELETE action */</span></span><br><span class=\"line\">\tList\t   *old_conpfeqop;\t<span class=\"comment\">/* pg_constraint.conpfeqop of my former self */</span></span><br><span class=\"line\">\tOid\t\t\told_pktable_oid;\t<span class=\"comment\">/* pg_constraint.confrelid of my former</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t * self */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Fields used for constraints that allow a NOT VALID specification */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tskip_validation;\t<span class=\"comment\">/* skip validation of existing rows? */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tinitially_valid;\t<span class=\"comment\">/* mark the new constraint as valid? */</span></span><br><span class=\"line\">&#125; Constraint;</span><br><span class=\"line\">-------------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ConstrType</span>\t\t\t<span class=\"comment\">/* types of constraints */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tCONSTR_NULL,\t\t\t\t<span class=\"comment\">/* not standard SQL, but a lot of people</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * expect it */</span></span><br><span class=\"line\">\tCONSTR_NOTNULL,</span><br><span class=\"line\">\tCONSTR_DEFAULT,</span><br><span class=\"line\">\tCONSTR_IDENTITY,</span><br><span class=\"line\">\tCONSTR_GENERATED,</span><br><span class=\"line\">\tCONSTR_CHECK,</span><br><span class=\"line\">\tCONSTR_PRIMARY,</span><br><span class=\"line\">\tCONSTR_UNIQUE,</span><br><span class=\"line\">\tCONSTR_EXCLUSION,</span><br><span class=\"line\">\tCONSTR_FOREIGN,</span><br><span class=\"line\">\tCONSTR_ATTR_DEFERRABLE,\t\t<span class=\"comment\">/* attributes for previous constraint node */</span></span><br><span class=\"line\">\tCONSTR_ATTR_NOT_DEFERRABLE,</span><br><span class=\"line\">\tCONSTR_ATTR_DEFERRED,</span><br><span class=\"line\">\tCONSTR_ATTR_IMMEDIATE</span><br><span class=\"line\">&#125; ConstrType;</span><br></pre></td></tr></table></figure>\n<h1 id=\"query\">Query</h1>\n<p>SQL语句完成词法、语法解析生成解析树，后进行查询分析与重写生成查询树，其元素为Query结构体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Query -</span></span><br><span class=\"line\"><span class=\"comment\"> *\t  Parse analysis turns all statements into a Query tree</span></span><br><span class=\"line\"><span class=\"comment\"> *\t  for further processing by the rewriter and planner.</span></span><br><span class=\"line\"><span class=\"comment\"> * 对解析树进行分析生成查询树，继而供后续重写器和计划器处理</span></span><br><span class=\"line\"><span class=\"comment\"> *\t  Utility statements (i.e. non-optimizable statements) have the</span></span><br><span class=\"line\"><span class=\"comment\"> *\t  utilityStmt field set, and the rest of the Query is mostly dummy.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *\t  Planning converts a Query tree into a Plan tree headed by a PlannedStmt</span></span><br><span class=\"line\"><span class=\"comment\"> *\t  node --- the Query structure is not used by the executor.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> *  计划器将查询树转变成计划树，其head为 PlannedStmt节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNodeTag\t\ttype;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCmdType\t\tcommandType;\t<span class=\"comment\">/* select|insert|update|delete|utility */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tQuerySource querySource;\t<span class=\"comment\">/* where did I come from? */</span>\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tuint64\t\tqueryId;\t\t<span class=\"comment\">/* query identifier (can be set by plugins)  query 标识符*/</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tcanSetTag;\t\t<span class=\"comment\">/* do I set the command result tag?  */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\tNode\t   *utilityStmt;\t<span class=\"comment\">/* non-null if commandType == CMD_UTILITY */</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tresultRelation; <span class=\"comment\">/* rtable index of target relation for </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * INSERT/UPDATE/DELETE; 0 for SELECT */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasAggs;\t\t<span class=\"comment\">/* has aggregates in tlist or havingQual  agg */</span> </span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasWindowFuncs; <span class=\"comment\">/* has window functions in tlist  是否有窗口函数 */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasTargetSRFs;\t<span class=\"comment\">/* has set-returning functions in tlist   是否设有returning functions */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasSubLinks;\t<span class=\"comment\">/* has subquery SubLink 子查询链  */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasDistinctOn;\t<span class=\"comment\">/* distinctClause is from DISTINCT ON  是否有distinct子句 */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasRecursive;\t<span class=\"comment\">/* WITH RECURSIVE was specified */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasModifyingCTE;\t<span class=\"comment\">/* has INSERT/UPDATE/DELETE in WITH */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasForUpdate;\t<span class=\"comment\">/* FOR [KEY] UPDATE/SHARE was specified 是否指定for update */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasRowSecurity; <span class=\"comment\">/* rewriter has applied some RLS policy */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tisReturn;\t\t<span class=\"comment\">/* is a RETURN statement  return 查询*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *cteList;\t\t<span class=\"comment\">/* WITH list (of CommonTableExpr&#x27;s) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *rtable;\t\t\t<span class=\"comment\">/* list of range table entries 范围表项 */</span></span><br><span class=\"line\">\tFromExpr   *jointree;\t\t<span class=\"comment\">/* table join tree (FROM and WHERE clauses) join tree */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *targetList;\t\t<span class=\"comment\">/* target list (of TargetEntry) 投影列表*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tOverridingKind <span class=\"keyword\">override</span>;\t<span class=\"comment\">/* OVERRIDING clause */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tOnConflictExpr *onConflict; <span class=\"comment\">/* ON CONFLICT DO [NOTHING | UPDATE] 冲突*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *returningList;\t<span class=\"comment\">/* return-values list (of TargetEntry) 返回链表*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *groupClause;\t<span class=\"comment\">/* a list of SortGroupClause&#x27;s */</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tgroupDistinct;\t<span class=\"comment\">/* is the group by clause distinct? */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *groupingSets;\t<span class=\"comment\">/* a list of GroupingSet&#x27;s if present */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tNode\t   *havingQual;\t\t<span class=\"comment\">/* qualifications applied to groups */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *windowClause;\t<span class=\"comment\">/* a list of WindowClause&#x27;s */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *distinctClause; <span class=\"comment\">/* a list of SortGroupClause&#x27;s */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *sortClause;\t\t<span class=\"comment\">/* a list of SortGroupClause&#x27;s */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tNode\t   *limitOffset;\t<span class=\"comment\">/* # of result tuples to skip (int8 expr)  偏移*/</span></span><br><span class=\"line\">\tNode\t   *limitCount;\t\t<span class=\"comment\">/* # of result tuples to return (int8 expr) 计数*/</span></span><br><span class=\"line\">\tLimitOption limitOption;\t<span class=\"comment\">/* limit type */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *rowMarks;\t\t<span class=\"comment\">/* a list of RowMarkClause&#x27;s */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tNode\t   *setOperations;\t<span class=\"comment\">/* set-operation tree if this is top level of</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * a UNION/INTERSECT/EXCEPT query */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *constraintDeps; <span class=\"comment\">/* a list of pg_constraint OIDs that the query</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * depends on to be semantically valid */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *withCheckOptions;\t<span class=\"comment\">/* a list of WithCheckOption&#x27;s (added</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t\t * during rewrite) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * The following two fields identify the portion of the source text string</span></span><br><span class=\"line\"><span class=\"comment\">\t * containing this query.  They are typically only populated in top-level</span></span><br><span class=\"line\"><span class=\"comment\">\t * Queries, not in sub-queries.  When not set, they might both be zero, or</span></span><br><span class=\"line\"><span class=\"comment\">\t * both be -1 meaning &quot;unknown&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tstmt_location;\t<span class=\"comment\">/* start location, or -1 if unknown */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tstmt_len;\t\t<span class=\"comment\">/* length in bytes; 0 means &quot;rest of string&quot; */</span></span><br><span class=\"line\">&#125; Query;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"plannedstmt\">PlannedStmt</h1>\n<p>计划器会对上述的查询树进一步处理生成计划树</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ----------------</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\tPlannedStmt node</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The output of the planner is a Plan tree headed by a PlannedStmt node.</span></span><br><span class=\"line\"><span class=\"comment\"> * PlannedStmt holds the &quot;one time&quot; information needed by the executor.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 计划器对此处理生成一个头部为 PlannedStmt node 计划树  </span></span><br><span class=\"line\"><span class=\"comment\"> * DDL语句其 commandType == CMD_UTILITY</span></span><br><span class=\"line\"><span class=\"comment\"> * For simplicity in APIs, we also wrap utility statements in PlannedStmt</span></span><br><span class=\"line\"><span class=\"comment\"> * nodes; in such cases, commandType == CMD_UTILITY, the statement itself</span></span><br><span class=\"line\"><span class=\"comment\"> * is in the utilityStmt field, and the rest of the struct is mostly dummy.</span></span><br><span class=\"line\"><span class=\"comment\"> * (We do use canSetTag, stmt_location, stmt_len, and possibly queryId.)</span></span><br><span class=\"line\"><span class=\"comment\"> * ----------------</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">PlannedStmt</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNodeTag\t\ttype;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCmdType\t\tcommandType;\t<span class=\"comment\">/* select|insert|update|delete|utility */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\tuint64\t\tqueryId;\t\t<span class=\"comment\">/* query identifier (copied from Query) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasReturning;\t<span class=\"comment\">/* is it insert|update|delete RETURNING? */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\thasModifyingCTE;\t<span class=\"comment\">/* has insert|update|delete in WITH? */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tcanSetTag;\t\t<span class=\"comment\">/* do I set the command result tag? */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\ttransientPlan;\t<span class=\"comment\">/* redo plan when TransactionXmin changes? */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tdependsOnRole;\t<span class=\"comment\">/* is plan specific to current role? */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span>\t\tparallelModeNeeded; <span class=\"comment\">/* parallel mode required to execute?  是否为并行模式 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tjitFlags;\t\t<span class=\"comment\">/* which forms of JIT should be performed  JIT 执行形式  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">Plan</span> *planTree;\t\t<span class=\"comment\">/* tree of Plan nodes */</span>  <span class=\"comment\">// plan nodes树</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *rtable;\t\t\t<span class=\"comment\">/* list of RangeTblEntry nodes */</span>  <span class=\"comment\">// 范围链表</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* rtable indexes of target relations for INSERT/UPDATE/DELETE */</span></span><br><span class=\"line\">\tList\t   *resultRelations;\t<span class=\"comment\">/* integer list of RT indexes, or NIL */</span>  <span class=\"comment\">// 范围表索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *appendRelations;\t<span class=\"comment\">/* list of AppendRelInfo nodes */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *subplans;\t\t<span class=\"comment\">/* Plan trees for SubPlan expressions; note</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\t\t * that some could be NULL */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tBitmapset  *rewindPlanIDs;\t<span class=\"comment\">/* indices of subplans that require REWIND */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *rowMarks;\t\t<span class=\"comment\">/* a list of PlanRowMark&#x27;s */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *relationOids;\t<span class=\"comment\">/* OIDs of relations the plan depends on */</span> <span class=\"comment\">// relation oid</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *invalItems;\t\t<span class=\"comment\">/* other dependencies, as PlanInvalItems */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\tList\t   *paramExecTypes; <span class=\"comment\">/* type OIDs for PARAM_EXEC Params */</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\tNode\t   *utilityStmt;\t<span class=\"comment\">/* non-null if this is utility stmt */</span> </span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/* statement location in source string (copied from Query) */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tstmt_location;\t<span class=\"comment\">/* start location, or -1 if unknown */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>\t\t\tstmt_len;\t\t<span class=\"comment\">/* length in bytes; 0 means &quot;rest of string&quot; */</span></span><br><span class=\"line\">&#125; PlannedStmt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"流程图及讲解\">流程图及讲解</h1>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/54613b5533824e7eb4fd077c9e81fd65.png#pic_center\"\nalt=\"建表流程图\" />\n<figcaption aria-hidden=\"true\">建表流程图</figcaption>\n</figure>\n<p>transformCreateStmt函数是表创建真正的入口函数，其执行流程如下：</p>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/bee6a79d047344b980c9f7e776528112.png#pic_center\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>物理文件的创建以及系统表元数据等更新由DefineRelation函数实现：</p>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/9731ba160532430eb761c1861afde93c.png#pic_center\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<h2 id=\"transformcreatestmt\">transformCreateStmt</h2>\n<p>该函数对生成的计划树解析分析，返回操作节点链表</p>\n<p>执行流程： 1）获取并检查命名空间权限；\n2）构建并初始化CreateStmtContext上下文，在后续执行过程中进一步更新relation、约束、列属性等信息。\n3）遍历表中所有的列，调用相应的处理函数获取列的属性、约束等信息，填充CreateStmtContext对应字段信息&lt;普通列调用\ntransformColumnDefinition， 含有约束的调用 transformTableConstraint\n&gt;。 4）后续进行预处理，检查约束合理性，最后返回\nutility命令的操作节点链表。</p>\n<h2 id=\"definerelation\">DefineRelation</h2>\n<p>该函数的功能是创建新的relation，包括物理文件、相应的内存relcache\nEntry和系统表元数据的更新\n1）首先进行权限检查，确定当前用户是否有权限创建表；\n2）对创建表语句中的WITH子句进行解析（transformRelOptions）；\n3）调用heap_reloptions对参数进行合法验证。 4）调用 MergeAttributes\n将继承的属性合并到表属性定义中； 5）根据表列信息调用\nBuildDescForRelation函数生成元组描述符TupleDesc，该结构体记录了元组每列字段的详细信息（pg_attribute）\n6）遍历定义链表中的每一个属性查看是否有默认值、压缩等信息；\n7）在上述条件准备完善下调用\nheap_create_with_catalog创建物理文件并在系统表中注册； 8）调用\nAddRelationNewConstraints 处理表中新增的约束与默认值</p>\n<h2 id=\"heap_create_with_catalog\">heap_create_with_catalog</h2>\n<p>1）首先进行参数校验检查，在同一命名空间是否存在相同名、pg_type系统表是否存在相同typename等；\n2）调用 GetNewRelFileNode为此表分配一个全局唯一对象标识符Oid;</p>\n<ol start=\"3\" type=\"1\">\n<li>结合表名、命名空间、对象标识符OID以及元组描述符等信息调用\nheap_create 创建一个Relation 结构放入RelCache,后续根据此信息\ntable_relation_set_new_filenode（Relation）/\nRelationCreateStorage(Index)创建物理文件。 4）紧接着调用\nAddNewRelationType向pg_type系统表中注册该表的记录；\n5）AddNewRelationTuple向pg_class 系统表中插入该表的相关信息；\n6）AddNewAttributeTuples 将该表每个字段信息填充值 pg_attribute系统表；\n7）最后通过 StoreConstraints 将约束和默认值等信息存储至\npg_constraint和pg_attrdef系统表中。</li>\n</ol>\n<h2 id=\"heap_create\">heap_create</h2>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/aa22e495290b48cca4397b04558b98c8.png#pic_center\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>1）首先进行安全性检查，不允许在系统表中创建relations，判断是否需要创建持久化文件等；\n2）根据表名、表空间、表对象标识符和文件节点relfilenode等信息调用\nRelationBuildLocalRelation在内存中构建Relation，并插入全局relcache\n哈希表中；\n3）结合relation类型调用相应的接口函数进行relation的创建，[普通表/TOAST/物化视图:\ntable_relation_set_new_filenode，索引/序列：RelationCreateStorage];</p>\n<p>对于无需创建持久化的relation且用户指定表空间，则需要在 pg_tablespace\n中注册对应的信息。</p>\n<h2 id=\"relationbuildlocalrelation\">RelationBuildLocalRelation</h2>\n<p>该函数目的是在内存中构建创建表的relcache Entry，并插入全局Relcache\n哈希表中，用于加速后续对此表的访问。\n1）如果不存在CacheMemoryContext，则创建此上下文，后续操作均在此上下文进行；\n2）分配并初始化Relation结构体，结合入参的TueDesc填充Relation结构体中rd_att字段：字段属性的详细信息；\n3）分配并根据入参填充Relation结构体中rd_att字段的Form_pg_class字段：表名、命名空间、字段属性/数目等；\n4）调用 RelationInitLockInfo初始化relation描述符锁信息； 5）调用\nRelationInitPhysicalAddr\n初始化relation描述符对应的物理地址：spcNode/dbNode//RelNode\n[表空间/数据库/表] 6）将上述构建好的RelCache Entry插入全局ralcache\n哈希表中，并增加该条目的引用计数</p>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/f9bf4f64d38c421fb3278cc251816008.png#pic_center\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<h2 id=\"relationcreatestorage\">RelationCreateStorage</h2>\n<p>物理文件的创建由磁盘管理器负责，pg中所有文件系统均调用这统一接口，而RelationCreateStorage\n函数的实现就是通过调用这些函数进一步封装而成，期执行流程如下：\n1）对于持久化的relation，设置字段表示need_wal，表明需要写WAL日志，对于临时relation或者unlogged\nrelation无需此操作； 2）根据输入的RelFileNode调用 smgropen返回\nSMgrRelation对象，不存在会创建一个； 3）结合上述返回的\nSMgrRelation和ForkNumber号调用 smgrcreate创建relation的物理文件；\n4）如需写WAL日志，调用\nlog_smgrcreate函数记录下此relation的实际物理信息；\n5）最后将其添加至PendingRelDelete链表尾，在事务真正提交的时候如需回滚则可通过此信息将创建的文件删除，并返回\nSMgrRelation对象。</p>\n","categories":["openGauss"]},{"title":"postgreSQL中使用pageinspect拓展","url":"/2024/06/27/openGauss/postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8B%93%E5%B1%95pageinspect/","content":"<blockquote>\n<p>转载自</p>\n<ul>\n<li><a\nhref=\"https://blog.csdn.net/asmartkiller/article/details/118686612\">postgresql数据库扩展——pageinspect_pgpageinspect-CSDN博客</a></li>\n</ul>\n</blockquote>\n<p>如果使用MYSQL\n相对页面的层次进行一些了解，估计你就的找大佬们的工具集合，并且为此膜拜大佬们，但PG并不需要这样，PG自身自带的pageinspect\n工具，就可以让你对页面级别的层次来进行一个 “透心凉”\n的查看和分析，并不在为此苦恼。</p>\n<span id=\"more\"></span>\n<p>首先确认您是否拥有了 pageinspect 这个 extension\n，下图通过查看pg_extension这个表您可以确认，当前您的PG上已经安装了这个extension.</p>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/20210712235629691.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>如果没有请 create extension pageinspect;\n执行这条预计在您当前的数据块中，如果还不行，请您确认您的PG\n安装与编译是否正常。 select * from\nheap_page_items(get_raw_page(‘test’,0)) order by lp_off desc;</p>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/2021071223570099.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>通过上面的的图，是可以推理出数据存储是从页尾开始的，数据的插入顺序与步进之间的关系。</p>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/20210712235731255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzbWFydGtpbGxlcg==,size_16,color_FFFFFF,t_70\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>SELECT * from page_header(get_raw_page(‘test’, 0));</p>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/20210712235753934.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>lower = 72 , 通过这里可以获知当前PG的表TEST\n中曾经有过多少tumple(在这一刻)，PG的每页有28bytes\n的页头，同时每个指针是4bytes ，(72 - 28)/4 = 11 ,证明当前的指针有11个。\n我们插入一条记录 insert into test select generate_series(1,1),\nrandom()<em>100, random()</em>1, now();</p>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/20210712235824374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzbWFydGtpbGxlcg==,size_16,color_FFFFFF,t_70\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>从上图可以看出，指针并未有变化，并通过查看数据和页面的情况，看到新插入的记录，使用了之前空出的\nctid (0,1) 位置，所以指针并不需要在重新分配。\n我们继续在插入两条记录，可以看出指针分配了4个字节，并且新的记录也插入了未分配的空间，每行的偏移量是64bytes</p>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/20210712235851211.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>我们删除 ID &gt; 5 的记录</p>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/20210712235911727.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>然后 vacuum test表</p>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/20210712235936476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzbWFydGtpbGxlcg==,size_16,color_FFFFFF,t_70\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>通过命令我们也可以看到 vacuum\n后的空间回收了，并且页头也重新标记了次页面的容量，但指针是不在回收了。</p>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/2021071300000387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzbWFydGtpbGxlcg==,size_16,color_FFFFFF,t_70\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>通过上面几个简单的命令就可以，理解一些枯燥乏味的PG\n某些原理，也是不错的体验。\n如果还不理解上面的意思可以看下面这个图（由于信息量太大，所以只能截断成两个图）</p>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/20210713000028764.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/20210713000042613.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>这两张图拼在一起，呈现的就是一个完整的页面上面28个字节头，+ 每个指针\n下面就是你存储的每行数据，所以在此证明了页面存储的方式和逻辑中间的0\n都是未占用的空间。</p>\n<p>我想到此也就没有什么人不在不理解\nPG的页面了，试问还有那个数据库在不通过第三方的插件或软件的情况下，能如此通透的展现一个页面在你面前。</p>\n<p>SELECT get_raw_page::text FROM get_raw_page(‘test’, 0);</p>\n<p>相关的页面获得的源代码，将页面的内容memcpy到buffer\n然后给大家展现出来。</p>\n<figure>\n<img\nsrc=\"https://img-blog.csdnimg.cn/20210713000110851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzbWFydGtpbGxlcg==,size_16,color_FFFFFF,t_70\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>那如果有人问，你的数据到底占用了多少个页面，我看看看怎么来通过某种方式来回答他。\n1 一个页面我有多少数据 2 一共有多少行数据 2 /1 约等于 多少页面\n我们看看上面的算法是不是可以应用到PG 中</p>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/20210713000139797.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n<p>从结果看，还是比较准确的。</p>\n<figure>\n<img src=\"https://img-blog.csdnimg.cn/20210713000206193.png\"\nalt=\"在这里插入图片描述\" />\n<figcaption aria-hidden=\"true\">在这里插入图片描述</figcaption>\n</figure>\n","categories":["openGauss"]},{"title":"postgreSQL中MVCC解析","url":"/2024/06/27/openGauss/postgresql%E4%B8%ADMVCC%E8%A7%A3%E6%9E%90/","content":"<blockquote>\n<p>参考：</p>\n<ul>\n<li><a href=\"jasongj.com\">MVCC PostgreSQL 事务模型\n多版本并发控制</a></li>\n<li><a\nhref=\"https://blog.csdn.net/qq_31156277/article/details/90551978\">PostgreSQL如何实现MVCC\n(基于xmin、xmax、cmin、cmax)_postgresql cmin xmin-CSDN博客</a></li>\n</ul>\n</blockquote>\n<h1 id=\"x01-postgresql中mvcc原理\">0x01 PostgreSQL中MVCC原理</h1>\n<p>PostgreSQL中，对于每一行数据（称为一个tuple），包含有4个隐藏字段。这四个字段是隐藏的，但可直接访问。</p>\n<ul>\n<li>xmin\n在创建（insert）记录（tuple）时，记录此值为插入tuple的事务ID</li>\n<li>xmax 默认值为0.在删除tuple时，记录此值</li>\n<li>cmin和cmax\n标识在同一个事务中多个语句命令的序列值，从0开始，用于同一个事务中实现版本可见性判断</li>\n</ul>\n<p>下面通过实验具体看看这些标记如何工作。在此之前，先创建测试表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> test </span><br><span class=\"line\">(</span><br><span class=\"line\">  id <span class=\"type\">INTEGER</span>,</span><br><span class=\"line\">  <span class=\"keyword\">value</span> TEXT</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>开启一个事务，查询当前事务ID（值为3277），并插入一条数据，xmin为3277，与当前事务ID相等。符合上文所述——插入tuple时记录xmin，记录未被删除时xmax为0</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres=&gt; BEGIN;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">postgres=&gt; SELECT TXID_CURRENT();</span><br><span class=\"line\"> txid_current </span><br><span class=\"line\">--------------</span><br><span class=\"line\">         3277</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">postgres=&gt; INSERT INTO test VALUES(1, &#x27;a&#x27;);</span><br><span class=\"line\">INSERT 0 1</span><br><span class=\"line\">postgres=&gt; SELECT *, xmin, xmax, cmin, cmax FROM test;</span><br><span class=\"line\"> id | value | xmin | xmax | cmin | cmax </span><br><span class=\"line\">----+-------+------+------+------+------</span><br><span class=\"line\">  1 | a     | 3277 |    0 |    0 |    0</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p>继续通过一条语句插入2条记录，xmin仍然为当前事务ID，即3277，xmax仍然为0，同时cmin和cmax为1，符合上文所述cmin/cmax在事务内随着所执行的语句递增。虽然此步骤插入了两条数据，但因为是在同一条语句中插入，故其cmin/cmax都为1，在上一条语句的基础上加一。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO test VALUES(2, &#x27;b&#x27;), (3, &#x27;c&#x27;);</span><br><span class=\"line\">INSERT 0 2</span><br><span class=\"line\">postgres=&gt; SELECT *, xmin, xmax, cmin, cmax FROM test;</span><br><span class=\"line\"> id | value | xmin | xmax | cmin | cmax </span><br><span class=\"line\">----+-------+------+------+------+------</span><br><span class=\"line\">  1 | a     | 3277 |    0 |    0 |    0</span><br><span class=\"line\">  2 | b     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">  3 | c     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<p>将id为1的记录的value字段更新为’d’，其xmin和xmax均未变，而cmin和cmax变为2，在上一条语句的基础之上增加一。此时提交事务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE test SET value = &#x27;d&#x27; WHERE id = 1;</span><br><span class=\"line\">UPDATE 1</span><br><span class=\"line\">postgres=&gt; SELECT *, xmin, xmax, cmin, cmax FROM test;</span><br><span class=\"line\"> id | value | xmin | xmax | cmin | cmax </span><br><span class=\"line\">----+-------+------+------+------+------</span><br><span class=\"line\">  2 | b     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">  3 | c     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">  1 | d     | 3277 |    0 |    2 |    2</span><br><span class=\"line\">(3 rows)</span><br><span class=\"line\"></span><br><span class=\"line\">postgres=&gt; COMMIT;</span><br><span class=\"line\">COMMIT</span><br></pre></td></tr></table></figure>\n<p>开启一个新事务，通过2条语句分别插入2条id为4和5的tuple。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">BEGIN;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">postgres=&gt; INSERT INTO test VALUES (4, &#x27;x&#x27;);</span><br><span class=\"line\">INSERT 0 1</span><br><span class=\"line\">postgres=&gt; INSERT INTO test VALUES (5, &#x27;y&#x27;); </span><br><span class=\"line\">INSERT 0 1</span><br><span class=\"line\">postgres=&gt; SELECT *, xmin, xmax, cmin, cmax FROM test;</span><br><span class=\"line\"> id | value | xmin | xmax | cmin | cmax </span><br><span class=\"line\">----+-------+------+------+------+------</span><br><span class=\"line\">  2 | b     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">  3 | c     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">  1 | d     | 3277 |    0 |    2 |    2</span><br><span class=\"line\">  4 | x     | 3278 |    0 |    0 |    0</span><br><span class=\"line\">  5 | y     | 3278 |    0 |    1 |    1</span><br><span class=\"line\">(5 rows)</span><br></pre></td></tr></table></figure>\n<p>此时，将id为2的tuple的value更新为’e’，其对应的cmin/cmax被设置为2，且其xmin被设置为当前事务ID，即3278</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE test SET value = &#x27;e&#x27; WHERE id = 2;</span><br><span class=\"line\">UPDATE 1</span><br><span class=\"line\">postgres=&gt; SELECT *, xmin, xmax, cmin, cmax FROM test;</span><br><span class=\"line\"> id | value | xmin | xmax | cmin | cmax </span><br><span class=\"line\">----+-------+------+------+------+------</span><br><span class=\"line\">  3 | c     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">  1 | d     | 3277 |    0 |    2 |    2</span><br><span class=\"line\">  4 | x     | 3278 |    0 |    0 |    0</span><br><span class=\"line\">  5 | y     | 3278 |    0 |    1 |    1</span><br><span class=\"line\">  2 | e     | 3278 |    0 |    2 |    2</span><br></pre></td></tr></table></figure>\n<p>在另外一个窗口中开启一个事务，可以发现id为2的tuple，xin仍然为3277，但其xmax被设置为3278，而cmin和cmax均为2。符合上文所述——若tuple被删除，则xmax被设置为删除tuple的事务的ID。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">BEGIN;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">postgres=&gt; SELECT *, xmin, xmax, cmin, cmax FROM test;</span><br><span class=\"line\"> id | value | xmin | xmax | cmin | cmax </span><br><span class=\"line\">----+-------+------+------+------+------</span><br><span class=\"line\">  2 | b     | 3277 | 3278 |    2 |    2</span><br><span class=\"line\">  3 | c     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">  1 | d     | 3277 |    0 |    2 |    2</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<p>这里有几点要注意</p>\n<ul>\n<li>新旧窗口中id为2的tuple对应的value和xmin、xmax、cmin/cmax均不相同，实际上它们是该tuple的2个不同版本</li>\n<li>在旧窗口中，更新之前，数据的顺序是2，3，1，4，5，更新后变为3，1，4，5，2。因为在PostgreSQL中更新实际上是将旧tuple标记为删除，并插入更新后的新数据，所以更新后id为2的tuple从原来最前面变成了最后面</li>\n<li>在新窗口中，id为2的tuple仍然如旧窗口中更新之前一样，排在最前面。这是因为旧窗口中的事务未提交，更新对新窗口不可见，新窗口看到的仍然是旧版本的数据</li>\n</ul>\n<p>提交旧窗口中的事务后，新旧窗口中看到数据完全一致——id为2的tuple排在了最后，xmin变为3278，xmax为0，cmin/cmax为2。前文定义中，xmin是tuple创建时的事务ID，并没有提及更新的事务ID，但因为PostgreSQL的更新操作并非真正更新数据，而是将旧数据标记为删除，并插入新数据，所以“更新的事务ID”也就是“创建记录的事务ID”。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"> SELECT *, xmin, xmax, cmin, cmax FROM test;</span><br><span class=\"line\"> id | value | xmin | xmax | cmin | cmax </span><br><span class=\"line\">----+-------+------+------+------+------</span><br><span class=\"line\">  3 | c     | 3277 |    0 |    1 |    1</span><br><span class=\"line\">  1 | d     | 3277 |    0 |    2 |    2</span><br><span class=\"line\">  4 | x     | 3278 |    0 |    0 |    0</span><br><span class=\"line\">  5 | y     | 3278 |    0 |    1 |    1</span><br><span class=\"line\">  2 | e     | 3278 |    0 |    2 |    2</span><br><span class=\"line\">(5 rows)</span><br></pre></td></tr></table></figure>\n<h2 id=\"mvcc保证原子性\">MVCC保证原子性</h2>\n<p>原子性（Atomicity）指得是一个事务是一个不可分割的工作单位，事务中包括的所有操作要么都做，要么都不做。</p>\n<p>对于插入操作，PostgreSQL会将当前事务ID存于xmin中。对于删除操作，其事务ID会存于xmax中。对于更新操作，PostgreSQL会将当前事务ID存于旧数据的xmax中，并存于新数据的xin中。换句话说，事务对增、删和改所操作的数据上都留有其事务ID，可以很方便的提交该批操作或者完全撤销操作，从而实现了事务的原子性。</p>\n<h2 id=\"mvcc保证事物的隔离性\">MVCC保证事物的隔离性</h2>\n<p>隔离性（Isolation）指一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p>\n<p>标准SQL的事务隔离级别分为如下四个级别</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">隔离级别</th>\n<th style=\"text-align: left;\">脏读</th>\n<th style=\"text-align: left;\">不可重复读</th>\n<th style=\"text-align: left;\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">未提交读（read uncommitted）</td>\n<td style=\"text-align: left;\">可能</td>\n<td style=\"text-align: left;\">可能</td>\n<td style=\"text-align: left;\">可能</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">提交读（read committed）</td>\n<td style=\"text-align: left;\">不可能</td>\n<td style=\"text-align: left;\">可能</td>\n<td style=\"text-align: left;\">可能</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">可重复读（repeatable read）</td>\n<td style=\"text-align: left;\">不可能</td>\n<td style=\"text-align: left;\">不可能</td>\n<td style=\"text-align: left;\">可能</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">串行读（serializable）</td>\n<td style=\"text-align: left;\">不可能</td>\n<td style=\"text-align: left;\">不可能</td>\n<td style=\"text-align: left;\">不可能</td>\n</tr>\n</tbody>\n</table>\n<p>从上表中可以看出，从未提交读到串行读，要求越来越严格。</p>\n<p>注意，SQL标准规定，具体数据库实现时，对于标准规定不允许发生的，绝不可发生；对于可能发生的，并不要求一定能发生。换句话说，具体数据库实现时，对应的隔离级别只可更严格，不可更宽松。</p>\n<p>事实中，PostgreSQL实现了三种隔离级别——未提交读和提交读实际上都被实现为提交读。</p>\n<p>下面将讨论提交读和可重复读的实现方式</p>\n<h2 id=\"mvcc隔离级别探索\">MVCC隔离级别探索</h2>\n<p>无论提交成功或回滚的事务，xid 都会递增，对于repeatable read 和\nserializable 隔离级别的事务，如果它的xid 小于另外一个事务的xid\n。也就是xmin小于另外一个事务的xmin，那么另外一个事务对这个事务是不可见的。而read\ncommitted 则不会。</p>\n<p><strong>设置一个读已提交隔离级别</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">technology=# begin transaction isolation level read committed;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">technology=# SELECT ival FROM tb_mvcc WHERE id = 1;</span><br><span class=\"line\"> id | ival </span><br><span class=\"line\">----+------</span><br><span class=\"line\"> 1 |    1</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p><strong>另外一个事务对id=1 的进行修改，并commit</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">technology=# BEGIN;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">technology=# update tb_mvcc set ival = 11 where id = 1;</span><br><span class=\"line\">UPDATE 1</span><br><span class=\"line\">technology=# commit;</span><br></pre></td></tr></table></figure>\n<p><strong>在从第一个事务进行读取时，发现数据已经被修改，即在同一个事务中两次读取结果不一致。发现ival\n被修改成了11</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">technology=# SELECT id,ival FROM tb_mvcc WHERE id = 1;</span><br><span class=\"line\">id | ival </span><br><span class=\"line\">----+------</span><br><span class=\"line\"> 1 |   11</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p><strong>完整信息如下所示：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">technology=# begin transaction isolation level read committed;</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">technology=# SELECT xmin,xmax,cmin,xmax,id,ival FROM tb_mvcc WHERE id = 1;</span><br><span class=\"line\"> xmin | xmax | cmin | xmax | id | ival </span><br><span class=\"line\">------+------+------+------+----+------</span><br><span class=\"line\">  630 |    0 |    0 |    0 |  1 |    1</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">technology=# SELECT xmin,xmax,cmin,xmax,id,ival FROM tb_mvcc WHERE id = 1;</span><br><span class=\"line\"> xmin | xmax | cmin | xmax | id | ival </span><br><span class=\"line\">------+------+------+------+----+------</span><br><span class=\"line\">  635 |    0 |    0 |    0 |  1 |   11</span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">technology=# END;</span><br><span class=\"line\">COMMIT</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"mvcc提交读\">MVCC提交读</h3>\n<p>提交读只可读取其它已提交事务的结果。PostgreSQL中通过pg_clog来记录哪些事务已经被提交，哪些未被提交。具体实现方式将在下一篇文章《SQL优化（七）\nWAL PostgreSQL实现事务和高并发的重要技术》中讲述。</p>\n<h3 id=\"mvcc可重复读\">MVCC可重复读</h3>\n<p>相对于提交读，重复读要求在同一事务中，前后两次带条件查询所得到的结果集相同。实际中，PostgreSQL的实现更严格，不紧要求可重复读，还不允许出现幻读。它是通过只读取在当前事务开启之前已经提交的数据实现的。结合上文的四个隐藏系统字段来讲，PostgreSQL的可重复读是通过只读取xmin小于当前事务ID且已提交的事务的结果来实现的。</p>\n<h1 id=\"x02-postgresql中的mvcc优势\">0x02 PostgreSQL中的MVCC优势</h1>\n<ul>\n<li>使用MVCC，读操作不会阻塞写，写操作也不会阻塞读，提高了并发访问下的性能</li>\n<li>事务的回滚可立即完成，无论事务进行了多少操作</li>\n<li>数据可以进行大量更新，不像MySQL和Innodb引擎和Oracle那样需要保证回滚段不会被耗尽</li>\n</ul>\n<h1 id=\"x03-postgresql中的mvcc缺点\">0x03 PostgreSQL中的MVCC缺点</h1>\n<h2 id=\"事务id个数有限制\">事务ID个数有限制</h2>\n<p>事务ID由32位数保存，而事务ID递增，当事务ID用完时，会出现wraparound问题。</p>\n<p>PostgreSQL通过VACUUM机制来解决该问题。对于事务ID，PostgreSQL有三个事务ID有特殊意义：</p>\n<ul>\n<li>0代表invalid事务号</li>\n<li>1代表bootstrap事务号</li>\n<li>2代表frozon事务。frozon transaction id比任何事务都要老</li>\n</ul>\n<p>可用的有效最小事务ID为3。VACUUM时将所有已提交的事务ID均设置为2，即frozon。之后所有的事务都比frozon事务新，因此VACUUM之前的所有已提交的数据都对之后的事务可见。PostgreSQL通过这种方式实现了事务ID的循环利用。</p>\n<h2\nid=\"大量过期数据占用磁盘并降低查询性能\">大量过期数据占用磁盘并降低查询性能</h2>\n<p>由于上文提到的，PostgreSQL更新数据并非真正更改记录值，而是通过将旧数据标记为删除，再插入新的数据来实现。对于更新或删除频繁的表，会累积大量过期数据，占用大量磁盘，并且由于需要扫描更多数据，使得查询性能降低。</p>\n<p>PostgreSQL解决该问题的方式也是VACUUM机制。从释放磁盘的角度，VACUUM分为两种</p>\n<ul>\n<li>VACUUM\n该操作并不要求获得排它锁，因此它可以和其它的读写表操作并行进行。同时它只是简单的将dead\ntuple对应的磁盘空间标记为可用状态，新的数据可以重用这部分磁盘空间。但是这部分磁盘并不会被真正释放，也即不会被交还给操作系统，因此不能被系统中其它程序所使用，并且可能会产生磁盘碎片。</li>\n<li>VACUUM FULL\n需要获得排它锁，它通过“标记-复制”的方式将所有有效数据（非dead\ntuple）复制到新的磁盘文件中，并将原数据文件全部删除，并将未使用的磁盘空间还给操作系统，因此系统中其它进程可使用该空间，并且不会因此产生磁盘碎片。</li>\n</ul>\n","categories":["openGauss"]},{"title":"ubuntu安装postgresql9.2","url":"/2024/06/27/openGauss/ubuntu%E5%AE%89%E8%A3%85postgresql9.2/","content":"<h1\nid=\"一安装并配置并设置远程登陆的用户名和密码\">一、安装并配置，并设置远程登陆的用户名和密码</h1>\n<h2 id=\"安装postgresql\">1、安装postgreSQL</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository &quot;deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main&quot;</span><br><span class=\"line\">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install postgresql-9.6</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Ubuntu下安装Postgresql后，会自动注册为服务，并随操作系统自动启动。</li>\n<li>在Ubuntu下安装Postgresql后，会自动添加一个名为postgres的操作系统用户，密码是随机的。并且会自动生成一个名字为postgres的数据库，用户名也为postgres，密码也是随机的。</li>\n</ul>\n<span id=\"more\"></span>\n<h2\nid=\"修改postgres数据库用户的密码为manage\">2、修改postgres数据库用户的密码为manage</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo -u postgres psql</span><br><span class=\"line\">postgres=# ALTER USER postgres WITH PASSWORD &#x27;manage&#x27;;</span><br></pre></td></tr></table></figure>\n<h2\nid=\"修改ubuntu操作系统的postgres用户的密码密码要与数据库用户postgres的密码相同\">3、修改<a\nhref=\"https://so.csdn.net/so/search?q=ubuntu&amp;spm=1001.2101.3001.7020\">ubuntu</a>操作系统的postgres用户的密码（密码要与数据库用户postgres的密码相同）</h2>\n<p>切换到root用户，删除PostgreSQL用户密码并设置新的密码，passwd -d\n是清空指定用户密码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo passwd -d postgres</span><br><span class=\"line\">sudo -u postgres passwd</span><br></pre></td></tr></table></figure>\n<h2\nid=\"修改postgressql数据库配置实现远程访问\">4、修改PostgresSQL数据库配置实现远程访问</h2>\n<p><strong>vi /etc/postgresql/9.6/main/postgresql.conf</strong></p>\n<p>1.监听任何地址访问，修改连接权限</p>\n<p><strong>#listen_addresses = 'localhost' 改为 listen_addresses =\n'*'</strong></p>\n<p>2.启用密码验证</p>\n<p><strong>#password_encryption = on 改为 password_encryption =\non</strong></p>\n<p><strong>vi /etc/postgresql/9.6/main/pg_hba.conf</strong></p>\n<p>在文档末尾加上以下内容</p>\n<p><strong>host all all 0.0.0.0 0.0.0.0 md5</strong></p>\n<p>6、重启服务</p>\n<p>/etc/init.d/postgresql restart</p>\n<p>7、5432端口的防火墙设置</p>\n<p>5432为postgreSQL默认的端口</p>\n<p><strong>iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport\n5432 -j ACCEPT</strong></p>\n<h1\nid=\"二内部登录管理数据库新建数据库用户和密码\">二、内部登录，管理数据库、新建数据库、用户和密码</h1>\n<p>1、登录postgre SQL数据库</p>\n<p><strong>psql -U postgres -h 127.0.0.1</strong></p>\n<p>2、创建新用户zhangps，但不给建数据库的权限</p>\n<p><strong><em>*postgres=#*</em> create user \"zhangps\" with password\n'123456' nocreatedb;</strong></p>\n<ul>\n<li>用户名处是双引号</li>\n</ul>\n<p>3、建立数据库，并指定所有者</p>\n<p>**<em>*</em>*postgres=#****create database \"testdb\" with owner =\n\"zhangps\";**</p>\n<h1\nid=\"三外部登录管理数据库新建数据库用户和密码\">三、外部登录，管理数据库、新建数据库、用户和密码</h1>\n<p>1、在外部命令行的管理命令，创建用户pencil</p>\n<p><strong>sudo -u postgres createuser -D -P pencil</strong></p>\n<ul>\n<li>输入新的密码:</li>\n<li>再次输入新的密码:</li>\n</ul>\n<p>2、建立数据库(tempdb)，并指定所有者为（pencil）</p>\n<p><strong>sudo -u postgres createdb -O pencil tempdb</strong></p>\n<ul>\n<li>-O设定所有者为pencil</li>\n</ul>\n<p>postgres的 日志目录，</p>\n<p>/var/lib/postgresql/9.6/main</p>\n<p>如果不修改日志目录，则应该在</p>\n<p>/var/log/postgresql中</p>\n<p>在目录<strong>/etc/postgresql/9.6/main/postgresql.conf</strong></p>\n<p><strong>可以修改日志，重新定向目录为*<em>/var/lib/postgresql/9.6/main*</em></strong></p>\n<p>**<em>*</em>*log_destination = 'stderr'** **logging_collector = on**\n**log_directory = 'pg_log'** **log_filename =\n'postgresql-%Y-%m-%d_%H%M%S.log'** **log_rotation_age = 1d**\n**log_rotation_size = 100MB** **log_min_messages = info******</p>\n","categories":["openGauss"]},{"title":"wav音频格式解析","url":"/2025/06/09/audio/wav%E9%9F%B3%E9%A2%91%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/","content":"<blockquote>\n<p>参考：</p>\n<ul>\n<li>https://www.cnblogs.com/douzujun/p/10600793.html</li>\n</ul>\n</blockquote>\n<h1 id=\"wav格式专业名词\">WAV格式专业名词</h1>\n<p>wav是微软开发的一种音频文件格式，wav文件格式是无损音频文件格式，相对于其他音频格式文件数据是没有经过压缩的，通常文件也相对比较大些。</p>\n<blockquote>\n<p>支持多种音频数字，取样频率和声道，标准格式化的WAV文件和CD格式一样，也是44.1K的取样频率，16位量化数字，因此在声音文件质量和CD相差无几！\n通常使用<strong>三个参数来表示声音</strong>，<strong>量化位数，取样频率和<a\nhref=\"http://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E9%87%87%E6%A0%B7%E7%82%B9\">采样点</a>振幅</strong>。<strong>量化位数</strong>分为<strong>8位，16位，24位</strong>三种，<strong>声道</strong>有<strong>单声道和<a\nhref=\"http://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E7%AB%8B%E4%BD%93%E5%A3%B0\">立体声</a></strong>之分，单声道振幅数据为n*1矩阵点，立体声为n*2矩阵点，<strong>取样频率</strong>一般有11025Hz(11kHz)\n，22050Hz(22kHz)和44100Hz(44kHz) 三种，不过尽管<a\nhref=\"http://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E9%9F%B3%E8%B4%A8\">音质</a>出色，但在压缩后的文件体积过大！相对其他音频格式而言是一个缺点，其\n<strong>文件大小的计算方式</strong>为：<a\nhref=\"http://link.zhihu.com/?target=http%3A//baike.baidu.com/item/WAV%E6%A0%BC%E5%BC%8F\">WAV格式</a>文件所占<strong>容量</strong>（B)\n= （取样频率 X<a\nhref=\"http://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E9%87%8F%E5%8C%96%E4%BD%8D%E6%95%B0\">量化位数</a>X\n声道） X 时间 / 8 (<a\nhref=\"http://link.zhihu.com/?target=http%3A//baike.baidu.com/item/%E5%AD%97%E8%8A%82\">字节</a>=\n8bit)\n<strong>每一分钟WAV格式的音频文件的大小为10MB，其大小不随音量大小及清晰度的变化而变化</strong>。</p>\n</blockquote>\n<p>注：专业名词（取样频率、量化位数、声道）解释：https://blog.csdn.net/eric88/article/details/17098603</p>\n<ul>\n<li><strong><font color=\"red\">采样位数</font>：也叫量化位数(单位:比特)，</strong>是存储每个采样值所用的二进制位数。采样值反应了声音的波动状态。采样位数决定了量化精度。<strong>采样位数越长,量化的精度就越高,还原的波形曲线越真实,产生的量化噪声越小,回放的效果就越逼真</strong>。常用的量化位数有4、8、12、16、24。量化位数与声卡的位数和编码有关。如果采样位数为16位，那么能够表示的范围就是<span\nclass=\"math inline\">\\(2^{16}\\)</span>,采样位数越大，对声音的大小变化表现得也就越精细。</li>\n<li><strong><font color=\"red\">采样频率</font>：采样频率是指录音设备在一秒钟内对声音信号的采样次数，采样频率越高声音的还原就越真实越自然。</strong>越高所能描述的<strong>声波频率</strong>就越高。<strong>采样率</strong>决定<strong>声音频率</strong>的范围（<strong>相当于音调</strong>），由采样定理得知采样率需为待采样声音频率的2倍。</li>\n<li><strong><font color=\"red\">声道数</font>:\n使用的声音通道的个数，</strong>也是采样时所<strong>产生的声音波形的个数</strong>。播放声音时,单声道的WAV一般使用一个喇叭发声,立体声的WAV可以使两个喇叭发声。记录声音时,单声道,每次产生一个波形的数据,双声道,每次产生两个波形的数据,所占的存储空间增加一倍。</li>\n<li><strong>WAV格式大小：</strong>采样率一般是44.1K，16bit采样精度，存储成<strong>WAV格式大小</strong>\n= 44.1KHz(采样率) X 16bit(采样位数) X 2(双声道) X 播放时间</li>\n<li>WAV格式是没有压缩无损的，MP3格式是按1:12压缩保存的，所以MP3格式大小等于上式的1/12。</li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"wav二进制格式解析\">WAV二进制格式解析</h1>\n<p>大部分的多媒体文件都依循着一种结构来存放信息，这种结构称为\"资源互换文件格式\"(Resources\nlnterchange File\nFormat)，简称RIFF，例如声音的WAV文件，音频视频交错格式数据.AVI。</p>\n<figure>\n<img\nsrc=\"https://img.singhe.art/817161-20190326145146250-1289168612.png\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>以WAV格式为例，WAV文件一般由RIFF块、FMT块和DATA块三部分依次组成（还可能有JUNK块），下面分别进行介绍。</p>\n<h2 id=\"riff块\">RIFF块</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">WAV_RIFF</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> chunk_id_[<span class=\"number\">4</span>];     <span class=\"comment\">// &quot;RIFF&quot;</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> chunk_size_;  <span class=\"comment\">// 36 + sub_chunk2_size, 36是RIFF_T + FMT_T两个头信息的总大小</span></span><br><span class=\"line\">    <span class=\"type\">char</span> format_[<span class=\"number\">4</span>];       <span class=\"comment\">// &quot;WAVE&quot;</span></span><br><span class=\"line\">&#125; RIFF_T;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>chunk_id_的值固定为\"RIFF\"，占用四个字节</li>\n<li>chunk_size_指示WAV数据的大小，包含RIFF块和FMT块的大小</li>\n<li>format_的值固定为\"WAVE\"，占用四个字节</li>\n</ul>\n<h2 id=\"fmt块\">FMT块</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">WAV_FMT</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> sub_chunk1_id_[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> sub_chunk2_size_;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> audio_format_;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> num_channels_;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> sample_rate_;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> byte_rate_;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> block_align_;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> bits_per_sample_;</span><br><span class=\"line\">&#125; FMT_T;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>sub_chunk1_id_固定值为\"fmt\"</li>\n<li>sub_chunk2_size_代表<code>fmt</code>\n块中后续格式数据的长度，后面剩下的字段(audio_format_等)加起来一共是16字节</li>\n<li>audio_format_：音频格式（1 = PCM）</li>\n<li>num_channels_：声道数（1 = mono，2 = stereo）</li>\n<li>sample_rate_：采样率，例如 44100</li>\n<li>byte_rate_： 每秒字节数 = sample_rate_ × num_channels_ ×\n(bits_per_sample_ / 8)</li>\n<li>block_align_：一个采样帧占用的字节数</li>\n<li>bits_per_sample_：每个采样的位数，例如 16 位</li>\n</ul>\n<h2 id=\"data块\">DATA块</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">WAV_DATA</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> sub_chunk2_id_[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> sub_chunk2_size_;</span><br><span class=\"line\">    <span class=\"comment\">// sub-chunk-data</span></span><br><span class=\"line\">    <span class=\"type\">char</span> data[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125; DATA_T;</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"https://img.singhe.art/817161-20190326184927550-508732460.png\"\nalt=\"img\" />\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<h1 id=\"c程序解析格式\">C++程序解析格式</h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdint&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">WAV_RIFF</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> chunk_id_[<span class=\"number\">4</span>];     <span class=\"comment\">// &quot;RIFF&quot;</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> chunk_size_;  <span class=\"comment\">// 36 + sub_chunk2_size, 36是RIFF_T + FMT_T两个头信息的总大小</span></span><br><span class=\"line\">    <span class=\"type\">char</span> format_[<span class=\"number\">4</span>];       <span class=\"comment\">// &quot;WAVE&quot;</span></span><br><span class=\"line\">&#125; RIFF_T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">WAV_FMT</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> sub_chunk1_id_[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> sub_chunk2_size_;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> audio_format_;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> num_channels_;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> sample_rate_;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> byte_rate_;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> block_align_;</span><br><span class=\"line\">    <span class=\"type\">uint16_t</span> bits_per_sample_;</span><br><span class=\"line\">&#125; FMT_T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">WAV_DATA</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> sub_chunk2_id_[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> sub_chunk2_size_;</span><br><span class=\"line\">    <span class=\"comment\">// sub-chunk-data</span></span><br><span class=\"line\">&#125; DATA_T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">WAV_FORMAT</span> &#123;</span><br><span class=\"line\">    RIFF_T riff_;</span><br><span class=\"line\">    WAV_FMT fmt_;</span><br><span class=\"line\">&#125; WAV_HEADER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowWavHeaderInfo</span><span class=\"params\">(<span class=\"type\">const</span> WAV_HEADER &amp;header)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    FILE *fp = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *filepath = <span class=\"string\">&quot;/home/singheart/440hz.wav&quot;</span>;</span><br><span class=\"line\">    fp = <span class=\"built_in\">fopen</span>(filepath, <span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;open file [%s] failed\\n&quot;</span>, filepath);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    WAV_HEADER header;</span><br><span class=\"line\">    <span class=\"built_in\">fread</span>(&amp;header, <span class=\"built_in\">sizeof</span>(header), <span class=\"number\">1</span>, fp);</span><br><span class=\"line\">    <span class=\"built_in\">ShowWavHeaderInfo</span>(header);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"python画出wav波形\">Python画出WAV波形</h1>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> wave <span class=\"keyword\">as</span> we</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wavread</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    wavfile =  we.<span class=\"built_in\">open</span>(path,<span class=\"string\">&quot;rb&quot;</span>)</span><br><span class=\"line\">    params = wavfile.getparams()</span><br><span class=\"line\">    nchannels, sampwidth, framesra, frameswav = params[:<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;声道数:%d&quot;</span> % nchannels)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;采样宽度（字节数）:%d&quot;</span> % sampwidth)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;采样率：:%d&quot;</span> % framesra)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;总帧数:%d（样本点数量）&quot;</span> % frameswav)</span><br><span class=\"line\">    datawav = wavfile.readframes(frameswav)</span><br><span class=\"line\">    wavfile.close()</span><br><span class=\"line\">    datause = np.frombuffer(datawav,dtype = np.short)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nchannels == <span class=\"number\">2</span>:</span><br><span class=\"line\">        datause.shape = -<span class=\"number\">1</span>,<span class=\"number\">2</span></span><br><span class=\"line\">    datause = datause.T</span><br><span class=\"line\">    <span class=\"comment\"># 总的样本点数量除以采样率（每秒采集多少个点）</span></span><br><span class=\"line\">    time = np.arange(<span class=\"number\">0</span>, frameswav) * (<span class=\"number\">1.0</span>/framesra)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> datause, time, nchannels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    wavdata, wavtime, nchannels = wavread(<span class=\"string\">&quot;/home/singheart/440hz.wav&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    duration = <span class=\"number\">0.01</span>  <span class=\"comment\"># 只显示前0.01秒</span></span><br><span class=\"line\">    N = <span class=\"built_in\">int</span>(<span class=\"number\">44100</span> * duration)</span><br><span class=\"line\">    plt.plot(wavtime[:N],wavdata[:N],color = <span class=\"string\">&#x27;green&#x27;</span>)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;Time&#x27;</span>)</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">&#x27;Amplitude&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n","categories":["audio"],"tags":["audio"]}]